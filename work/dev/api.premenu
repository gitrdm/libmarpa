\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename api.info
@include version.texi
@settitle Libmarpa @value{VERSION}
@finalout
@c %**end of header

@copying
This manual (@value{UPDATED})
is for Libmarpa @value{VERSION}.

Copyright @copyright{} 2023 Jeffrey Kegler.

@quotation
Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the ``Software''),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
@end quotation
@end copying

@defindex df

@dircategory Development
@direntry
  * Marpa R2: (marpa-r2).                Marpa R2 parser library
@end direntry

@titlepage
@title Libmarpa
@subtitle Version @value{VERSION}
@subtitle @value{UPDATED}
@author Jeffrey Kegler

@c The following two commands
@c start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

Published @value{UPDATED} by Jeffrey Kegler
@end titlepage
@c So the toc is printed at the start.
@contents

@ifnottex
@node Top
@top Libmarpa: The Marpa low-level library
@insertcopying
@end ifnottex

@node License
@chapter License

@insertcopying

@node Updates
@chapter Updates

For important information
that has changed since the last stable release,
there is an ``updates'' document
(@url{https://github.com/jeffreykegler/libmarpa/blob/updated/UPDATES.md}).
The updates document includes
@itemize
@item descriptions of bugs in the latest stable release;
@item notices which are useful to current users,
but which do not justify a full new stable distribution; and
@item other information that we want to be able to update
without issuing a new stable release.
@end itemize

To allow that information to be kept current
without issuing a new stable release,
we describe how to obtain
support in the updates document.
@xref{Support}.

@node About this document
@chapter About this document

@node How to read this document
@section How to read this document

This is essentially a reference document,
but its early chapters lay out concepts
essential to the others.
Readers will usually want to read the
chapters up and including
@ref{Introduction to the method descriptions}
in order.
Otherwise, they should follow their interests.

@node Prerequisites
@section Prerequisites

This document is very far from self-contained.
It assumes the following:
@itemize
@item
The reader knows the C programming language
at least well
enough to understand function prototypes and return values.
@item
The reader
has read the documents for one of Libmarpa's upper layers.
As of this writing, the only such layer is @code{Marpa::R2}
or @code{Marpa::R3},
in Perl.
@item
The reader knows some parsing theory.
@xref{Parsing theory preliminaries}.
@end itemize

@node Overview of Libmarpa
@chapter Overview of Libmarpa

This chapter contains a quick overview of Libmarpa,
using standard parsing terminology.
It is intended to help a prospective reader of
the whole document to know what to
expect.
Details and careful definitions will be provided
in later chapters.

Libmarpa implements the Marpa parsing algorithm.
Marpa is named
after the legendary 11th century Tibetan translator,
Marpa Lotsawa.
In creating Marpa,
I depended heavily on previous work by Jay Earley,
Joop Leo,
John Aycock and Nigel Horspool.

Libmarpa implements the entire Marpa algorithm.
This library does
the necessary grammar preprocessing, recognizes the input,
and produces
a ``bocage'', which is
an optimized parse forest.
Libmarpa also supports the ordering, iteration
and evaluation of the parse trees in the bocage.

Libmarpa is very low-level.
For example, it has no strings.
Rules, symbols, and token values are all represented
by integers.
This, of course, will not suffice for many applications.
Users will very often want
names for the symbols, non-integer values for
tokens, or both.
Typically, applications will use arrays to
translate Libmarpa's integer ID's to strings or other
values as required.

Libmarpa also does @strong{not} implement most of the semantics.
Libmarpa does have an evaluator (called a ``valuator''),
but it does @strong{not}
manipulate the stack directly.
Instead, Libmarpa,
based on its traversal of the parse tree,
passes optimized step by step stack manipulation
instructions to the upper layer.
These instructions indicate the token or rule involved,
and the proper location for the true token value or
the result of the rule evaluation.
For rule evaluations, the instructions include the stack location
of the arguments.

Marpa requires most semantics to be
implemented in the application.
This allows the application total flexibility.
It also puts
the application is in a much better position to prevent errors,
to catch errors at runtime or,
failing all else,
to successfully debug the logic.

@node Terms, definitions and notation
@chapter Terms, definitions and notation

@node Miscellaneous definitions
@section Miscellaneous definitions

@itemize
@item
@dfindex application
@dfn{Application} means an ``application'' of Libmarpa.
In this document,
a Libmarpa application is not necessarily an application program.
For our purposes, an ``application''
might be another library that uses Libmarpa.
@item
The components of the
@dfindex application environment
@dfindex environment, application
@dfn{application environment}
are the system components other than Libmarpa and
the application itself.
Application environments vary,
but their components often include an operating system,
system libraries,
a C compiler and its libraries,
and hardware.
@item A
@dfindex value, boolean
@dfindex boolean
@dfindex boolean value
@dfn{boolean} value, or @dfn{boolean},
is an integer that is 0 or 1.
@item
An
@dfindex application environment limit
@dfindex limit, application environment
@dfn{application environment limit},
more often called simply an
@dfindex environment limit
@dfindex limit, environment
@dfn{environment limit},
is a limit imposed by the application
enviroment.
For our purposes, the most important environment limit
is usually available memory.
@item
@dfindex iff
The lexeme @dfn{iff} is an abbreviation for ``if and only if''.
@item
@dfindex max(x,y)
@code{max(x,y)} is the maximum of
@code{x} and @code{y},
where @code{x} and @code{y} are two numbers.
@item
@dfindex method
@dfn{Libmarpa method}, or just @dfn{method}, means a C function
or a function-like macro of the Libmarpa library.
@item
@dfindex user
@dfn{User} means a ``user'' of the Libmarpa library.
A user of the library is also a programmer,
so that in this document, ``user''
and ``programmer'' are essentially synonyms.
@item
@dfindex we
@dfindex us
@dfindex our
@dfn{We} (as well as ``us'' and ''our'') refers to the authors,
but is also intended to suggest that the reader
is joining the authors
on the millenia-old voyage of discovery
into mathematics and language.
As of this writing, there is a one primary author.
@end itemize

The following terms are used in a way that is consistent
with their use in the C99 standard:
@itemize
@item
@dfindex indeterminate value
An @dfn{indeterminate value}
is either an unspecified value or a trap value.
@item
@dfindex trap value
A @dfn{trap value},
also called a @dfn{trap representation},
is a value that when accessed causes undefined behavior.
@xref{Trap representations}.
@item
@dfindex undefined behavior
An @dfn{undefined behavior}
is a behavior that this document does not specify.
One implication is that this behavior might be problematic.
@item
@dfindex unspecified behavior
An @dfn{unspecified behavior}
is a behavior that, within a range of possibilities,
is not further specified by this document.
This is usually not problematic.
@item
@dfindex unspecified value
An @dfn{unspecified value}
is a value on which this document imposes no restrictions,
except that it cannot be a trap value.
@end itemize

@node Parsing theory preliminaries
@section Parsing theory preliminaries

This document assumes the reader is familiar with parsing
theory.
The following exposition is @strong{not} intended
as either an introduction or a reference.
Instead, it is intended to serve as a guide to the definitions
of parsing terms as used in this document.

The definitions given are intended to be applicable within Libmarpa,
rather than to reflect general usage.
For example,
Marpa sometimes uses a standard term
with a definition that is different from
the standard definition.
``Ambiguous grammar'' is one example:
@xref{Ambiguity}.
The term ``terminal'' is
another.
@xref{Terminals}.
When a standard term is defined in a non-standard way.
this is explicitly pointed out.

Readers who want a textbook or tutorial in parsing theory
can look at
Mark Jason Dominus's
excellent chapter on parsing in the Perl context.
@xref{Bibliography-Dominus-2005}.
It is available on-line.
Wikipedia is also an excellent place to start.
@xref{Bibliography-Wikipedia}.

A
@dfindex grammar
@dfn{grammar}
is a set of
@dfindex rule
@dfn{rules},
associated with a set of symbols,
one of which is distinguished as the start symbol.
A
@dfindex symbol string
@dfn{symbol string},
or simply
@dfindex string
@dfn{string}
where the meaning is clear,
is an ordered series of symbols.
The
@dfindex length
@dfn{length}
of a string is the number of symbols in it.
A symbol string is also called a
@dfindex sentential form
@dfn{sentential form}.

Some of the symbols are terminals.
For the the moment, we will say that a terminal is a symbol
which may occur in an input to a parse of a grammar.
A careful definition appropriate specifically to Marpa
is below (@pxref{Terminals}).
In a parse, an input is either accepted or rejected.
A potential input string,
that is, a sentential form which is made up entirely of terminal symbols,
is called a
@dfindex sentence
@dfn{sentence}.
The set of sentences that a grammar accepts is the
@dfindex language
@dfn{language}
of the grammar.

It is important to note that the term language, as it is
used in parsing theory, means something very different
from what it means in ordinary use.
The meaning of the strings is an essential part
of the ordinary idea of what a language is.
In parsing terminology, meaning (or
@dfindex semantics
@dfn{semantics}
as it is
called) is a separate issue.
For parsing theory a
language is exactly a set of strings --
that and nothing more.

A
@dfindex recognizer
@dfn{recognizer}
is a program that determines whether its
@dfindex input
@dfn{input}
is in the language of a grammar.
A
@dfindex parser
@dfn{parser}
is a program which finds the structure of that input.

Parsers often use a
@dfindex lexical analyzer
@dfn{lexical analyzer}
to convert
@dfindex raw input
@dfn{raw input},
usually
@dfindex input text
@dfn{input text},
into a
@dfindex token stream
@dfn{token stream},
which is a series of
@dfindex tokens
@dfn{tokens}.
Each token represents one or more
@dfindex symbol
@dfn{symbols}
of the grammar and has a
@dfindex value
@dfn{value}.
(Libmarpa tokens may be ambiguous.
@xref{Ambiguous input}.)
A token is also sometimes called a
@dfindex lexeme
@dfn{lexeme}.
A lexical analyzer is often called a
@dfindex lexer
@dfn{lexer}
or a
@dfindex scanner
@dfn{scanner},
and
@dfindex lexical analysis
@dfn{lexical analysis}
is often called
@dfindex lexing
@dfn{lexing}
or
@dfindex scanning
@dfn{scanning}.

The series of symbols represented by the series of tokens
becomes the
@dfindex symbol string input
@dfn{symbol string input}
seen by the recognizer.
The
@dfindex symbol string input
@dfn{symbol string input}
is more often called the
@dfindex input sentence
@dfn{input sentence},
or simply the
@dfindex input
@dfn{input}.

@node Rules
@section Rules

A standard way of describing rules is Backus-Naur Form, or
@dfindex BNF
@dfn{BNF}.
In one common way of writing BNF, a rule looks like this:

@verbatim
    Expression ::= Term Factor
@end verbatim

In the rule above, @code{Expression}, @code{Term} and @code{Factor} are symbols.
A rule consists of a
@dfindex left hand side
@dfn{left hand side}
and a
@dfindex right hand side
@dfn{right hand side}.
In a
@dfindex context-free grammar
@dfn{context-free grammar},
like those Marpa parses,
the left hand side of a rule
is always a symbol string of length 1.
The right hand side of a rule is a symbol string of zero or more symbols.
In the example, @code{Expression} is the left hand side, and
@code{Term} and @code{Factor} are right hand side symbols.

Left hand side and right hand side are often abbreviated as
@dfindex RHS
@dfn{RHS}
and
@dfindex LHS
@dfn{LHS}.
If the RHS of a rule has no symbols,
the rule is called an
@dfindex empty rule
@dfn{empty rule}
or an
@dfindex empty rule
@dfn{empty rule}.

In a standard grammar, all rules are BNF rules,
as just described.
Marpa grammars differ from standard grammars
in allowing a second kind of rule: a
@dfindex sequence rule
@dfn{sequence rule}.
The RHS of a sequence rule is a single symbol,
which is repeated zero or more times.
Libmarpa allows the application to specify other parameters
for sequence rules,
including a separator symbol.
@xref{Sequence rules}.

@node Derivations
@section Derivations

A
@dfindex step
@dfn{step}
of a derivation, or
@dfindex derivation step
@dfn{derivation step}, is a change made to a symbol string
by applying one of the rules from the grammar.
The rule must be one of those with a LHS that occurs in the symbol string.
The result of the derivation step is another symbol string,
one in which an occurrence of the LHS symbol from the rule is
replaced by the RHS of the rule.
@anchor{derivation-example}
For example, if @var{A}, @var{B}, @var{C}, @var{D}, and @var{X} are symbols,
and

@verbatim
    X ::= B C
@end verbatim

is a rule, then

@verbatim
    A X D -> A B C D
@end verbatim

is a derivation step,
@itemize
@item with ``@code{A X D}'' as its beginning,
@item ``@code{A B C D}'' as its end or result, and
@item @verb{|X ::= B C|} as its rule.
@end itemize
A
@dfindex derivation
@dfn{derivation}
is a sequence of derivation steps.
The
@dfindex length
@dfn{length}
of a derivation is its length in steps.

@itemize
@item
A string @var{X}
@dfindex derives
@dfn{derives}
a string @var{Y}
iff
there is a derivation of zero or more steps
which begins with the string
@var{X} and ends in the string @var{Y}.
In the example above (@pxref{derivation-example}),
we say that the symbol string ``@code{A X D}''
derives
the symbol string
``@code{A B C D}'' in one step.
@item We say that
a first symbol string
@dfindex directly derives
@dfindex derives, directly
@dfn{directly derives}
a second symbol string iff there is a derivation of length 1 from the first symbol
string to the second symbol string.
In the example above (@pxref{derivation-example}),
we say that the symbol string ``@code{A X D}''
directly derives
the symbol string
``@code{A B C D}''.
@item Every symbol string is said to derive itself in a derivation
of length 0.  A zero length derivation is a
@dfindex trivial derivation
@dfn{trivial derivation}.
@item A derivation which is not trivial
(that is,
a derivation which has one or more steps)
is a
@dfindex non-trivial
@dfn{non-trivial}
derivation.
@item If a derivation is not trivial or direct, that is, if it has more than one step,
then it is an
@dfindex indirect
@dfn{indirect}
derivation.
@end itemize

Pedantically, a symbol @var{X} and a string
that consists of only that symbol
are two different things.
But we often say ``the symbol @var{X}'',
or ``@var{X}'',
as shorthand for ``the string
of length 1
whose only symbol is @var{X}''.
For example, if the string containing only the
symbol @var{X} derives a string @var{Y},
we will usually say simply that ``@var{X} derives @var{Y}''.

Wherever symbol or string @var{X} derives @var{Y},
we may also say @var{X}
@dfindex produces
@dfn{produces}
@var{Y}.
Derivations are often described as symbol matches.
Wherever symbol or string @var{X} derives @var{Y},
we may also say that @var{Y}
@dfindex matches
@dfn{matches}
@var{X}
or that @var{X}
@dfindex matches
@dfn{matches}
@var{Y}.
It is particularly common to say that
@var{X} matches @var{Y} when @var{Y} is a sentence.

The parse of an input by a grammar is
@dfindex successful
@dfn{successful}
iff, according to the grammar,
the start symbol produces the input sentence.
The set of all input sentences that
a grammar
will successfully parse is
the
@dfindex language
@dfn{language}
of
the grammar.

@node Nulling
@section Nulling

The zero length symbol string is called the
@dfindex empty string
@dfn{empty string}.
The empty string can be considered to be a sentence, in which
case it is the
@dfindex empty sentence
@dfn{empty sentence}.
A string of one or more symbols is
@dfindex non-empty
@dfn{non-empty}.
A derivation which produces the empty string is a
@dfindex null derivation
@dfn{null derivation}.
A derivation from the start symbol which produces the empty string
is a
@dfindex null parse
@dfn{null parse}.

If a symbol produces the empty string,
it is a
@dfindex nullable symbol
@dfn{nullable symbol}.
If
the only sentence produced by a symbol is the empty sentence,
it is a
@dfindex nulling symbol
@dfn{nulling symbol}.
All nulling symbols are nullable symbols.

If a symbol is not nullable, it is
@dfindex non-nullable
@dfn{non-nullable}.
If a symbol is not nulling, it is
@dfindex non-nulling
@dfn{non-nulling}.

A rule is
@dfindex nullable rule
@dfindex rule, nullable
@dfn{nullable}
iff it is the rule of the first step of
a null derivation.
A rule is
nullable iff its LHS symbol is nullable.

A rule @var{r} is
@dfindex nulling rule
@dfindex rule, nulling
@dfn{nulling}
iff every derivation whose first step has @var{r}
as its rule is a null derivation.
A rule is
nulling iff its LHS symbol is nulling.

If a rule is not nullable, it is
@dfindex non-nullable
@dfn{non-nullable}.
If a rule is not nulling, it is
@dfindex non-nulling
@dfn{non-nulling}.

@node Useless rules
@section Useless rules

If any derivation from the start symbol uses a rule,
that rule is called
@dfindex reachable
@dfn{reachable}
or
@dfindex accessible
@dfn{accessible}.
A rule that is not accessible
is called
@dfindex unreachable
@dfn{unreachable}
or
@dfindex inaccessible
@dfn{inaccessible}.
A symbol is
@dfindex reachable
@dfn{reachable}
or
@dfindex accessible
@dfn{accessible}
if it appears in a reachable rule.
If a symbol is not reachable, it is
@dfindex unreachable
@dfn{unreachable}
or
@dfindex inaccessible
@dfn{inaccessible}.

If any derivation which results in a sentence uses a rule,
that rule is said to be
@dfindex productive
@dfn{productive}.
A rule that is not productive is called
@dfindex unproductive
@dfn{unproductive}.
A rule is productive iff every symbol on
its RHS is productive.
An empty rule is productive, vacuously.

A symbol is productive iff
it is a terminal or it is the LHS of a productive rule.
These definitions imply that all nullable rules are productive.
They also imply that every nullable symbol is productive,
because every nullable symbol must be on the LHS of a nullable rule.

A rule which is inaccessible or unproductive is called a
@dfindex useless
@dfn{useless}
rule.
A symbol which is inaccessible or unproductive is called a
@dfindex useless
@dfn{useless}
symbol.
Marpa can handle grammars with useless rules and symbols.

@node Recursion and cycles
@section Recursion and cycles

If any symbol in the grammar non-trivially produces a symbol string containing itself,
the grammar is said to be
@dfindex recursive
@dfn{recursive}.
If any symbol non-trivially produces a symbol string in which it is the leftmost symbol,
the grammar is said to be
@dfindex left-recursive
@dfn{left-recursive}.
If any symbol non-trivially produces a symbol string in which it is the rightmost symbol,
the grammar is said to be
@dfindex right-recursive
@dfn{right-recursive}.
Marpa can handle all recursive grammars,
including
grammars which are left-recursive,
grammars which are right-recursive,
and grammars
which contain both left- and right-recursion.

A
@dfindex cycle
@dfn{cycle}
is a non-trivial derivation
of a string of symbols from itself.
If it is not possible for any derivation using a grammar
to contain a cycle,
then that grammar is said to be
@dfindex cycle-free
@dfn{cycle-free}.
Traditionally, a grammar is
considered useless
if it is not cycle-free.

The traditional deprecation of cycles is well-founded.
A cycle is
the parsing equivalent of an infinite loop.
Once a cycle appears, it can be
repeated over and over again.
Even a very short input sentence can have an
infinite number of parses when the grammar is not
cycle-free.

For that reason,
a grammar which contains a cycle is also
called
@dfindex infinitely ambiguous
@dfn{infinitely ambiguous}.
Marpa can parse with grammars which are not
cycle-free,
but use of this feature is deprecated.
@xref{Cycles}.

@node Trees
@section Trees

In this document,
unless otherwise stated,
@itemize
@item by
@dfindex tree
@dfn{tree},
we mean a
@dfindex labeled ordered tree
@dfindex tree, labeled ordered
@dfn{labeled ordered tree}; and
@item by
@dfindex tree node
@dfn{tree node},
we mean a
@dfindex labeled ordered tree node
@dfindex node, labeled ordered tree
@dfindex tree node, labeled ordered
@dfn{labeled ordered tree node}.
@end itemize
For brevity,
in contexts where the meaning is clear,
we refer to a tree node simply as a
@dfindex node (of a tree)
@dfn{node}.
A node is a pair:
@itemize
@item The first element of a node is
a ``label tuple''.
The label tuple is a triple
of symbol ID,
start Earley set ID, and
end Earley set ID.
For more about the Earley set IDs,
@pxref{Input}.
@item The second element of a node is
a sequence of nodes.
Our definition of a tree node is therefore recursive.
@end itemize

When looked at from the point of view
of its labels,
a node
is often called an
@dfindex instance
@dfn{instance}.
In the following list of definitions and assertions, let
@verbatim
     nd = < < sym, start, end >, children >
@end verbatim
be a tree node.
@itemize
@item
We say that
@code{sym} is the symbol of @code{nd}.
@item
We say that @code{nd} is an
@dfindex instance (of a symbol)
@dfn{instance} of the symbol with ID @code{sym}
starting at @code{start} and ending at @code{end}.
@item
We say that @code{nd} is an
@dfindex instance (of a symbol)
@dfn{instance} of the symbol with ID @code{sym} at location @code{end}.
@item
We say that the
@dfindex length (of a node)
@dfindex node length
@dfn{length} of @code{nd} is the
difference between its start and end,
that is @code{end@minus{}start}.
@item
The length of @code{nd} is zero iff
@code{start} is the same as @code{end}.
Put another way,
the length of @code{nd} is zero iff
@code{start = end}.
@item
We say that the elements of @code{children}
are the
@dfindex children (of a node)
@dfn{children}
of @code{nd}.
@item
We say that every element of @code{children}
is a
@dfindex child (of a node)
@dfn{child}
of @code{nd}.
@item
For brevity, we say
that the symbol @code{sym} is
@dfindex at (a location, wrt a symbol)
@dfn{at}
@code{end}.
We note that this means we consider the location of a symbol
to be where it ends.
@item @code{nd} is a
@dfindex leaf node
@dfn{leaf node} iff @code{children}
is the empty list.
A leaf node is also called a
@dfindex leaf (node)
@dfn{leaf}.
@item @code{nd} is a
@dfindex rule node
@dfn{rule node} iff it is not a leaf node.
@item Every node is either a leaf node or a rule node.
No node is both a leaf and a rule node.
@item We say that @code{nd} is a
@dfindex terminal node
@dfn{terminal node}
iff @code{nd} is a leaf node
and @code{sym} is a terminal.
A terminal node is also called a
@dfindex token node
@dfn{token node}.
@item We say that @code{nd} is a
@dfindex nulled node
@dfn{nulled node}
iff @code{nd} is a leaf node
and @code{sym} is @strong{not} a terminal.
A nulled node is also called a
@dfindex nulling node
@dfn{nulling node}.
@item Every leaf node is either a nulled node or a terminal node.
But, because nullable LHS terminals are not allowed,
no node is both nulled and terminal.
@item We say that @code{nd}
is a
@dfindex BNF node
@dfn{BNF node}
iff
@code{nd} is not a terminal node
and @code{sym} is the LHS of a BNF rule.
@item We say that @code{nd}
is a
@dfindex sequence node
@dfn{sequence node}
iff
@code{nd} is not a terminal node
and @code{sym} is the LHS of a sequence rule.
@item
Every node is a terminal node, a BNF node
or a sequence node.
But no node is more
than one of the these three.
This is because sequence rules never share a
LHS with a BNF rule,
and no BNF node or sequence node is a terminal node.
@item
If @code{nd} is a rule node, its
@dfindex LHS (of a rule node)
@dfn{LHS} is @code{sym}.
@item
If @code{nd} is a rule node, its
@dfindex RHS (of a rule node)
@dfn{RHS} is the concatenation,
from first to last,
of the symbols of the nodes in @code{children}.
@item
All nulled nodes are zero-length.
No terminal node is zero-length.
@item We say that @code{nd} is an instance of
@code{sym} starting at @code{start} and ending
at @code{end}.
We also say that @code{nd} is an instance of
@code{sym} at @code{end} or, simply,
that @code{nd} is an instance of @code{sym}.
@item
Let @var{r} be the BNF rule whose LHS
is equal to the LHS of @code{nd},
and whose RHS is equal to the RHS of @code{nd}.
If @code{nd} is a BNF rule node,
there must be such a rule.
In that case,
we say that @code{nd} is an instance of
@var{r} starting at @code{start} and ending
at @code{end}.
We also say that @code{nd} is an instance of
@var{r} at @code{end} or, simply,
that @code{nd} is an instance of @var{r}.
@item
Let @var{r} be the sequence rule whose LHS
is equal to the LHS of @code{nd}.
If @code{nd} is a sequence rule node,
there must be such a rule.
In that case,
we say that @code{nd} is an instance of
@var{r} starting at @code{start} and ending
at @code{end}.
We also say that @code{nd} is an instance of
@var{r} at @code{end} or, simply,
that @code{nd} is an instance of @var{r}.
@item
@dfindex nulled symbol instance
@dfindex symbol instance, nulled
If @code{nd} is a nulled instance,
we say that @code{sym} is
@dfindex nulled (of a symbol)
@dfn{nulled} at location @code{end} or, simply,
that the symbol @code{sym} is nulled.
@end itemize

Let @var{nd1} and @var{nd2} be two nodes.
If @var{nd2} is a child of @var{nd1},
then @var{nd1} is the
@dfindex parent (wrt a node)
@dfn{parent} of @var{nd2}.

We define
@dfindex ancestor
@dfn{ancestor}
recursively
such that
@var{nd1} is the ancestor
of a node @var{nd2}
iff one of the following are true:
@itemize
@item @var{nd1} and @var{nd2} are the same node.
In this case we say that @var{nd1} is the
@dfindex trivial ancestor
@dfindex ancestor, trivial
@dfn{trivial ancestor}
of @var{nd2}.
@item @var{nd1} is the parent of an ancestor of @var{nd2}.
In this case we say that @var{nd1} is a
@dfindex proper ancestor
@dfindex ancestor, proper
@dfn{proper ancestor}
of @var{nd2}.
@end itemize

Simlarly, we define
@dfindex descendant
@dfn{descendant}
recursively
such that
@var{nd1} is the descendant
of a node @var{nd2}
iff one of the following are true:
@itemize
@item @var{nd1} and @var{nd2} are the same node.
In this case we say that @var{nd1} is the
@dfindex trivial descendant
@dfindex descendant, trivial
@dfn{trivial descendant}
of @var{nd2}.
@item @var{nd1} is the parent of an descendant of @var{nd2}.
In this case we say that @var{nd1} is a
@dfindex proper descendant
@dfindex descendant, proper
@dfn{proper descendant}
of @var{nd2}.
@end itemize

A tree is its own
@dfindex root node
@dfindex node, root
@dfn{root node}.
That implies that, in fact, tree and node are just two different terms for the
same thing.
We usually speak of trees when we are thinking of the nodes/trees
as a collection of nodes,
and we
speak of nodes when we are more focused on the individual nodes.

We sometimes call a root node, a
@dfindex node, start
@dfindex start node
@dfn{start node}.
We do this especially in contexts where a tree is ``top-level'',
that is, not the child of any other tree under discussion.

If @code{t1} and @code{t2} are trees,
and @code{t2} (considered as a node) is a descendant
of @code{t1},
then we say @code{t2} is a
@dfindex subtree
@dfn{subtree}
of @code{t1}.
By this definition, every tree is a subtree
of itself.

A
@dfindex parse (forest)
@dfindex parse forest
@dfindex forest
@dfn{parse forest}
is a set of one or more
parse trees.

We use ``parse'' as a noun in several senses.
Depending on context a
@dfindex parse (aka parse run)
@dfindex parse (aka parse tree)
@dfindex parse (aka parse forest)
@dfn{parse}
may be
@itemize
@item a parse run, that is, an instance of running a parser on
an input using a grammar;
@item a parse tree; or
@item a parse forest.
@end itemize
When the meaning of ``parse'' is not clear in context,
we will be explicit about which sense is intended.

@node An example tree
@section An example tree

@verbatim
     < < "S", 0, 7 >, [
         < < "A", 0, 2 >, [
             < < "T", 0, 1 >, [ ] >,
             < < "U", 1, 2 >, [ ] >
         ] >,
         < < "B", 2, 2 >, [ ] >,
         < < "C", 2, 3 >, [
             < < "V", 2, 3 >, [ ] >
         ] >,
         < < "D", 3, 5 >, [
             < < "W", 3, 4 >, [ ] >,
             < < "X", 4, 5 >, [ ] >
         ] >,
         < < "E", 5, 7 >, [
             < < "Y", 5, 6 >, [ ] >,
             < < "Z", 6, 7 >, [ ] >
         ] >
      ] >
@end verbatim

In the tree above, we use symbol names (for example, @code{"S"})
as symbol IDs.
Since we have not used the same symbol twice, we will be able to
refer to a node by its symbol name.
In practical parse trees, symbols usually occur many times.

Node @code{S} has 5 children.
Node @code{A} has 2 children.
Node @code{B} has no children and is a nulled node.
Nodes @code{T}, @code{U}, @code{V}, @code{W}, @code{X},
@code{Y}, and @code{Z}
are terminal nodes.
Nodes
@code{S},
@code{A},
@code{C},
@code{D}, and
@code{E}
are BNF rule nodes.
The tree implies a grammar with at least
the following rules:
@verbatim
    S ::= A B C D E
    A ::= T U
    B ::=
    C ::= V
    D ::= W X
    E ::= Y Z
@end verbatim

The tree derives the sentence
@verbatim
      T U V W X Y X
@end verbatim
and can do so in several ways.
One is these is its rightmost derviation:
@verbatim
    S -> A B C D E
      -> A B C D Y Z
      -> A B C W X Y Z
      -> A B V W X Y Z
      -> A V W X Y Z
      -> T U V W X Y Z
@end verbatim
This is called the
@dfindex rightmost derivation
@dfindex derivation, rightmost
@dfn{rightmost derviation}
because,
at each derivation step,
the symbol that is expanded is the rightmost symbol possible.
There is also a
@dfindex leftmost derivation
@dfindex derivation, leftmost
@dfn{leftmost derivation}:
@verbatim
    S -> A B C D E
      -> T U B C D E
      -> T U C D E
      -> T U V D E
      -> T U V W X E
      -> T U V W X Y Z
@end verbatim


@node Traversal
@section Traversal

We often want to ``visit'' all the nodes of a tree in a sequence,
or
@dfindex traverse
@dfn{traverse}
the tree.
In the semantics phase,
it is often necessary to visit all the children of a node
before the node itself.
We can do this using a
@dfindex postorder traversal
@dfn{postorder traversal}
traversal.
Here is a recursive procedure for a postorder traversal
of the tree @code{nd}:
@verbatim
         If nd is not well-defined, return
         Traverse the children of nd, in order
         Visit nd
@end verbatim
A postorder traversal is also often called a
@dfindex depth-first traversal
@dfn{depth-first traversal},
or a
@dfindex bottom-up traversal
@dfn{bottom-up traversal}.
A postorder traversal of our example tree (@pxref{An example tree})
visits the nodes in the following order:
@verbatim
    T U A B V C W X D Y Z E S
@end verbatim

@node Semantics terms
@section Semantics terms

Rarely is an application interested only in the tree.
Traditionally and most often, the tree
is an intermediate step in producing the ``value'' of the parse run.
A value of a parse run is a ``meaning'' of the input string.

Grammars almost always have a
@dfindex semantics
@dfn{semantics}
associated with them.
The purpose of parsing is to use the
grammar and its semantics to find the
@dfindex value
@dfn{value}
of the input string.
Finding the value of a parse tree
is called
@dfindex evaluate (a tree)
@dfn{evaluating a tree}.
More loosely,
we also speak of
@dfindex evaluate (a parse run)
@dfn{evaluating the parse run},
or
@dfindex evaluate (an input string)
@dfn{evaluating the input string}.

We recall that Libmarpa provides instructions for stack manipulation.
@xref{Value methods}.
Libmarpa does not directly do evaluation
because Libmarpa is usually used
together with a higher-level language,
and the semantics is first known,
and the evaluation is most easily performed,
in the higher-level language.

In the most common method of evaluating a parse tree,
every node
has a value associated with it.
An application might determine the value of a terminal node from
@itemize
@item the node's symbol;
@item a ``token value'', which Libmarpa allows the user
to specify for
each input symbol at the time the input symbol is recognized;
@item context information, including the node's location information; or
@item any combination of the above.
@end itemize

In determining the value of nulled nodes, the application may also
consider the node's symbol and context information.
Libmarpa prunes nulled subtrees back to their root,
which usually is what the application expects.
The evaluation of nulled nodes is discussed in detail
in the chapter on nullability.
@xref{Nullability}.

To find the value of a rule node, an application
may use the rule, context information, and the values of the
rule node's children.
Let @code{nd} be a rule node,
and let @code{childCount} be the number of children of @code{nd}.
Frequently, the semantics of @code{nd} is implemented as
a ``semantic function''.
The arguments of the semantic function are typically a scratchpad variable, call it @code{scratch},
followed by the values of the children of @code{nd},
so that the number of arguments for the function is @code{childCount+1}.
The return value of the semantic function becomes the value of @code{nd}.

Semantic functions often have side effects.
For example, a grammar for a language often wants its semantic functions
to build and refer to a symbol table.
The @code{scratch} variable allows for this.

Implementing this traditional method of tree evaluation requires
a bottom-up traversal of the parse tree.
In the final step of a bottom-up traversal,
the start node is evaluated,
and the value of the start node becomes the value of the parse run.

@node Ambiguity
@section Ambiguity

In our discussion of evaluation above
(@pxref{Semantics terms}),
we spoke of evaluating trees.
In fact, the result of a successful Libmarpa parse run is a parse forest.
We say that a Libmarpa parse run is
@dfindex ambiguous
@dfn{ambiguous}
iff the parse run returns
a forest containing more than one parse tree.
We say that a succcessful Libmarpa parse run is
@dfindex unambiguous
@dfn{unambiguous}
iff
it contains exactly one parse tree.

Most applications care only about one parse tree.
An application is free to decide what to do in case a parse
forest is ambiguous.
Among the application's options are picking one tree and evaluating that tree;
iterating through the parse trees;
or treating the ambiguity as an error.

Libmarpa's treatment of ambiguity differs somewhat
from the traditional one, for two reasons.
First, Libmarpa allows ambiguous tokens.
Second, Libmarpa prunes nulled subtrees back to their topmost
nulled symbol.

An ambiguous token occurs when the same lexeme can be
recognized as more than one token symbol.
Traditionally, parsers do not allow this,
but it is the most natural way of parsing some real-life applications.
For example, natural languages often allow words to be
used as more than one part of speech.
In this document, the English word ``parse''
is used as an adjective, a verb, and a noun,
and each of these uses is common.
Ambiguous tokens are
a source of ambiguity not present in traditional
parsing.
@xref{Ambiguous input}.

On the other hand, the pruning of nulled subtrees
eliminates a source of ambiguity
that is present in traditional parsing.
Multiple nulled subtrees may share their topmost nulled symbol.
When the subtrees are pruned to their shared root,
ambiguity is removed.
@xref{Nullability}.

@node Application and diagnostic behavior
@section Application and diagnostic behavior

An
@dfindex application behavior
@dfindex behavior, application
@dfn{application behavior}
is a behavior on which it is intended that
the design of applications
will be based.
In this document,
a behavior is an application behavior unless otherwise stated.
We sometimes say that ``applications may expect'' a certain behavior
to emphasize that that behavior is an application behavior.

After an irrecoverable failure, the behavior of a Libmarpa application
is undefined,
so that there are no behaviors that can be relied on for normal
application processing,
and therefore, there are no application behaviors.
In this circumstance,
some of the application behaviors become
diagnostic behaviors.
A
@dfindex diagnostic behavior
@dfindex behavior, diagnostic
@dfn{diagnostic behavior}
is a behavior that this document suggests
that the programmer may attempt in the face of an irrecoverable failure,
for purposes of testing, diagnostics and debugging.
Diagnostic behaviors are hoped for, rather than expected,
and intended
to allow the programmer to deal with irrecoverable
failures as smoothly as possible.
(@xref{Failure}.)

In this document,
a behavior is a diagnostic behavior only if that is specifically
indicated.
Applications should not be designed to rely
on diagnostic behaviors.
We sometimes say that the application ``may attempt'' a certain behavior
to emphasize that that behavior is a diagnostic behavior.

@node Architecture
@chapter Architecture

@node Major objects
@section Major objects

The classes of
Libmarpa's object system fall into two types:
major and numbered.
These are the Libmarpa's major classes,
in sequence.

@itemize
@item
Configuration:
A configuration object is
a thread-safe way to hold configuration variables,
as well as the return code from failed attempts
to create grammar objects.
@item
Grammar:
A grammar object contains rules and symbols,
with their properties.
@item
Recognizer:
A recognizer object reads input.
@item
Bocage:
A bocage object is a collection of
parse trees, as found by a recognizer.
A bocage is a way of representing a parse forest.
@item
Ordering:
An ordering object
is an ordering of the trees
in a bocage.
@item
Tree:
A tree object is a bocage iterator.
@item
Value:
A value object is a tree iterator.
Iteration of a tree using a value object
produces ``steps''.
These ``steps'' are
instructions to
the application on how
to evaluate the semantics,
and how to manipulate the stack.
@end itemize


The major objects have one letter abbreviations,
which are used frequently.
These are, in the standard sequence,

@itemize
@item
Configuration:  C
@item
Grammar:  G
@item
Recognizer: R
@item
Bocage: B
@item
Ordering: O
@item
Tree: T
@item
Value: V
@end itemize

@node Time objects
@section Time objects

All of Libmarpa's major classes,
except the configuration class,
are @dfn{time classes}.
An object in a time class is a @dfn{time object}.
Except for objects in the grammar class,
all time objects are created from a time object
of the class before it in the sequence.
A recognizer cannot be created without a precomputed grammar;
a bocage cannot be created without a recognizer;
and so on.

When one time object is used to create a second
time object,
the first time object is the
@dfindex @sortas{parent object} parent object (of a time object)
@dfn{parent object}
and the second time object is the
@dfindex @sortas{child object} child object (of a time object)
@dfn{child object}.
For example, when a bocage is created from a
recognizer,
the recognizer is the parent object,
and the bocage is the child object.

Grammars have no parent object.
Every other time object has exactly one parent object.
Value objects have no child objects.
All other time objects can have any number of children,
from zero up to a maximum determined by memory availability
or some other environment limit.

An object is the
@dfindex ancestor (object)
@dfn{ancestor}
of another object if it is the parent of
that object,
or if it is the parent of an ancestor of that object.
An object is the
@dfindex descendant (object)
@dfn{descendant}
of another object if it is the child of
that object,
or if it is the child of an descendant of that object.
The following three statements are mutually exclusive:
@itemize
@item Object @code{X} is of class @code{C}.
@item Object @code{X} has an ancestor of class @code{C}.
@item Object @code{X} has a descendant of class @code{C}.
@end itemize
It follows from the definitions of ``parent'' and ``ancestor'' that,
for any time object class, an
object can have at most one ancestor of that class.
On the other hand, if an object has descendants in a class,
there can be many of them.

An object is a
@dfindex base (object)
@dfn{base}
of another object, if it is that object,
or if it is the ancestor of the object.
For each time object class, an object has at most one base object.
For example, a recognizer is its own base recognizer,
and has exactly one base grammar.

The
@dfindex @sortas{base grammar} base grammar (of a time object)
@dfn{base grammar}
of a time object is of special importance.
Every time object has a base grammar.
A grammar object is its own base grammar.
The base grammar of a recognizer is its parent grammar,
the one that it was created with.
The base grammar of any other time object is the base
grammar of its parent object.
For example,
the base grammar of a bocage is the base
grammar of the recognizer that it was created
with.

@node Reference counting
@section Reference counting

Every object in a ``time'' class
has its own, distinct, lifetime,
which is controlled by the object's reference count.
Reference counting follows the usual practice.
Contexts that take a share of the
``ownership'' of an object
increase the reference count by 1.
When a context relinquishes its share of
the ownership of an object, it decreases the reference
count by 1.

Each class of time object has a ``ref'' and an ``unref''
method, to be used by those contexts that need to
explicitly increment and decrement the reference count.
For example, the ``ref'' method for the grammar class is
@code{marpa_g_ref()}
and the ``unref'' method for the grammar class is
@code{marpa_g_unref()}.

Time objects do not have explicit destructors.
When the reference count of a time object reaches
0, that time object is destroyed.

Much of the necessary reference counting
is performed automatically.
The context calling the constructor of a time object
does not need to explicitly increase the reference
count, because
Libmarpa time objects are
always created with a reference count of 1.

Child objects ``own'' their parents,
and when a child object is successfully created,
the reference count of its parent object is
automatically incremented to reflect this.
When a child object is destroyed, it
automatically decrements the reference count of its parent.

In a typical application, a calling context needs only
to remember
to ``unref'' each time object that it creates,
once it is finished with that time object.
All other reference decrements and increments are taken
care of automatically.
The typical application never needs to explicitly
call one of the ``ref'' methods.

More complex applications may find it convenient
to have one or more contexts share ownership of objects
created in another context.
These more complex situations
are the only cases in which the ``ref'' methods
will be needed.

@node Numbered objects
@section Numbered objects

In addition to its major, ``time'' objects, Libmarpa also has
numbered objects.
Numbered objects do not have lifetimes of their own.
Every numbered object belongs to a time object,
and is destroyed with it.
Rules and symbols are numbered objects.
Tokens values are another class of numbered
objects.

@node Input
@chapter Input

@node Earlemes
@section Earlemes

@node The traditional input model
@subsection The traditional input model

In traditional Earley parsers, the concept of location is very simple.
Locations are numbered from 0 to @var{n}, where @var{n} is the length of
the input.
Every location has an Earley set, and vice versa.
Location 0 is the start location.
Every location after the start location has exactly one input token
associated with it.

Some applications
do not fit this traditional input model ---
natural language processing requires ambiguous tokens,
for example.
Libmarpa allows a wide variety of alternative input models.

In Libmarpa a location is called a
@dfindex earleme
@dfn{earleme}.
The number of an Earley set is the
@dfindex ID (of an Earley set)
@dfn{ID of the Earley set},
or its
@dfindex ordinal (of an Earley set)
@dfn{ordinal}.
In the traditional model, the ordinal of an Earley set and
its earleme are always exactly the same, but in Libmarpa's
advanced input models
the ordinal of an Earley set can be different from
its location (earleme).

The important earleme values are
the latest earleme.
the current earleme, and
the furthest earleme.
Latest, current and furthest earleme,
when they have specified values,
obey a lexical order in this sense:
The latest earleme is always at or before the current earleme,
and the current earleme is always at or before the furthest earleme.

@node The latest earleme
@subsection The latest earleme

The
@dfindex Earley set, latest
@dfn{latest Earley set}
is the Earley set completed most recently.
This is initially the Earley set at location 0.
The latest Earley set is always the Earley set with the highest ordinal,
and the Earley set with the highest earleme location.
The
@dfindex earleme, latest
@dfn{latest earleme} is the earleme of the latest Earley set.
If there is an Earley set at the current earleme,
it is the latest Earley set and the latest earleme
is equal to the current earleme.
There is never an Earley set after the current earleme,
and therefore the latest Earley set is never after the
current earleme.
The @code{marpa_r_start input()} and
@code{marpa_r_earleme_complete()} methods
are only ones that change the latest earleme.
@xref{marpa_r_start_input, marpa_r_start_input()}, and
@ref{marpa_r_earleme_complete, marpa_r_earleme_complete()}.

The latest earleme is different from the current earleme if and only if
there is no Earley set at the current earleme.
A different end of parsing can be specified,
but by default, parsing is of the input
in the range
from earleme 0 to the latest earleme.

@node The current earleme
@subsection The current earleme

The
@dfindex earleme, current
@dfn{current earleme}
is the earleme that Libmarpa is currently working on.
More specifically, it is the one at which new tokens will @strong{start}.
Since tokens are never zero length, a new token will always end after the
current earleme.
@code{marpa_r_start_input()}
initializes the current earleme to 0,
and every call to
@code{marpa_r_earleme_complete()}
advances the
current earleme by 1.
The @code{marpa_r_start input()} and
@code{marpa_r_earleme_complete()} methods
are only ones that change the current earleme.
@xref{marpa_r_start_input, marpa_r_start_input()}, and
@ref{marpa_r_earleme_complete, marpa_r_earleme_complete()}.

@node The furthest earleme
@subsection The furthest earleme

Loosely speaking,
the
@dfindex earleme, furthest
@dfn{furthest earleme}
is the furthest earleme reached by the parse.
More precisely,
it is the highest numbered
earleme at which a token ends
and is 0 if there are no tokens.
The furthest earleme is 0 when a recognizer is
created.
With every call to
@code{marpa_r_alternative()}, the end of the token
it adds is calculated.
A token ends at the earleme location @var{current}+@var{length},
where @var{current} is the current earleme,
and @var{length} is the length of the newly added token.
If @code{old_f} is the furthest earleme before
a call to
@code{marpa_r_alternative()},
the furthest earleme after the call
is @code{max(old_f, current+length)}.
The @code{marpa_r_new()} and
@code{marpa_r_alternative()} methods
are only ones that change the furthest earleme.
@xref{marpa_r_new, marpa_r_new()}, and
@ref{marpa_r_alternative, marpa_r_alternative()}.

In the basic input models,
where every token has length 1,
calling
@code{marpa_r_earleme_complete()}
after each
@code{marpa_r_alternative()}
call is sufficient to process
all inputs,
and the furthest earleme's value
can be ignored.
In alternative input models,
where tokens have lengths greater than 1,
calling @code{marpa_r_earleme_complete()}
once after the last token
is read may not be enough to ensure that all tokens have been processed.
To ensure that all tokens have been processed,
an application must advance the current earleme
by calling
@code{marpa_r_earleme_complete()},
until the current earleme is equal to the furthest earleme.

@node The basic models of input
@section The basic models of input

For the purposes of presentation,
we (somewhat arbitrarily)
divide Libmarpa's input models
into two groups:
basic and advanced.
In the
@dfindex basic models of input
@dfindex models of input, basic
@dfindex input, basic models of
@dfn{basic input models of input},
every token is exactly one earleme long.
This implies that, in a basic model of input,
@itemize
@item every token is the same length,
@item the ordinal of an Earley set
will always be the same as its earleme location, and
@item the latest earleme and the current earleme are always equal.
@end itemize

In the
@dfindex advanced models of input
@dfindex models of input, advanced
@dfindex input, advanced models of
@dfn{advanced models of input},
tokens may have a length other than 1.
Most applications use the basic input models.
The details of the advanced models of input are
presented in a later chapter.
@xref{Advanced input models}.

@node The standard model of input
@subsection The standard model of input

In the standard model of input,
there is exactly one successful
@code{marpa_r_alternative()} call
immediately previous
to every
@code{marpa_r_earleme_complete()} call.
A @code{marpa_r_alternative()} call is
@dfindex previous (to a @code{marpa_r_earleme_complete()} call), immediately
@dfindex immediately previous (to a @code{marpa_r_earleme_complete()} call)
@dfn{immediately previous} to a
@code{marpa_r_earleme_complete()} call
iff
that @code{marpa_r_earleme_complete()} call is
the first
@code{marpa_r_earleme_complete()} call after
the @code{marpa_r_alternative()} call.

Recall that, since the standard model is
a basic model,
the token length in every successful call to @code{marpa_r_alternative()}
will be one.
For an input of length @var{n}, there will be
exactly @var{n} @code{marpa_r_earleme_complete()} calls,
and all but the last call
to @code{marpa_r_earleme_complete()}
must be successful.

In the standard model,
after a successful call
to
@code{marpa_r_alternative()},
if @var{c} is the value  of the current earleme before the call,
@itemize
@item the current earleme will remain unchanged and therefore
  will be @var{c}; and
@item the furthest earleme will be @var{c}+1.
@end itemize

In the standard model,
a call to
@code{marpa_r_earleme_complete()}
follows a successful call of
@code{marpa_r_alternative()},
so that the value of the furthest earleme before the call to
@code{marpa_r_earleme_complete()} will be @code{c+1},
where @var{c} is the value of the current earleme.
After a successful call to
@code{marpa_r_earleme_complete()},
@itemize
@item the current earleme will be advanced to @code{c+1}; and
@item the furthest earleme will be @var{c+1}, and therefore equal
to the current earleme.
@end itemize

Recall that, in the basic models of input,
the latest earleme is always equal to the current earleme.

@node Ambiguous input
@subsection Ambiguous input

We can loosen the standard model to
allow more than one successful call to
@code{marpa_r_alternative()}
immediately previous to each call to
@code{marpa_r_earleme_complete()}.
This change will mean that multiple tokens become possible
at each earleme ---
in other words, that the input becomes ambiguous.
We continue to require that there be
at least one successful call to
@code{marpa_r_alternative()}
before each call to
@code{marpa_r_earleme_complete()}.
And we recall that,
since this is a basic input model,
all tokens must have a length of 1.

In the ambiguous input model, the behavior of the current,
latest and furthest earlemes are exactly
as described for the standard model.
@xref{The standard model of input}.

@node Terminals
@section Terminals

Traditionally,
a terminal symbol is a symbol that
may appear in the input.
Traditional grammars
divide all symbols sharply into terminals
and non-terminals:
A terminal symbol must @strong{always} be used as a terminal.
A non-terminal symbol can @strong{never} be used as a terminal.

In Libmarpa, by default, a symbol is a terminal,
and therefore may appear in the input iff
both of the following are true:
@itemize
@item The symbol is non-nulling.
It is a logical contradiction for a nulling symbol
to appear in the input.
For this reason, Marpa does not allow it.
@item The symbol does not appear on the
LHS of any rule.
@end itemize

Marpa's default behavior follows tradition.
A now-deprecated feature of
Marpa allowed for LHS terminals.
@xref{LHS terminals}.
Most readers will want to stick to
Marpa's default behavior,
and can and should ignore the possibility
of LHS terminals.
Even when LHS terminals are allowed,
terminals can never be zero length.

In Libmarpa,
every terminal instance has a token value associated with it.
Token values are @code{int}'s.
Libmarpa does nothing with token values except accept
them from the application and return them during
parse evaluation.

@node Exhaustion
@chapter Exhaustion

A parse is
@dfindex exhausted parse
@dfindex parse, exhausted
@dfn{exhausted} when it cannot accept any further input.
A parse is
@dfindex active parse
@dfindex parse, active
@dfn{active} iff it is not exhausted.
For a parse to be exhausted,
the furthest earleme and the current earleme
must be equal.
However, the converse is not always the case:
if more tokens can be read at the current earleme,
then it is possible for
the furthest earleme and the current earleme
to be equal in an active parse.

Parse exhaustion always has a location.
That is, if a parse is exhausted it is exhausted at some earleme location @code{X}.
If a parse is exhausted at location @code{X}, then
@itemize
@item There may be valid parses at @code{X}.
@item The parse was active at all locations earlier than @code{X}.
@item There may be valid parses at locations before @code{X}.
@item There will be no valid parses at locations after @code{X}.
@item No tokens can start at location @code{X}.
@item No tokens can end at a location after @code{X}.
@item No tokens can start at any location after @code{X}.
@item No tokens will be accepted by an exhausted parser.
    It is an irrecoverable hard failure to call @code{marpa_r_alternative()}
    after a parser has become exhausted.
@item No Earley sets will be at any location after @code{X}.
@item No earlemes are completed by, and no Earley sets are created by, an exhausted parser.
    It is an irrecoverable hard failure to call @code{marpa_r_earleme_complete()}
    after a parser has become exhausted.
@end itemize

Users sometimes assume that parse exhaustion means parse failure.
But other users sometimes assume that parse exhaustion means parse success.
For many grammars,
there are strong associations between parse exhaustion
and parse success,
but the strong association can go either way,
Both exhaustion-loving and exhaustion-hating
grammars are very common in
practical application.

In an
@dfindex exhaustion-hating applications
@dfindex applications, exhaustion-hating
@dfn{exhaustion-hating}
application,
parse exhaustion typically means parse failure.
C programs, Perl scripts and most programming languages
are exhaustion-hating applications.
If a C program is well-formed,
it is always possible to read more input.
The same is true of a Perl program that does not have a @code{__DATA__} section.

In an
@dfindex exhaustion-loving applications
@dfindex applications, exhaustion-loving
@dfn{exhaustion-loving}
application
parse exhaustion means parse success.
A toy example of an exhaustion-loving
application is the language consisting of balanced parentheses.
When the parentheses come into perfect balance the parse is exhausted,
because any further input would unbalance the brackets.
And the parse succeeds when the parentheses come into perfect balance.
Exhaustion means success.
Any language that balances start and end indicators will tend to
be exhaustion-loving.
HTML and XML, with their start and end tags, can be seen
as exhaustion-loving languages.

One common form of exhaustion-loving parsing
occurs in lexers that look for longest matches.
Exhaustion will indicate that the longest match has been found.

It is possible for a language to be
exhaustion-loving at some points
and exhaustion-hating at others.
We mentioned Perl's @code{__DATA__} as a complication in a
basically exhaustion-hating language.

@code{marpa_r_earleme_complete()} and
@code{marpa_r_start_input} are the only methods
that may encounter parse exhaustion.
@xref{marpa_r_earleme_complete,marpa_r_earleme_complete()}, and
@ref{marpa_r_start_input,marpa_r_start_input()}.
When the @code{marpa_r_start_input} or
@code{marpa_r_earleme_complete()} methods
exhaust the parse,
they generate a @code{MARPA_EVENT_EXHAUSTED} event.
Applications
can also query
parse exhaustion status directly
with the
@code{marpa_r_is_exhausted()} method.
@xref{marpa_r_is_exhausted,marpa_r_is_exhausted()}.

@node Semantics
@chapter Semantics

Libmarpa handling of semantics is unusual.
Most semantics are left up to the application,
but Libmarpa guides them.
Specifically, the application is expected to maintain the evaluation
stack.
Libmarpa's valuator provides instructions on how to handle the stack.
Libmarpa's stack handling instructions
are called ``steps''.
For example, a Libmarpa step might tell the application that the value
of a token needs to go into a certain stack position.
Or a Libmarpa step might tell the application that a rule is to be evaluated.
For rule evaluation, Libmarpa will tell the application where the operands
are to be found,
and where the result must go.

The detailed discussion of
Libmarpa's handling of semantics is in the reference chapters
of this document,
under the appropriate methods and classes.
The most extensive discussion of the semantics
is in the section that deals with the methods of the value time class
(@ref{Value methods}).

@node Threads
@chapter Threads

Libmarpa is thread-safe,
given circumstances as described below.
The Libmarpa methods are not reentrant.

Libmarpa is C89-compliant.
It uses no global data,
and calls only the routines
that are defined in the C89 standard
and that can be made thread-safe.
In most modern implementations,
the default C89 implementation is thread-safe
to the extent possible.
But the C89 standard does not require thread-safety,
and even most modern environments allow the user
to turn thread safety off.
To be thread-safe, Libmarpa must be compiled
and linked in an environment that provides
thread-safety.

While Libmarpa can be used safely across
multiple threads,
a Libmarpa grammar cannot be.
Further, a Libmarpa time object can
only be used safely in the same thread
as its base grammar.
This is because all
time objects with the same base grammar share data
from that base grammar.

To work around this limitation,
the same grammar definition can be
used to a create a new
Libmarpa grammar
time object in each thread.
If there is sufficient interest, future versions of
Libmarpa could allow thread-safe
cloning of grammars and other
time objects.

@node Sequence rules
@chapter Sequence rules

Traditionally, grammars only allow BNF rules.
Libmarpa allows sequence rules, which express sequences
by allowing
a single RHS symbol to be repeated.

A sequence rule consists of a LHS and a RHS symbol.
Additionally, the application must indicate the minimum number
of repetitions.
The minimum count must be 0 or 1.

Optionally, a separator symbol may be specified.
For example, a comma-separated sequence of numbers
@verbatim
     1,42,7192,711,
@end verbatim
may be recognized
by specifying the rule @verb{|Seq ::= num|} and
the separator @verb{|comma ::= ','|}.
By default, an optional final separator,
as shown in the example above,
is recognized,
but ``proper separation'' may also be specified.
In proper separation separators must,
in fact,
come between (``separate'') items of the sequence.
A final separator is not a separator in the strict sense,
and therefore is not recognized when proper separation is in effect.
For more on specifying sequence rules,
@pxref{marpa_g_sequence_new}.

Sequence rules are ``sugar'' ---
their presence in the Libmarpa interface does not extend its power.
Every Libmarpa grammar that can be written using sequence rules
can be rewritten as a grammar without sequence rules.

The RHS symbol and the separator, if there is one,
must not be nullable.
This is because it is not completely clear what
an application intends
when it asks for a sequence of items,
some of which are nullable ---
the most natural interpretation of this usually results in a highly
ambiguous grammar.

Libmarpa allows highly ambiquous grammars
and a programmer who wants a grammar
with sequences containing nullable items or separators
can write that grammar using BNF rules.
The use of BNF rules
make it clearer that ambiguity is what the programmer
intended, and allows the programmer more flexibility.

A sequence rule must have a dedicated LHS ---
that is, the LHS of a sequence rule must not be the LHS of
any other rule.
This implies that the LHS of a sequence rule can
never be the LHS of a BNF rule.

The requirement that the LHS of a sequence rule be
unique is imposed for reasons similar to those
for the
prohibition against RHS and separator nullables.
Often reuse of the LHS of a sequence rule
is simply a mistake.
Even when deliberate,
reuse of the LHS results in a complex grammar,
one which often parses in ways that the programmer
did not intend.

A programmer who believes they know what they
are doing, and really does want alternative sequences starting
at the same input location, can specify this behavior indirectly.
They can do this by creating two sequence rules with distinct LHS's:
@verbatim
     Seq1 ::= Item1
     Seq2 ::= Item2
@end verbatim
and adding a new ``parent'' LHS which recognizes the sequences as alternatives.
@verbatim
     SeqChoice ::= Seq1
     SeqChoice ::= Seq2
@end verbatim

@node Nullability
@chapter Nullability

In Libmarpa,
there is no direct way to mark a symbol nullable or nulling.
All Libmarpa's terminal symbols are non-nullable.
By default,
Libmarpa's non-terminal symbols are nullable or nulling depending
on the rules in which they appear on the LHS.
The default behavior for non-terminals can be changed
(@pxref{LHS terminals}),
but this is deprecated.

To make a symbol @var{x} nullable,
a user must create an nulling rule whose LHS is @var{x}.
The empty rule is nulling,
so that one way a user can ensure @var{x} is nullable
is by making it the LHS of an empty rule.
If every rule with @var{x} on the LHS is nulling,
@var{x} will be not just nullable,
but nulling as well.

@node Nullability and the valuator
@section Nullability in the valuator

In the valuator,
every nulling tree is pruned back to its
topmost nulling symbol.
This means that there are no nulling rules in the valuator,
only nulling symbols.
For an example of how this works,
@pxref{Example of nulled symbol}.

While this may sound draconian,
the ``lost'' semantics of the
nulled rules and
non-topmost nulled symbols
are almost never missed.
Nulled subtrees cannot contain input,
and therefore do not contain token symbols.
So no token values are lost when
nulled subtrees are pruned,
and we are dealing with the semantics
of the empty string.
@xref{Evaluating nulled symbols}.

@node Assigning semantics to nulled symbols
@section Assigning semantics to nulled symbols

Libmarpa leaves the semantics to an upper layer,
so that we usually treat
semantics as outside the scope of this document.
But most upper layers will find that
nulled symbols are a corner case
for their semantics,
and we therefore
offer the writers of upper layers
some hints.

Typically, upper layers will assign semantics to
a LHS symbol based on the rule instance
in which the LHS occurs.
All nulled symbols are LHS symbols,
but the valuator prunes all nulled rules,
forcing the application to determine the semantics
of a nulled symbol instance based on its symbol.
One method of making this determination
is the one which is implemented in @code{Marpa::R2}.
Let @var{g} be a grammar;
and let @var{x} be a symbol that
is nulled in a parse that uses @var{g}.
Call a rule in @var{g} with @var{x} on its LHS,
an ``@var{x} LHS rule''.
@code{Marpa::R2} assigns a semantics to @var{x}
using the first of following guidelines that applies:
@itemize
@item If every @var{x} LHS rule in @var{g}
has the same semantics,
@code{Marpa::R2} assigns that shared semantics to @var{x}.
@item
If there is an empty @var{x} LHS rule in @var{g},
@code{Marpa::R2}
assigns the semantics of that empty rule to @var{x}.
@item
If none of the previous guidelines apply,
@code{Marpa::R2} reports an error.
@end itemize

@node Evaluating nulled symbols
@section Evaluating nulled symbols

In theory, the semantics of nulled symbols,
like any semantics,
can be arbitrarily complex.
In practice,
we are dealing with the semantics of the empty string,
which is literally the ``semantics of nothing''.
If what we are dealing with truly is primarily a parsing problem,
we can usually expect that the semantics of nothing will be simple.

The possible subtrees below a nulled symbol can be seen
as a set,
and that set is a constant that depends on the grammar.
Since the input corresponding to the nulled symbol
is also a constant (the empty string),
the semantics of a nulled symbol will also be constant,
unless one of the following is true:
@itemize
@item The semantics is non-deterministic.
@item The semantics takes into account, not just the input, but its context.
For example, the semantics might depend on parse location,
in which case the nulled symbol instance
of @var{x} at location 5
might mean something different
from an nulled instance of @var{x} at location 50.
@end itemize
Both of these exceptions are unusual.
When they do occur, the upper layer can
implement the semantics of the nulled
symbols with
a function or a closure.

@node Example of nulled symbol
@section Example of nulled symbol

As already stated,
Marpa prunes every null subtree back to its topmost
null symbol.
Here is an example grammar, with @var{S} as the start
symbol.

@verbatim
        S ::= L R
        L ::= A B X
        L ::=
        R ::= A B Y
        R ::=
        A ::=
        B ::=
        X ::=
        X ::= "x"
        Y ::=
        Y ::= "y"
@end verbatim

If we let the input be @samp{x},
we can write the unpruned parse tree
in preorder (depth-first), indenting children
below their parents, like this:

@verbatim

        0: Visible Rule: S := L R
             1: Visible Rule L := A B X
                 1.1: Nulled Symbol A
                 1.2: Nulled Symbol B
                 1.3: Token, Value is "x"
             2: Nulled Rule, Rule R := A B Y
                 2.1: Nulled Symbol A
                 2.2: Nulled Symbol B
                 2.3: Nulled Symbol Y

@end verbatim

In this example, five symbols and a rule are nulled.
The nulled rule and three of the nulled symbols
are in a nulled subtree: 2, 2.1, 2.2 and 2.3.
Marpa prunes every null subtree back to its topmost symbol,
which in this case is the LHS of the rule numbered 2.
The pruned tree looks like this:

@verbatim

         0: Visible Rule: S := L R
              1: Visible Rule L := A B X
                  1.1: Nulled Symbol A
                  1.2: Nulled Symbol B
                  1.3: Token, Value is "x"
              2: LHS of Nulled Rule, Symbol R

@end verbatim

Nulled nodes 1.1, 1.2 and 2 were all kept, because they are topmost in their
nulled subtree.
All the other nulled nodes were discarded.

@node Duplicate nulled nodes
@section Duplicate nulled nodes

A non-nulled node can never appear twice in the same tree.
But duplicate nulled nodes in the same tree are quite possible.
The start and end locations of a nulled node are the same,
and other nodes can share the same start and end locations,
so location information does not necessarily made a nulled node
unique.
Since a nulled node also always has no children,
if two nulled nodes at the same location differ,
they must differ in the symbol.

It is quite possible in a grammar to allow sequences of the
same nulled symbol.
All the nodes in this sequence will be equal to each other.
These nodes represent multiple nulled symbol instances.
The context (specifically, the position of the nulled node in the tree)
is required to distinguish these instances.

Libmarpa could distinguish nulled nodes by including a ``instance number''
in the node and,
from a set-theoretic point of view,
this would be more appropriate.
But, in the implementation, the context of a node is always
available, and allowing for an ``instance number'' with each node
would consume a considerable amount of space.

@node Failure
@chapter Failure

As a reminder,
no language in this chapter
(or, for that matter, in this document)
should be read as providing,
or suggesting the existence of,
a warranty.
@xref{License}.

@node Libmarpa's approach to failure
@section Libmarpa's approach to failure

Libmarpa is a C language library,
and inherits the traditional C language approach to
avoiding and handling application programming errors.
The burden this C tradition
puts on the application programmer
might strike readers unfamiliar with that tradition
as appallingly large.

But in the early 1970's, when the C language first stabilized,
the alternative,
and the consensus choice for its target applications,
was assembly language.
In that context, C was radical in its willingness to
incur a price in efficiency in order to protect programmers
from themselves.
C was considered to take a excessively ``hand holding''
approach which very much flew in the face of consensus.

The decades have made a large difference in the trade-offs,
and the consensus about the degree to which even a
low-level language should protect the user has changed.
It seems inevitable that C will be replaced as the low-level
language of choice, by a language that places
fewer burdens on the programmer,
and more on the machine.
The question seems to be not whether C will be dethroned
as the ``go to'' language for low-level progamming,
but when, and by which alternative.

Modern hardware makes many simple checks essentially cost-free,
and Libmarpa's efforts to protect the application programmer go well
beyond what
would have been considered best practice in the past.
But it remains a C language library.
The Libmarpa application programmer must be prepared to exercise
the high degree of carefulness traditionally required for C language programming.
Libmarpa
places the burden of avoiding irrecoverable failures,
and of handling recoverable failures,
largely on the application programmer.

@node User non-conformity to specified behavior
@section User non-conformity to specified behavior

This document specifies many behaviors
for Libmarpa application programs to follow,
such as the nature of the arguments to each method.
The C language and the application environment impose
many more behaviors,
such as proper memory management.
When a non-conformity to specified behavior is unintentional
and problematic,
it is frequently called a ``bug''.
Even the most carefully programmed Libmarpa application may sometimes
contain a ``bug''.
In addition, some specified behaviors are explicitly stated as characterizing
a primary branch of the processing,
rather than made mandatory for all successful processing.
Non-conformity to non-mandatory behaviors can be efficiently recoverable,
and is often intentional.

This chapter describes how
non-conformity to specified behavior
by a Libmarpa application
is handled by Libmarpa.
Non-conformity to specified behavior
by a Libmarpa application
is also called, for the purposes of this document,
a
@dfindex Libmarpa application programming failure
@dfindex failure, Libmarpa application programming
@dfindex failure
@dfn{Libmarpa application programming failure}.
In contexts where no ambiguity arises,
@dfn{Libmarpa application programming failure}
will
usually be abbreviated to
@dfn{failure}.

@dfindex Libmarpa application programming success
@dfindex success, Libmarpa application programming
@dfindex success
@dfn{Libmarpa application programming success}
in a context
is defined as the absence of unrecovered failure in that context.
When no ambiguity arises,
@dfn{Libmarpa application programming success}
is almost
always abbreviated to
@dfn{success}.
For example, the success of an application means the application
ran without any irrecoverable failures,
and that it recovered from all the recoverable failures that were detected.

@node Classifying failure
@section Classifying failure

A Libmarpa application programming failure,
unless stated otherwise,
is an irrecoverable failure.
Once an irrecoverable failure has occurred,
the further behavior of the program is undefined.
Nonetheless, we specify,
and Libmarpa attempts,
diagnostics behaviors
(@pxref{Application and diagnostic behavior})
in an effort to handle irrecoverable failures as
smoothly as possible.

A Libmarpa application programming failure
is not recoverable,
unless this document states otherwise.

@c So far all recoverable failures are trivially recoverable,
@c Wait and set and determine what to do with the following
@c
@c Every recoverable failure has
@c @dfindex recovery handling
@c @dfn{recovery handling}
@c associated with it.
@c The recovery handling is the processing necessary
@c for the application to recover from a recoverable failure.
@c For more on handling recoverable failures,
@c see below
@c (@ref{Recoverable hard failure} and @ref{Soft failure}).
@c
@c The recovery handling is
@c @dfindex recovery handling, trivial
@c @dfindex trivial recovery handling
@c @dfn{trivial}
@c if
@c the application does not have to do anything
@c in order to recover from the recoverable failure.
@c If the recovery handling of a recoverable failure is trivial,
@c we say that the failure is
@c trivially recoverable.
@c A
@c @dfindex trivially recoverable failure
@c @dfindex failure, trivially recoverable
@c @dfn{trivially recoverable failure}
@c is recovered from
@c immediately after it occurs.
@c Put another way, the application programmer
@c may consider a recoverable error as an advisory,
@c and proceed immediately with normal processing.

A failure is called a
@dfindex hard failure
@dfindex failure, hard
@dfn{hard failure}
if it has an error code
associated with it.
A recoverable failure is called a
@dfindex soft failure
@dfindex failure, soft
@dfn{soft failure}
if it has no associated error code.
(For more on error codes, see @ref{Error codes}.)

All failures fall into one of five types.
In order of severity, these are
@itemize
@item @strong{memory allocation failures},
@item @strong{undetected failures},
@item @strong{irrecoverable hard failures},
@item @strong{partially recoverable hard failures},
@item @strong{fully recoverable hard failures}, and
@item @strong{soft failures}.
@end itemize

@node Memory allocation failure
@section Memory allocation failure

Failure to allocate memory is the most irrecoverable of irrecoverable
errors.
On
@dfindex memory allocation failure
@dfindex failure, memory allocation
@dfn{memory allocation failure},
as with all irrecoverable failures,
Libmarpa's behavior is undefined.
Libmarpa attempts to terminate the current program abnormally by calling @code{abort()},
but a component of many modern operating systems is
an out-of-memory (OOM) killer,
which takes the decision out of the hands
of both Libmarpa and the user.
@xref{Out-of-memory handling}.

Memory allocation failure is the only case in which
the decision to terminate the program is made for
the user.
In all other cases,
Libmarpa leaves the decision to terminate the program,
whether normally or abnormally,
up to the application programmer.

Memory allocation failure does not have an error code.
As a pedantic matter, memory allocation failure
is neither a hard or a soft failure.

@node Undetected failure
@section Undetected failure

An
@dfindex undetected failure
@dfindex failure, undetected
@dfn{undetected failure} is a failure that the Libmarpa
library does not detect.
Many failures are impossible or impractical
for a C library to detect.
Two examples of failure that the Libmarpa methods do not detect
are writes outside the bounds of allocated memory,
and use of memory after it has been freed.
C is not strongly typed, and arguments
of Libmarpa routines undergo only a few simple tests,
tests which are inadequate to detect many of the potential problems.

By undetected failure we emphasize that we mean failures undetected
@strong{by the Libmarpa methods}.
In the examples just given,
there exist tools that can help the programmer
detect memory errors
and other tools exist
to check the sanity of method arguments.

This document points out some of the potentially undetected problems,
when doing so seems more helpful than tedious.
But any attempt to list all the undetected problems would be too large
and unwieldy to be useful.

Undetected failure is always irrecoverable.
An undetected failure
is neither a hard or a soft failure.

@node Irrecoverable hard failure
@section Irrecoverable hard failure

An
@dfindex irrecoverable hard failure
@dfindex hard failure, irrecoverable
@dfindex failure, irrecoverable hard
@dfn{irrecoverable hard failure}
is
an irrecoverable Libmarpa application programming failure that has an
error code associated with it.
Libmarpa attempts to behave as predictably as possible
in the face of a hard failure,
but once an irrecoverable failure occurs,
the behavior of a Libmarpa application is undefined.

In the event of an irrecoverable failure,
there are no application behaviors.
The diagnostic behavior for a hard failure is as described
for the method that detects the hard failure.
At a minimum, this diagnostic behavior will be returning from
the method that detects the hard failure with the return
value specified for hard failure,
and setting the error code as specified for hard failure.

@node Partially recoverable hard failure
@section Partially recoverable hard failure

A
@dfindex partially recoverable hard failure
@dfindex hard failure, partially recoverable
@dfindex failure, partially recoverable hard
@dfn{partially recoverable hard failure}
is
a recoverable Libmarpa application programming failure
@itemize
@item that has an error code associated with it; and
@item after which some, but not all, of the
    application behaviors remain available to the programmer.
@end itemize
For every partially recoverable hard failure,
this document specifies the application behaviors that remain
available after it occurs.
The most common kind of
partially recoverable hard failure is a
library-recoverable hard failure.
For an example of
partially recoverable hard failure,
@pxref{Library-recoverable hard failure}.

@node Library-recoverable hard failure
@section Library-recoverable hard failure

A
@dfindex library-recoverable hard failure
@dfindex hard failure, library-recoverable
@dfindex failure, library-recoverable hard
@dfn{library-recoverable hard failure}
is a type of partially recoverable hard failure.
Loosely described, it is a hard failure that
allows the programmer to continue to use many
of the Libmarpa methods in the library,
but that disallows certain methods on  some objects.

To state the restrictions of application behaviors
more precisely, let
the ``failure grammar'' be the base grammar
of the method that detected the library-recoverable hard failure.
After a library-recoverable hard failure,
the following behaviors are no longer application
behaviors:
@itemize
@item Libmarpa mutator and constructor method calls where the base grammar is the
  failure grammar.
@end itemize
Recall that any use of a behavior that is not an application
behavior is an irrecoverable failure.

The application behaviors
remaining after a library-recoverable hard failure
are the following:
@itemize
@item All non-Libmarpa interfaces,
including calls to libraries
in the application and in the application environment.
@item All Libmarpa static method calls.
@item All Libmarpa accessor and destructor method calls.
@item All Libmarpa mutator and constructor method calls
whose base grammar is not the failure grammar.
@end itemize

Note that Libmarpa destructors remain available after
a library recoverable failure.
An application will often want to destroy all Libmarpa objects
whose base grammar is the failure grammar,
in order to clear memory of problematic objects.

An example of a library-recoverable hard failure is
the @code{MARPA_ERR_COUNTED_NULLABLE} error
in the @code{marpa_g_precompute} method.
@xref{marpa_g_precompute, marpa_g_precompute()}.

@node Ancestry-recoverable hard failure
@section Ancestry-recoverable hard failure

An
@dfindex ancestry-recoverable hard failure
@dfindex hard failure, ancestry-recoverable
@dfindex failure, ancestry-recoverable hard
@dfn{ancestry-recoverable hard failure}
is a type of partially recoverable hard failure.
An ancestry-recoverable failure allows a superset of the application behaviors
allowed by a library-recoverable hard failure.
More precisely, let
the ``failure object'' be the object that detected
the ancestry-recoverable hard failure.
After an ancestry-recoverable hard failure,
the following behaviors are no longer application
behaviors:
@itemize
@item Libmarpa mutator and constructor method calls where the object is the
  failure object, or one of its descendants.
@end itemize
Recall that any use of a behavior that is not an application
behavior is an irrecoverable failure.

The application behaviors
remaining after a ancestry-recoverable hard failure
are the following:
@itemize
@item All non-Libmarpa interfaces,
including calls to libraries
in the application and in the application environment.
@item All Libmarpa static method calls.
@item All Libmarpa accessor and destructor method calls.
@item All Libmarpa mutator and constructor method calls
for time objects that are not the failure object,
or one of its descendants.
@end itemize

Note that all Libmarpa destructors remain available after
an ancestry-recoverable failure.
An application will often want to destroy the failure object
and all of its descendants,
in order to clear memory of problematic objects.

As an example,
users calling @code{marpa_g_precompute()}
will often want to treat a @code{MARPA_EVENT_EARLEY_ITEM_THRESHOLD} event
as if it were an ancestry-recoverable hard failure.
@xref{marpa_g_precompute, marpa_g_precompute()}.

Library-recoverable failure is a special case of ancestry-recoverable
failure.
When the failure object is a grammar,
ancestry-recoverable failure is synonymous with
library-recoverable failure.

@node Fully recoverable hard failure
@section Fully recoverable hard failure

A
@dfindex fully recoverable hard failure
@dfindex hard failure, fully recoverable
@dfindex failure, fully recoverable hard
@dfn{fully recoverable hard failure}
is
a recoverable Libmarpa application programming failure
@itemize
@item that has an error code associated with it; and
@item after which all of the
    application behaviors remain available to the programmer.
@end itemize
One example of a fully recoverable hard failure is
the error code @code{MARPA_ERR_UNEXPECTED_TOKEN_ID}.
The ``Ruby Slippers'' parsing technique
(@pxref{Ruby Slippers}),
which has seen extensive usage,
is based
on Libmarpa's ability to recover from
a @code{MARPA_ERR_UNEXPECTED_TOKEN_ID} error
fully and efficiently,

@node Soft failure
@section Soft failure

A
@dfindex soft failure
@dfindex failure, soft
@dfn{soft failure}
is
a recoverable Libmarpa application programming failure that has no
error code associated with it.
Hard errors are assigned error codes in order to tell them apart.
Error codes are not necessary or useful for soft errors,
because there is at most one type of soft failure per Libmarpa method.

@dfn{Soft failures}
are so called,
because they are the least severe kind of failure.
The most severe failures are ``bugs'' ---
unintended, and a symptom of a problem.
Soft failures, on the other hand, are a frequent occurrence
in normal, successful, processing.
In the phrase ``soft failure'', the word ``failure'' is used
in the same sense that its cognate ``fail'' is used
when we say that a loop terminates when it ``fails'' its
loop condition.
That ''failure'' is the failure of a condition necessary to continue on
a main branch of processing, and a signal to proceed on another branch.

It is expected that Libmarpa applications will be designed
such that successful execution
requires handling soft failures.
In fact, a non-trivial Libmarpa application can hardly be designed
except on that basis.

@node Error codes
@section Error codes

As stated, every hard failure has an associated error code.
Full descriptions of the error codes
that are returned by the external methods
are given in their own section
(@ref{External error codes}).

How the error code is accessed depends on the method
that detects the hard failure associated with that error code.
Methods for time objects always set the error code in the base grammar,
from which it may be accessed using the error methods described below.
@xref{Error methods}.
If a method has no base grammar,
the description of that method
will state how to access the error code for a hard failure
detected by that method.

Since the error of a time object is set in the base grammar,
it follows that every object with the same base grammar
has the same error code.
Objects with different base grammars may have different error codes.

While error codes are properties of a base grammar,
irrecoverability is application-wide.
That is, whenever any irrecoverable failure occurs, the entire
application is irrecoverable.
Once an application becomes irrecoverable,
those Libmarpa objects with error codes for recoverable errors
are still subject to the general irrecoverability.

@node Introduction to the method descriptions
@chapter Introduction to the method descriptions

The following chapters describe Libmarpa's methods
in detail.

@node About the overviews
@section  About the overviews

The method descriptions are grouped into chapters and sections.
Each such group of methods descriptions begins, optionally, with an overview.
These overviews, again optionally, end with a ``cheat sheet''.
The ``cheat sheets'' name the
most important Libmarpa methods in that chapter
or section,
in the order in which they are typically used,
and very briefly describe their purpose.

The overviews sometimes speak of
an ``archetypal'' application.
The
@dfindex archetypal Libmarpa application
@dfindex Libmarpa application, archetypal
@dfn{archetypal Libmarpa application}
implements a complete logic flow,
starting with the creation of a grammar,
and proceeding all the way
to the return of the final result from a value object.
In the archetypal Libmarpa application,
the grammar, input and semantics are
all small but non-trivial.

@node Naming conventions
@section Naming conventions

Methods in Libmarpa follow a strict naming convention.
All methods have a name beginning with
@code{marpa_},
if they are part of the
external interface.
If an external method is not a static method,
its name is prefixed with one of
@code{marpa_c_},
@code{marpa_g_},
@code{marpa_r_},
@code{marpa_b_},
@code{marpa_o_},
@code{marpa_t_} or
@code{marpa_v_},
where the single letter between underscores
is one of the Libmarpa major class abbreviations.
The letter indicates which class
the method belongs to.

Methods that are exported,
but that are part of
the internal interface,
begin with @code{_marpa_}.
Methods that are part of the internal interface
(often called ``internal methods'')
are subject to change and are intended for use
only by Libmarpa's developers.

Libmarpa reserves the
@code{marpa_}
and @code{_marpa_} prefixes for itself,
with all their capitalization variants.
All Libmarpa names visible outside the package
will begin with a capitalization variant
of one of these two prefixes.

@node Return values
@section Return values

Some general conventions for return values are worth
mentioning:
@itemize
@item For methods that return an integer,
a return value of @minus{}1
usually indicates soft method failure.
@item For methods that return an integer,
a return value of @minus{}2
usually indicates hard method failure.
@item For methods that return an integer,
a return value greater of zero or more usually indicates method success.
@item If a method returns an pointer value,
@code{NULL} usually indicates method failure.
Any other result usually indicates method success.
@end itemize

The words ``success'' and ``failure'' are heavily overloaded
in these documents.
But in contexts where our meaning is clear we will usually
abbreviate ``method success'' and ``method failure'' to
``success'' and ``failure'', respectively.

While these general conventions are a memory aid,
there are exceptions,
and the programmer must look at the return value summary
in the description of every method they use.

As one example of an exception,
for certain methods,
a return value of @minus{}2 is ambiguous:
@minus{}2 can be both a valid return value
for method success, and a potential indication of hard method failure.
An example of a method where @minus{}2 is ambiguous is
@code{marpa_g_rule_rank_set()}.
@xref{marpa_g_rule_rank_set}.
In cases like @code{marpa_g_rule_rank_set()},
the programmer must distinguish the two return statuses
based on the error code.

Whenever a method departs from the general return value conventions,
the departure will be detailed in the description of that method.
Any departure by a method from the general return value conventions
will always be indicated
in the return value summary for that method.

@node How to read the method descriptions
@section How to read the method descriptions

The method descriptions are written on the assumption
that the reader has the following in mind while reading them:

@itemize
@item Each method description begins with the signature
of its ``topic method''.
@item In the method description, the phrase ``this method''
always refers to the topic method.
@item Whenever ``this method'' is the subject of a sentence
in the method description, it may be elided,
so that, for example,
@quotation
This method returns 42.
@end quotation
becomes
@quotation
Returns 42.
@end quotation
@item If the return type of a method is not @code{void},
the last paragraph of its method description is a
``return value summary''.
The return value summary
starts with the label ``@strong{Return Value}''.
@item Every method returns in exactly one of three
statuses: success, hard failure, or soft failure.
@item A return status of hard failure indicates that the method detected
a hard failure.
@item A method may have several kinds of hard failure,
including several kinds of irrecoverable hard failure
and several kinds of recoverable hard failure.
On return, these can be distinguished by their error codes.
@item If a method call hard fails,
its error code is that associated with the hard failure.
Unless stated otherwise in the return value summary,
the error code is set in the base
grammar of the method call, and may be accessed
with the methods described below.
@xref{Error methods}.
@item If a method allows a recoverable hard failure, this is explicitly stated
in its return value summary,
along with the associated error code.
The method description will state
the circumstances under which the recoverable hard failure occurs,
and what the application must do to recover.
@item A return status of soft failure indicates that the method detected
a soft failure.
@item Every method has at most one kind of soft failure.
@item If a method allows a soft failure, this is explicitly stated
in its return value summary,
and the method description will state
the circumstances under which the soft failure occurs,
and what the application must do to recover.
@item If a method call soft fails, the value of the error code is
unspecified.
@item If a method call succeeds, the value of the error code is
unspecified.
@item A return status of success indicates that the method did not detect
any failures.
@item If both a hard failure and a soft failure occur,
the return status will be hard failure.
@item If both a recoverable hard failure and
an irrecoverable hard failure occur,
the error code will be for an irrecoverable hard failure.
@item The behaviors specified for success and soft failure
are application behaviors.
@item The behaviors specified for hard failures
are diagnostic behaviors if an irrecoverable failure
occurred,
and application behaviors otherwise.
@end itemize

@node Static methods
@chapter Static methods

@anchor{marpa_check_version}
@deftypefn {Accessor function} @
Marpa_Error_Code marpa_check_version ( @
    int @var{required_major}, @
    int @var{required_minor}, @
    int @var{required_micro} @
    )

Checks that the Marpa library in use is compatible with the
given version. Generally, the application programmer will pass in the constants
@code{MARPA_MAJOR_VERSION},
@code{MARPA_MINOR_VERSION}, and
@code{MARPA_MICRO_VERSION}
as the three arguments,
to check that their application was compiled with headers
that match the version of Libmarpa that they
are using.

If @var{required_major}.@var{required_minor}.@var{required_micro}
is an exact match with the version of Libmarpa,
the method succeeds.
The version of Libmarpa described in this manual is @value{VERSION}.
Otherwise the return status is an irrecoverable
hard failure.

@strong{Return value}: On success, @code{MARPA_ERR_NONE}.
On hard failure, the error code.

@end deftypefn

@anchor{marpa_version}
@deftypefn {Accessor function} @
Marpa_Error_Code marpa_version ( @
    int* version)

Writes the version number in @var{version}.
It is an undetected irrecoverable hard failure
if @var{version} does not have room for three @code{int}'s.

@strong{Return value}: Always succeeds.
The return value is unspecified.

@end deftypefn

@node Configuration methods
@chapter Configuration methods

The configuration object is intended for future extensions.
Currently, the only function of the @code{Marpa_Config}
class is to give
@code{marpa_g_new()}
a place to put its error code.

@code{Marpa_Config} is Libmarpa's only ``major''
class which is not a time class.
There is no constructor or destructor, although
@code{Marpa_Config} objects @strong{do} need to be initialized
before use.
Aside from its own accessor,
@code{Marpa_Config} objects are only used by
@code{marpa_g_new()}
and no reference to their location is kept
in any of Libmarpa's time objects.
The intent is that it be convenient
to have @code{Marpa_Config} objects
in memory that might be deallocated
soon after
@code{marpa_g_new()}
returns.
For example, they could be put on the stack.

@anchor{marpa_c_init}
@deftypefn {Mutator function} @
int marpa_c_init ( @
  Marpa_Config* @var{config})

Initialize the @var{config} information to ``safe'' default
values.
An irrecoverable error will result
if an uninitialized
configuration is used to create a grammar.

@strong{Return value}: Always succeeds.  The return value is unspecified.

@end deftypefn

@anchor{marpa_c_error}
@deftypefn {Accessor function} @
Marpa_Error_Code marpa_c_error ( @
  Marpa_Config* @var{config}, const char** @var{p_error_string} )

Error codes are usually kept in the base grammar,
which leaves
@code{marpa_g_new()}
no place to put
its error code on failure.
Objects of
the @code{Marpa_Config} class provide such a place.
@var{p_error_string} is reserved for use by
the internals.
Applications should set it to @code{NULL}.

@strong{Return value}: The error code in @var{config}.
Always succeeds, so that
@code{marpa_c_error()}
never requires an error code
for itself.

@end deftypefn

@node Grammar methods
@chapter Grammar methods
@cindex grammars

@node Grammar overview
@section Overview

An archetypal application has a grammar.
To create a grammar, use the
@code{marpa_g_new()}
method.
When a grammar is no longer in use, its memory can be freed
using the
@code{marpa_g_unref()}
method.

To be precomputed,
a grammar must have one or more symbols.
To create symbols, use the
@code{marpa_g_symbol_new()}
method.

To be precomputed,
a grammar must have one or more rules.
To create rules, use the
@code{marpa_g_rule_new()}
and
@code{marpa_g_sequence_new()}
methods.

To be precomputed,
a grammar must have exactly one start symbol.
To mark a symbol as the start symbol,
use the
@code{marpa_g_start_symbol_set()}
method.

Before parsing with a grammar, it must be precomputed.
To precompute a grammar,
use the
@code{marpa_g_precompute()}
method.

@node Grammar constructor
@section Creating a new grammar
@cindex grammar constructor

@anchor{marpa_g_new}
@deftypefn {Constructor function} @
Marpa_Grammar marpa_g_new ( @
    Marpa_Config* @var{configuration} )

Creates a new grammar time object.
The returned grammar object is not yet precomputed,
and will have no symbols and rules.
Its reference count will be 1.

Unless the application calls
@code{marpa_c_error()},
Libmarpa will not reference the location
pointed to by the @var{configuration}
argument after
@code{marpa_g_new()}
returns.
(@xref{marpa_c_error,marpa_c_error()}.)
The @var{configuration} argument may be @code{NULL},
but if it is,
there will be no way to determine
the error code on failure.

@strong{Return value}: On success, the grammar object.
On hard failure, @code{NULL}.
Also on hard failure,
if the @var{configuration} argument is not @code{NULL},
the error code is set in @var{configuration}.
The error code may be accessed using
@code{marpa_c_error()}.

@end deftypefn

@anchor{marpa_g_force_valued}
@deftypefn {Mutator function} @
int marpa_g_force_valued ( @
    Marpa_Grammar @var{g} )

It is recommended that
this call be made immediately after the
grammar constructor.
It turns off a deprecated feature.

The
@code{marpa_g_force_valued()} method
forces all the
symbols in a grammar to be ``valued''.
The parse cares about the value of the symbol iff
the symbol is ``valued''.
In the past, symbols were allowed to be ``unvalued''
in the hope of gaining efficiencies at evaluation time.
Use of unvalued symbols is now deprecated,
because current thinking is that the gains do not repay the extra
complexity.

@strong{Return value}: On success, a non-negative integer, whose value is otherwise unspecified.
On failure, -2.
@end deftypefn

@node Grammar reference counting
@section Tracking the reference count of the grammar
@cindex grammar destructor
@cindex grammar reference
@cindex grammar reference count

@anchor{marpa_g_ref}
@deftypefn {Mutator function} @
Marpa_Grammar marpa_g_ref (Marpa_Grammar @var{g})

Increases the reference count of @var{g} by 1.
Not needed by most applications.

@strong{Return value}:
On success, @var{g}.
On hard failure, @code{NULL}.

@end deftypefn

@anchor{marpa_g_unref}
@deftypefn {Destructor function} @
void marpa_g_unref (Marpa_Grammar @var{g})

Decreases the reference count by 1,
destroying @var{g} once the reference count reaches
zero.

@end deftypefn

@node Symbol methods
@section Symbol methods

@anchor{marpa_g_start_symbol}
@deftypefn {Accessor function} @
Marpa_Symbol_ID marpa_g_start_symbol (Marpa_Grammar @var{g})

When successful, returns the ID of the start symbol.
Soft fails, if there is no start symbol.
The start symbol is set by the
@code{marpa_g_start_symbol_set()}
call.

@strong{Return value}:
On success, the ID of the start symbol,
which is always a non-negative number.
On soft failure, @minus{}1.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_g_start_symbol_set}
@deftypefn {Mutator function} @
Marpa_Symbol_ID marpa_g_start_symbol_set ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id})

When successful,
sets the start symbol of grammar @var{g} to symbol @var{sym_id}.
Soft fails if @var{sym_id} is well-formed (a non-negative integer),
but a symbol with that ID does not exist.

@strong{Return value}: On success, @var{sym_id},
which will always be a non-negative number.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_highest_symbol_id}
@deftypefn {Accessor function} @
int marpa_g_highest_symbol_id (Marpa_Grammar @var{g})

@strong{Return value}: On success, the numerically largest symbol ID
of @var{g}.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_g_symbol_is_accessible}
@deftypefn {Accessor function} @
int marpa_g_symbol_is_accessible (Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id})

Soft fails if @var{sym_id} is well-formed (a non-negative integer),
but a symbol with that ID does not exist.
A common hard failure is calling this method with
a grammar that is not precomputed.

@strong{Return value}: On success, 1 if symbol @var{sym_id} is accessible, 0 if not.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_symbol_is_nullable}
@deftypefn {Accessor function} @
int marpa_g_symbol_is_nullable ( @
  Marpa_Grammar g, Marpa_Symbol_ID sym_id)

Soft fails if @var{sym_id} is well-formed (a non-negative integer),
but a symbol with that ID does not exist.
A common hard failure is calling this method with
a grammar that is not precomputed.

@strong{Return value}: On success, 1 if symbol @var{sym_id} is nullable, 0 if not.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_symbol_is_nulling}
@deftypefn {Accessor function} @
int marpa_g_symbol_is_nulling (Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id})

Soft fails if @var{sym_id} is well-formed (a non-negative integer),
but a symbol with that ID does not exist.
A common hard failure is calling this method with
a grammar that is not precomputed.

@strong{Return value}: On success, 1 if symbol @var{sym_id} is nulling, 0 if not.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_symbol_is_productive}
@deftypefn {Accessor function} @
int marpa_g_symbol_is_productive (Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id})

A symbol is
@dfindex productive symbol
@dfindex symbol, productive
@dfn{productive}
if it can produce a string of terminals.
All nullable symbols are considered productive.
Soft fails if @var{sym_id} is well-formed (a non-negative integer),
but a symbol with that ID does not exist.
A common hard failure is calling this method with
a grammar that is not precomputed.

@strong{Return value}: On success, 1 if symbol @var{sym_id} is productive, 0 if not.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_symbol_is_start}
@deftypefn {Accessor function} @
int marpa_g_symbol_is_start ( Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id})

On success, if @var{sym_id} is the start symbol, returns 1.
On success, if @var{sym_id} is not the start symbol, returns 0.
On success, if no start symbol has been set, returns 0.
is the start symbol.

Soft fails if @var{sym_id} is well-formed (a non-negative integer),
but a symbol with that ID does not exist.

@strong{Return value}:
On success, 1 or 0.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_symbol_is_terminal}
@deftypefn {Accessor function} @
int marpa_g_symbol_is_terminal ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id})

On succcess, returns the ``terminal status'' of a @var{sym_id}.
The terminal status is 1 if @var{sym_id} is a terminal,
0 otherwise.
To be used as an input symbol
in the
@code{marpa_r_alternative()}
method,
a symbol must be a terminal.

Soft fails if @var{sym_id} is well-formed (a non-negative integer),
but a symbol with that ID does not exist.

@strong{Return value}:
On success, 1 or 0.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_symbol_new}
@deftypefn {Mutator function} @
Marpa_Symbol_ID marpa_g_symbol_new (Marpa_Grammar @var{g})

When successful, creates a new symbol in grammar @var{g}.
The symbol ID's are non-negative integers.
Within each grammar, a symbol's ID is unique to that symbol.

Symbols are numbered consecutively, starting at 0.
That is, the first successful call of this method for a grammar returns the symbol
with ID 0.
The @var{n}'th successful call returns the symbol for a grammar
with ID @code{@var{n}@minus{}1}.
This makes it convenient for applications to store additional information
about the symbols in an array.

@strong{Return value}: On success, the ID of the new symbol,
which will be a non-negative integer.
On hard failure, @minus{}2.

@end deftypefn

@node Rule methods
@section Rule methods

@anchor{marpa_g_highest_rule_id}
@deftypefn {Accessor function} @
int marpa_g_highest_rule_id (Marpa_Grammar @var{g})

@strong{Return value}: On success, the numerically largest rule ID
of @var{g}.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_g_rule_is_accessible}
@deftypefn {Accessor function} @
int marpa_g_rule_is_accessible (Marpa_Grammar @var{g}, @
    Marpa_Rule_ID @var{rule_id})

A rule is
@dfindex accessible rule
@dfindex rule, accessible
@dfn{accessible}
if it can be reached from the start symbol.
A rule is accessible if and only if its LHS symbol is accessible.
The start rule is always an accessible rule.

Soft fails if @var{rule_id} is well-formed (a non-negative integer),
but a rule with that ID does not exist.
A common hard failure is calling this method with
a grammar that is not precomputed.

@strong{Return value}: On success 1 or 0:
1 if rule with ID @var{rule_id} is accessible, 0 if not.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_rule_is_nullable}
@deftypefn {Accessor function} @
int marpa_g_rule_is_nullable ( @
  Marpa_Grammar @var{g}, Marpa_Rule_ID @var{ruleid})

A rule is
@dfindex nullable rule
@dfindex rule, nullable
@dfn{nullable}
if it sometimes produces the empty string.
A @strong{nulling} rule is always a @strong{nullable} rule,
but not all @strong{nullable} rules are @strong{nulling} rules.

Soft fails if @var{rule_id} is well-formed (a non-negative integer),
but a rule with that ID does not exist.
A common hard failure is calling this method with
a grammar that is not precomputed.

@strong{Return value}: On success 1 or 0:
1 if the rule with ID @var{rule_id} is nullable, 0 if not.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_rule_is_nulling}
@deftypefn {Accessor function} @
int marpa_g_rule_is_nulling (Marpa_Grammar @var{g}, @
    Marpa_Rule_ID @var{ruleid})

A rule is
@dfindex nulling rule
@dfindex rule, nulling
@dfn{nulling}
if it always produces the empty string.

Soft fails if @var{rule_id} is well-formed (a non-negative integer),
but a rule with that ID does not exist.
A common hard failure is calling this method with
a grammar that is not precomputed.

@strong{Return value}: On success 1 or 0:
1 if the rule with ID @var{rule_id} is nulling, 0 if not.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_rule_is_loop}
@deftypefn {Accessor function} @
int marpa_g_rule_is_loop (Marpa_Grammar @var{g}, @
    Marpa_Rule_ID @var{rule_id})

A rule is a loop rule iff it non-trivially
produces the string of length one
that consists only of its LHS symbol.
The presence of a loop rule indicates that @var{g}
contains a cycle.
Parsing with a grammar that contains a cycle is deprecated.
@code{marpa_g_rule_is_loop} should only be used
for diagnostic purposes,
to allow a user to find the rules which cause the
cycle and to change the grammar to be cycle-free.
@xref{Cycles}.

Soft fails if @var{rule_id} is well-formed (a non-negative integer),
but a rule with that ID does not exist.
A common hard failure is calling this method with
a grammar that is not precomputed.

@strong{Return value}: On success 1 or 0:
1 if the rule with ID @var{rule_id} is a loop rule, 0 if not.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_rule_is_productive}
@deftypefn {Accessor function} @
int marpa_g_rule_is_productive (Marpa_Grammar @var{g}, @
    Marpa_Rule_ID @var{rule_id})

A rule is
@dfindex productive rule
@dfindex rule, productive
@dfn{productive}
if it can produce a string of terminals.
A rule is productive if and only if all the symbols on
its RHS are productive.
The empty string counts as a string of terminals,
so that a nullable rule is always a productive rule.
For that same reason,
an empty rule is considered productive.

Soft fails if @var{rule_id} is well-formed (a non-negative integer),
but a rule with that ID does not exist.
A common hard failure is calling this method with
a grammar that is not precomputed.

@strong{Return value}: On success 1 or 0:
1 if the rule with ID @var{rule_id} is productive, 0 if not.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_rule_length}
@deftypefn {Accessor function} @
int marpa_g_rule_length ( @
    Marpa_Grammar @var{g}, @
    Marpa_Rule_ID @var{rule_id})

The length of a rule is the number of symbols on its RHS.

Soft fails if @var{rule_id} is well-formed (a non-negative integer),
but a rule with that ID does not exist.

@strong{Return value}: On success,
the length of the rule with ID @var{rule_id}.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_rule_lhs}
@deftypefn {Accessor function} @
Marpa_Symbol_ID marpa_g_rule_lhs ( @
    Marpa_Grammar @var{g}, @
    Marpa_Rule_ID @var{rule_id})

Soft fails if @var{rule_id} is well-formed (a non-negative integer),
but a rule with that ID does not exist.

@strong{Return value}: On success, the ID of the LHS
symbol of the rule with ID @var{rule_id}.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_rule_new}
@deftypefn {Mutator function} @
Marpa_Rule_ID marpa_g_rule_new (Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{lhs_id}, @
 Marpa_Symbol_ID *@var{rhs_ids}, @
     int @var{length})

On success, creates a new external BNF rule in grammar @var{g}.
In addition to BNF rules, Marpa also allows sequence rules,
which are created by
the
@code{marpa_g_sequence_new()} method.
@xref{marpa_g_sequence_new,marpa_g_sequence_new()}.
We call
@code{marpa_g_rule_new()} and
@code{marpa_g_sequence_new()}
@dfn{rule creation methods}.

Sequence rules and BNF rules are both rules:
They share the same series of rule IDs,
and are accessed and manipulated by the same methods,
with the only differences being as noted
in the descriptions of those methods.

Each grammar's rule ID's are a consecutive sequence of non-negative integers,
starting at 0.
This is intended to make it convenient for applications to store additional information
about a grammar's rules in an array.
Within each grammar, the following is true:
@itemize
@item A rule's ID is unique to that rule.
@item
The first successful call of a rule creation method returns the rule
with ID 0.
@item
The @var{n}'th successful call of a rule creation method
returns the rule with ID @code{@var{n}@minus{}1}.
@end itemize

The LHS symbol is @var{lhs_id},
and there are @var{length} symbols on the RHS.
The RHS symbols are in an array
pointed to by @var{rhs_ids}.

Possible hard failures, with their error codes, include:
@itemize
@item @code{MARPA_ERR_SEQUENCE_LHS_NOT_UNIQUE}: The LHS symbol is the same
as that of a sequence rule.
@item @code{MARPA_ERR_DUPLICATE_RULE}: The new rule would duplicate another BNF
rule.
Another BNF rule is considered the duplicate of the new one,
if its LHS symbol is the same as symbol @var{lhs_id},
if its length is the same as @var{length},
and if its RHS symbols match one for one those
in the array of symbols @var{rhs_ids}.
@end itemize

@strong{Return value}:  On success, the ID of the new external rule.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_rule_rhs}
@deftypefn {Accessor function} @
Marpa_Symbol_ID marpa_g_rule_rhs ( @
    Marpa_Grammar @var{g}, @
    Marpa_Rule_ID @var{rule_id}, @
    int @var{ix})

When successful, returns the ID of the symbol at index @var{ix}
in the RHS of the rule with ID @var{rule_id}.
The indexing of RHS symbols is zero-based.

Soft fails if @var{rule_id} is well-formed (a non-negative integer),
but a rule with that ID does not exist.

A common hard failure is for @var{ix}
not to be a valid index of the RHS.
This happens if @var{ix}
is less than zero,
or or if @var{ix}  is greater than or equal to the length of
the rule.

@strong{Return value}: On success, a symbol ID,
which is always non-negative.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@node Sequence methods
@section Sequence methods

@anchor{marpa_g_rule_is_proper_separation}
@deftypefn {Accessor function} @
int marpa_g_rule_is_proper_separation ( @
    Marpa_Grammar @var{g}, @
    Marpa_Rule_ID @var{rule_id})

When successful, returns
@itemize
@item 1 if @var{rule_id} is the ID of a sequence rule whose
proper separation flag is set,
@item 0 if @var{rule_id} is the ID of a sequence rule whose
proper separation flag is not set,
@item 0 if @var{rule_id} is the ID of a rule that is not
a sequence rule.
@end itemize
Does not distinguish sequence rules without proper
separation from non-sequence rules.
That is,
does not distinguish an unset proper separation flag
from a
proper separation flag whose value is unspecified
because @var{rule_id} is the ID of a BNF rule.
Applications that want to determine whether
or not a rule is a sequence rule
can use
@code{marpa_g_sequence_min()} to do this.
@xref{marpa_g_sequence_min,marpa_g_sequence_min()}.

Soft fails if @var{rule_id} is well-formed (a non-negative integer),
but a rule with that ID does not exist.

@strong{Return value}:
On success, 1 or 0.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_sequence_min}
@deftypefn {Accessor function} @
int marpa_g_sequence_min ( @
    Marpa_Grammar @var{g}, @
    Marpa_Rule_ID @var{rule_id})

On success, returns the mininum length of a sequence rule.
Soft fails if a rule with ID @var{rule_id} exists,
but is not a sequence rule.
This soft failure can used to test whether
or not a rule is a sequence rule.

Hard fails irrecoverably if
@var{rule_id} is not well-formed (a non-negative number).
Also, hard fails irrecoverably if no rule with ID @var{rule_id} exists,
even when @var{rule_id} is well formed.
Note that,
in its handling of the non-existence of a rule for its rule
argument, this method differs from many of the other grammar
methods.
Grammar methods that take a rule ID argument
more often treat the
non-existence of rule for a well-formed
rule ID as a soft, recoverable, failure.

@strong{Return value}:
On success, the minimum length of the sequence rule
with ID @var{rule_id}, which is always non-negative.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_sequence_new}
@deftypefn {Mutator function} @
Marpa_Rule_ID marpa_g_sequence_new (Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{lhs_id}, @
 Marpa_Symbol_ID @var{rhs_id}, @
     Marpa_Symbol_ID @var{separator_id}, @
    int @var{min}, @
 int @var{flags} )

When successful,
adds a new sequence rule to grammar @var{g},
and returns its ID.
In addition to sequence rules, Marpa also allows BNF rules,
which are created by
the
@code{marpa_g_rule_new()} method.
@xref{marpa_g_rule_new,marpa_g_rule_new()}.
We call
@code{marpa_g_rule_new()} and
@code{marpa_g_sequence_new()}
@dfn{rule creation methods}.
For details on the use of sequence rules,
@pxref{Sequence rules}.

Sequence rules and BNF rules are both rules:
They share the same series of rule IDs,
and are accessed and manipulated by the same methods,
with the only differences being as noted
in the descriptions of those methods.

Each grammar's rule ID's are a consecutive sequence of non-negative integers,
starting at 0.
This is intended to make it convenient for applications to store additional information
about a grammar's rules in an array.
Within each grammar, the following is true:
@itemize
@item A rule's ID is unique to that rule.
@item
The first successful call of a rule creation method returns the rule
with ID 0.
@item
The @var{n}'th successful call of a rule creation method
returns the rule with ID @code{@var{n}@minus{}1}.
@end itemize

The LHS of the sequence is @var{lhs_id},
and the item to be repeated on the RHS of the sequence is @var{rhs_id}.
The sequence must be repeated at least @var{min} times,
where @var{min} is 0 or 1.
The sequence RHS, or item,
is restricted to a single symbol,
and that symbol cannot be nullable.
If @var{separator_id} is non-negative,
it is a separator symbol,
which cannot be nullable.
@var{flags} is a bit vector.
Use of any other bit except @code{MARPA_PROPER_SEPARATION}
results in undefined behavior.

By default, a sequence rule recognizes a trailing separator.
If @code{flags & MARPA_PROPER_SEPARATION} is non-zero,
separation is ``proper''.
Proper separation means the the rule does
not recognize a trailing separator.
Specifying proper separation has no effect unless
a separator symbol has also been specified.

The LHS symbol cannot be the LHS of any other rule,
whether a BNF rule or a sequence rule.
On an attempt to create an sequence rule with a duplicate
LHS,
this method hard fails,
with an error code of
@code{MARPA_ERR_SEQUENCE_LHS_NOT_UNIQUE}.

@strong{Return value}:  On success, the ID of the newly added
sequence rule, which is always non-negative.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_sequence_separator}
@deftypefn {Accessor function} @
int marpa_g_sequence_separator ( @
    Marpa_Grammar @var{g}, @
    Marpa_Rule_ID @var{rule_id})

On success, returns the symbol ID of the separator
of the sequence rule with ID @var{rule_id}.
Soft fails if there is no separator.
The causes of hard failure include
@var{rule_id} not being well-formed;
@var{rule_id} not being the ID of a rule that exists; and
@var{rule_id} not being the ID a sequence rule.

@strong{Return value}:
On success, a symbol ID, which is always non-negative.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_symbol_is_counted}
@deftypefn {Accessor function} @
int marpa_g_symbol_is_counted (Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id})

On success, returns a boolean whose value is
1 iff the symbol with
ID @var{sym_id} is counted.
A symbol is
@dfindex counted symbol
@dfindex symbol, counted
@dfn{counted}
iff
@itemize
@item it appears on the RHS of a sequence rule, or
@item it is used as the separator symbol of a sequence rule.
@end itemize

Soft fails iff @var{sym_id} is well-formed (a non-negative integer),
but a symbol with that ID does not exist.

@strong{Return value}:
On success, a boolean.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@node Rank methods
@section Rank methods

@anchor{marpa_g_default_rank}
@deftypefn {Accessor function} @
Marpa_Rank marpa_g_default_rank ( @
    Marpa_Grammar @var{g})

On success, returns the default rank of the grammar @var{g}.
For more about the default rank of a grammar,
@pxref{marpa_g_default_rank_set, marpa_g_default_rank_set()}.

@strong{Return value}: On success, returns
the default rank of the grammar,
and sets the error code to
@code{MARPA_ERR_NONE}.
On failure, returns @minus{}2,
and sets the error code to an appropriate
value, which will never be
@code{MARPA_ERR_NONE}.
Note that when
the default rank of the grammar is @minus{}2,
the error code is the only way to distinguish
success from failure.
The error code can be determined by using the
@code{marpa_g_error()}
call.
@xref{marpa_g_error,marpa_g_error()}.

@end deftypefn

@anchor{marpa_g_default_rank_set}
@deftypefn {Mutator function} @
Marpa_Rank marpa_g_default_rank_set ( @
    Marpa_Grammar @var{g}, @
    Marpa_Rank @var{rank})

On success, sets the default rank of the grammar @var{g} to @var{rank}.
When a grammar is created, the default rank is 0.
When rules and symbols are created, their rank is
the default rank of the grammar.

Changing the grammar's default rank does not affect
those
rules and symbols already created,
only those that will be created.
This means that
the grammar's default rank can be used to,
in effect, assign ranks to groups of rules and symbols.
Applications may find this behavior useful.

@strong{Return value}: On success, returns @var{rank}
and sets the error code to
@code{MARPA_ERR_NONE}.
On failure, returns @minus{}2,
and sets the error code to an appropriate
value, which will never be
@code{MARPA_ERR_NONE}.
Note that when the @var{rank} is @minus{}2,
the error code is the only way to distinguish
success from failure.
The error code can be determined by using the
@code{marpa_g_error()}
call.
@xref{marpa_g_error,marpa_g_error()}.

@end deftypefn

@anchor{marpa_g_symbol_rank}
@deftypefn {Accessor function} @
Marpa_Rank marpa_g_symbol_rank ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id})

When successful, returns
the rank of the symbol with ID @var{sym_id}.
When a symbol is created, its rank
is initialized to the default rank of the grammar.

@strong{Return value}:
On success, returns a symbol rank,
and sets the error code to
@code{MARPA_ERR_NONE}.
On hard failure, returns @minus{}2,
and sets the error code to an appropriate
value, which will never be
@code{MARPA_ERR_NONE}.
Note that @minus{}2 is a valid symbol rank,
so that when @minus{}2 is returned,
the error code is the only way to distinguish
success from failure.
The error code can be determined using
@code{marpa_g_error()}.
@xref{marpa_g_error,marpa_g_error()}.

@end deftypefn

@anchor{marpa_g_symbol_rank_set}
@deftypefn {Mutator function} @
Marpa_Rank marpa_g_symbol_rank_set ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id}, @
    Marpa_Rank @var{rank})

When successful,
sets
the rank of the symbol with ID @var{sym_id} to @var{rank}.
When a symbol is created, its rank
is initialized to the default rank of the grammar.

@strong{Return value}:
On success, returns @var{rank},
and sets the error code to
@code{MARPA_ERR_NONE}.
On hard failure, returns @minus{}2,
and sets the error code to an appropriate
value, which will never be
@code{MARPA_ERR_NONE}.
Note that @var{rank} may be @minus{}2,
and in this case
the error code is the only way to distinguish
success from failure.
The error code can be determined using
@code{marpa_g_error()}.
@xref{marpa_g_error,marpa_g_error()}.
@end deftypefn

@anchor{marpa_g_rule_rank}
@deftypefn {Accessor function} @
Marpa_Rank marpa_g_rule_rank ( @
    Marpa_Grammar @var{g}, @
    Marpa_Rule_ID rule_id)

When successful, returns
the rank of the rule with ID @var{rule_id}.
When a rule is created, its rank
is initialized to the default rank of the grammar.

@strong{Return value}:
On success, returns a rule rank,
and sets the error code to
@code{MARPA_ERR_NONE}.
The rule rank is an integer.
On hard failure, returns @minus{}2,
and sets the error code to an appropriate
value, which will never be
@code{MARPA_ERR_NONE}.
Note that @minus{}2 is a valid rule rank,
so that when @minus{}2 is returned,
the error code is the only way to distinguish
success from failure.
The error code can be determined using
@code{marpa_g_error()}.
@xref{marpa_g_error,marpa_g_error()}.

@end deftypefn

@anchor{marpa_g_rule_rank_set}
@deftypefn {Mutator function} @
Marpa_Rank marpa_g_rule_rank_set ( @
    Marpa_Grammar @var{g}, @
    Marpa_Rule_ID @var{rule_id}, @
    Marpa_Rank @var{rank})

When successful,
sets
the rank of the rule with ID @var{rule_id} to @var{rank}
and returns @var{rank}.

@strong{Return value}:
On success, returns @var{rank},
which will be an integer,
and sets the error code to
@code{MARPA_ERR_NONE}.
On hard failure, returns @minus{}2,
and sets the error code to an appropriate
value, which will never be
@code{MARPA_ERR_NONE}.
Note that @minus{}2 is a valid rule rank,
so that when @minus{}2 is returned,
the error code is the only way to distinguish
success from failure.
The error code can be determined using
@code{marpa_g_error()}.
@xref{marpa_g_error,marpa_g_error()}.

@end deftypefn

@anchor{marpa_g_rule_null_high}
@deftypefn {Accessor function} @
int marpa_g_rule_null_high ( @
    Marpa_Grammar @var{g}, @
    Marpa_Rule_ID rule_id)

On success, returns a boolean whose value is 1
iff ``null ranks high'' is set in the rule with ID @var{rule_id}.
When a rule is created, it has ``null ranks high'' set.

For more on the
``null ranks high'' setting, read the description of
@code{marpa_g_rule_null_high_set()}.
@xref{marpa_g_rule_null_high_set,marpa_g_rule_null_high_set()}.

Soft fails iff @var{rule_id} is well-formed (a non-negative integer),
but a rule with that ID does not exist.

@strong{Return value}:
On success, a boolean.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_rule_null_high_set}
@deftypefn {Mutator function} @
int marpa_g_rule_null_high_set ( @
    Marpa_Grammar @var{g}, @
    Marpa_Rule_ID @var{rule_id}, @
    int @var{flag})

On success,
@itemize
@item sets ``null ranks high'' in the rule with ID @var{rule_id} if the value
of the boolean @var{flag} is 1;
@item unsets ``null ranks high'' in the rule with ID @var{rule_id} if the value
of the boolean @var{flag} is 0; and
@item returns @var{flag}.
@end itemize

The ``null ranks high'' setting affects the ranking of rules
with properly nullable symbols on their right hand side.
If a rule has properly nullable symbols on its RHS,
each instance in which it appears in a parse will have a pattern
of nulled and non-nulled symbols.
Such a pattern is called a ``null variant''.

If the ``null ranks high'' is set,
nulled symbols rank high.
If the ``null ranks high'' is unset is the default),
nulled symbols rank low.
Ranking of a null variants is done from left-to-right.

Soft fails iff @var{rule_id} is well-formed (a non-negative integer),
but a rule with that ID does not exist.

Hard fails if
the grammar has been precomputed.

@strong{Return value}:
On success, a boolean.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@node Grammar precomputation
@section Precomputing the Grammar

@anchor{marpa_g_has_cycle}
@deftypefn {Accessor function} @
int marpa_g_has_cycle (Marpa_Grammar @var{g})

On success, returns a boolean which is 1 iff
@var{g} has a cycle.
Parsing with a grammar that contains a cycle is deprecated.
@xref{Cycles}.

For diagnostic purposes,
it is useful to determine which rules are in the cycle.
@code{marpa_g_rule_is_loop()} can be used for for this purpose.
@xref{marpa_g_rule_is_loop}.

@strong{Return value}: On success, a boolean.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_is_precomputed}
@deftypefn {Accessor function} @
int marpa_g_is_precomputed (Marpa_Grammar @var{g})

@strong{Return value}: On success, a boolean which is 1 iff
grammar @var{g} is precomputed.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_precompute}
@deftypefn {Mutator function} @
int marpa_g_precompute (Marpa_Grammar @var{g})

On success,
and on fully recoverable hard failure,
precomputes the grammar @var{g}.
Precomputation involves running a series of grammar checks
and ``precomputing'' some useful information which is kept
internally to save repeated calculations.
After precomputation, the grammar is ``frozen'' in many respects,
and many grammar mutators that succeed before precomputation
will cause hard failures after precomputation.
Precomputation is necessary for a recognizer to be generated
from a grammar.

When called, clears any events already in the event queue.
May return one or more events.
The types of event that this method may return
are
A @code{MARPA_EVENT_LOOP_RULES},
@code{MARPA_EVENT_COUNTED_NULLABLE},
@code{MARPA_EVENT_NULLING_TERMINAL}.
All of these events occur only on failure.
Applications must be prepared for this method
to return additional events,
including events that occur on success.
Events may be queried using the
@code{marpa_g_event()} method.
@xref{marpa_g_event,marpa_g_event()}.

The fully recoverable hard failure is
@code{MARPA_ERR_GRAMMAR_HAS_CYCLE}.
While this method precomputes the grammar
for fully recoverable hard failures,
parsing with a grammar that has a cycle is deprecated.
Applications should treat
@code{MARPA_ERR_GRAMMAR_HAS_CYCLE}
as a library-recoverable error.
A @code{MARPA_ERR_GRAMMAR_HAS_CYCLE} error occurs
iff
a @code{MARPA_EVENT_LOOP_RULES} event occurs.
For more details on cycles,
@pxref{Cycles}.

The error code @code{MARPA_ERR_COUNTED_NULLABLE}
is library-recoverable.
This failure occurs when a symbol on the RHS of a sequence rule is
nullable,
which Libmarpa does not allow in a grammar.
Error code @code{MARPA_ERR_COUNTED_NULLABLE} occurs iff
one or more @code{MARPA_EVENT_COUNTED_NULLABLE} events occur.
There is one @code{MARPA_EVENT_COUNTED_NULLABLE} event for every symbol
that is a nullable on the right hand side of a sequence
rule.
An application may use these events to inform the user
of the problematic symbols,
and this detail may help the user fix the grammar.

The error code @code{MARPA_ERR_NULLING_TERMINAL}
occurs only if LHS terminals are enabled.
The LHS terminals feature is deprecated.
@xref{LHS terminals}.
Error code @code{MARPA_ERR_NULLING_TERMINAL}
is library-recoverable.
One or more @code{MARPA_EVENT_NULLING_TERMINAL} events will occur iff
this method fails with error code @code{MARPA_ERR_NULLING_TERMINAL}.
@xref{Nulling terminals}.

Among the other error codes that may case this
method to fail
are the following:

@itemize
@item @code{MARPA_ERR_NO_RULES}: The grammar has no rules.
@item @code{MARPA_ERR_NO_START_SYMBOL}: No start symbol was specified.
@item @code{MARPA_ERR_INVALID_START_SYMBOL}: A start symbol ID was specified, but it
is not the ID of a valid symbol.
@item @code{MARPA_ERR_START_NOT_LHS}: The start symbol is not on the LHS of any rule.
@item @code{MARPA_ERR_UNPRODUCTIVE_START}: The start symbol is not productive.
@end itemize

More details of these can be found under the
description of the appropriate code.
@xref{External error codes}.

@strong{Return value}: On success, a non-negative number,
whose value is otherwise unspecified.
On hard failure, @minus{}2.
For the error code @code{MARPA_ERR_GRAMMAR_HAS_CYCLE},
the hard failure is fully recoverable.
For the error codes @code{MARPA_ERR_COUNTED_NULLABLE}
and @code{MARPA_ERR_NULLING_TERMINAL},
the hard failure is library-recoverable.

@end deftypefn

@node Recognizer methods
@chapter Recognizer methods

@node Recognizer overview
@section Recognizer overview

An archetypal application uses a recognizer to read input.
To create a recognizer, use the
@code{marpa_r_new()}
method.
When a recognizer is no longer in use, its memory can be freed
using the
@code{marpa_r_unref()}
method.

To make a recognizer ready for input,
use the
@code{marpa_r_start_input()}
method.

The recognizer starts with its current earleme
at location 0.
To read a token at the current earleme,
use the
@code{marpa_r_alternative()}
call.

To complete the processing of the current earleme,
and move forward to a new one,
use the
@code{marpa_r_earleme_complete()}
call.

@node Creating a new recognizer
@section Creating a new recognizer

@anchor{marpa_r_new}
@deftypefn {Constructor function} @
Marpa_Recognizer marpa_r_new ( Marpa_Grammar @var{g} )

On success, creates a new recognizer and
increments the reference count of @var{g},
the base grammar, by one.
In the new recognizer,
@itemize
@item the reference count will be 1;
@item the furthest earleme will be 0; and
@item the values of the latest and current earleme will be unspecified.
@end itemize

@strong{Return value}:
On success, the newly created recognizer, which is never @code{NULL}.
If @var{g} is not precomputed, or on other hard failure, @code{NULL}.
@end deftypefn

@node Recognizer reference counting
@section Keeping the reference count of a recognizer

@anchor{marpa_r_ref}
@deftypefn {Mutator function} @
Marpa_Recognizer marpa_r_ref (Marpa_Recognizer @var{r})


Increases the reference count by 1.
This method is not needed by most applications.

@strong{Return value}:
On success, the recognizer object, @var{r}, which is never @code{NULL}.
On hard failure, @code{NULL}.

@end deftypefn

@anchor{marpa_r_unref}
@deftypefn {Destructor function} @
void marpa_r_unref (Marpa_Recognizer @var{r})

Decreases the reference count by 1,
destroying @var{r} once the reference count reaches
zero.
When @var{r} is destroyed, the reference count
of its base grammar is decreased by one.
If this takes the reference count of the base grammar
to zero, the base grammar is also destroyed.

@end deftypefn

@node Recognizer life cycle mutators
@section Life cycle mutators

@anchor{marpa_r_start_input}
@deftypefn {Mutator function} @
int marpa_r_start_input (Marpa_Recognizer @var{r})

When successful, does the following:
@itemize
@item Readies @var{r} to accept input.
@item
Completes the first Earley set.
The ID of the first Earley set is 0,
and it is located at earleme 0.
@item Leaves the latest, current and furthest earlemes all at 0.
@item Clears any events that were in the event queue before this method was called.
@item If this method exhausts the parse, generates a @code{MARPA_EVENT_EXHAUSTED} event.
    @xref{Exhaustion}.
@item May generate one or more @code{MARPA_EVENT_SYMBOL_NULLED},
    @code{MARPA_EVENT_SYMBOL_PREDICTED}, or @code{MARPA_EVENT_SYMBOL_EXPECTED} events.
    @xref{Events}.
@end itemize

@strong{Return value}:  On success, a non-negative value,
whose value is otherwise unspecified.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_r_alternative}
@deftypefn {Mutator function} @
int marpa_r_alternative (Marpa_Recognizer @var{r}, @
    Marpa_Symbol_ID @var{token_id}, @
    int @var{value}, @
    int @var{length})


The @var{token_id} argument must be the symbol ID of a terminal.
The @var{value} argument is an
integer that represents the ``value'' of the
token, and which should not be zero.
The @var{length} argument is the length of the token, which must
be greater than zero.

On success, does the following,
where @var{current} is the value of the current earleme
before the call and
@var{furthest} is the value of the furthest earleme
before the call:
@itemize
@item
Reads a new token into @var{r}.
The symbol ID of the token will be
@var{token_id}.
The token will start at @var{current}
and end at @code{@var{current}+@var{length}}.
@item
Sets the value of the furthest earleme to
@code{max(@var{current}+@var{length},@var{furthest})}.
@item
Leaves
the values of the latest and current earlemes unchanged.
@end itemize

After recoverable failure, the following are the case:
@itemize
@item
The tokens read into @var{r} are unchanged.
Specifically, no new token has been read into @var{r}.
@item
The values of the latest, current and furthest earlemes
are unchanged.
@end itemize

Libmarpa allows tokens to be ambiguous.
Two tokens are ambiguous if they end at the same earleme location.
If two tokens are ambiguous, Libmarpa will attempt to produce all the parses
that include either of them.

Libmarpa allows tokens to overlap.
Let the notation
@var{t}@@@var{s}-@var{e} indicate that token @var{t} starts
at earleme @var{s} and ends at earleme @var{e}.
Let @var{t1}@@@var{s1}-@var{e1}
and @var{t2}@@@var{s2}-@var{e2}
be two tokens such that @var{s1}<=@var{s2}.
We say that @var{t1} and @var{t2} overlap iff
@var{e1}>@var{s2}.

The @var{value} argument
is not used inside Libmarpa --- it is simply
stored to be returned by the valuator
as a convenience for the application.
In applications where the token's actual value is not an integer, it is
expected that the application will use @var{value} as
a ``virtual'' value,
perhaps finding the actual value by using @var{value}
to index an array.
Some applications may prefer to track token values on
their own, perhaps based on
the earleme location and @var{token_id},
instead of using Libmarpa's token values.

A @var{value} of 0 does not cause a failure,
but it is reserved for unvalued symbols,
a now-deprecated feature.
@xref{Valued and unvalued symbols}.

Hard fails irrecoverably with @code{MARPA_ERR_DUPLICATE_TOKEN}
if the token added would be a duplicate.
Two tokens are duplicates iff all of the following are true:
@itemize
@item They would have the same start earleme.
In other words, if @code{marpa_r_alternative()} attempts
to read them while at the same current earleme.
@item They have the same @var{token_id}.
@item They have the same @var{length}.
@end itemize

@anchor{Ruby Slippers}
If a token was not accepted
because of its token ID,
hard fails with the @code{MARPA_ERR_UNEXPECTED_TOKEN_ID}.
This hard failure is fully recoverable
so that, for example,
the application may
retry this method with different token IDs
until it succeeds.
These retries are efficient,
and are quite useable as a parsing
technique ---
so much so we have given the technique a name:
@dfindex Ruby Slippers
@dfn{the Ruby Slippers}.
The Ruby Slippers are used in several
applications.

@strong{Return value}:  On success, @code{MARPA_ERR_NONE}.
On failure, an error code other than @code{MARPA_ERR_NONE}.
The hard failure for @code{MARPA_ERR_UNEXPECTED_TOKEN_ID}
is fully recoverable.

@end deftypefn

@anchor{marpa_r_earleme_complete}
@deftypefn {Mutator function} @
int marpa_r_earleme_complete (Marpa_Recognizer @var{r})


For the purposes of this method description, we define the following:
@itemize
@item @var{current} is the value of the current earleme before the call of
@code{marpa_r_earleme_complete}.
@item @var{latest} is the value of the latest earleme before the call of
@code{marpa_r_earleme_complete}.
@item An ``expected'' terminal is one expected at a current earleme,
in the same sense that
@code{marpa_r_terminal_is_expected()} determines if a terminal is ``expected''
at the current earleme.
@xref{marpa_r_terminals_expected,marpa_r_terminals_expected()}.
@item An ``anticipated'' terminal is one
that was accepted by
the @code{marpa_r_alternative()} to end at an earleme after the current
earleme.
An anticipated terminal will have length greater than one.
``Anticipated'' terminals only occur if the application is using
an advanced model of input.
@xref{Advanced input models}.
@end itemize

On success, does the final processing for the current earleme, including
the following:
@itemize
@item
Advances the current earleme,
incrementing its value by 1.
That is, sets the current earleme to @code{@var{current}+1}.
@item
If any token was accepted at @var{current},
creates a new Earley set,
which will be the latest Earley set.
After the call, the latest
earleme will be equal to the new current earleme,
@code{@var{current}+1}.
@item
    If no token was accepted at @var{current},
    no Earley set is created.
    After the call,
    the value of the latest earleme will be unchanged ---
    that is, it will remain at @var{latest}.
    Success when no tokens were accepted at @var{current}
    can only occur if the application is using an advanced model of input.
    @xref{Advanced input models}.
@item
The value of the furthest earleme is never changed by
a call to
@code{marpa_r_earleme_complete()}.
@item Clears the event queue of any events that
occured before this method was called.
@item May generate one or more @code{MARPA_EVENT_SYMBOL_COMPLETED},
    @code{MARPA_EVENT_SYMBOL_NULLED}, @code{MARPA_EVENT_SYMBOL_PREDICTED},
    or @code{MARPA_EVENT_SYMBOL_EXPECTED} events.
    @xref{Events}.
@item
If an application-settable threshold
on the number of Earley items has been reached or exceeded,
generates a @code{MARPA_EVENT_EARLEY_ITEM_THRESHOLD} event.
Often, the application will want to treat this event
as if it were a ancestry-recoverable
failure.
@xref{marpa_r_earley_item_warning_threshold_set,
marpa_r_earley_item_warning_threshold_set()}.
@item If the parse is exhausted,
triggers a
@code{MARPA_EVENT_EXHAUSTED} event.
Exhaustion on success only occurs if no terminals
are expected at the current earleme after
the call to this method
(that is, at @code{@var{current}+1})
and no terminals are anticipated
after @code{@var{current}+1}.
@end itemize

On hard failure
with the code @code{MARPA_ERR_PARSE_EXHAUSTED}, does the following:
@itemize
@item Leaves the current earleme at @var{current}.
The current earleme will be the same as the furthest earleme.
@item
The value of the furthest earleme is never changed by
a call to
@code{marpa_r_earleme_complete()}.
@item
Leaves the value of the latest earleme at @var{latest}.
No new Earley set is created.
@item Sets the parse exhausted, so that no more tokens
will be accepted.  @xref{Exhaustion}.
@item Leaves the parse in a state where no terminals
are expected or anticipated.
@item Clears the event queue of any events that
occured before the call to this method.
@item Triggers a
@code{MARPA_EVENT_EXHAUSTED} event and no others.
@item Leaves valid any parses that were valid at
the current or earlier earlemes.
Processing with these can continue,
and it for this reason that we consider
hard failures with the code @code{MARPA_ERR_PARSE_EXHAUSTED}
to be fully recoverable.
@end itemize

We note that exhaustion can occur when this method fails
and when it succeeds.
The distinction is that, on success, the call creates a new Earley set before
becoming exhausted while,
on failure, it becomes exhausted without creating a new Earley set.

This method is commonly called at the top of a loop.
Almost all applications will want to check the return value
and take special action in case of a value other than zero.
If the value is greater than zero, an event will have occurred
and almost all applications
should react to @code{MARPA_EVENT_EARLEY_ITEM_THRESHOLD} events,
as described above,
and to unexpected events.
If the value is less than zero,
it may be due to an irrecoverable error,
and only in very unusual circumstances will an application wish
to ignore these.

How an application reacts to exhaustion will depend on the kind of
parsing it is doing:
@itemize
@item Very often an application knows the length of its input in advance.
In this case, the application will treat exhaustion before the end of input
as a parse error.
Depending on the application, exhaustion on success at the end of input
might be ignored.
@item An exhaustion-loving application that does not know the length of
its input will often want terminate the parse in case of exhaustion on method
success, treating exhaustion as an end-of-input indicator.
These application will usually want to treat exhaustion on method failure
as a parse error.
@item Occasionally, an exhaustion-hating application may not know
the length of its input in advance.
Since these applications will not know from the length of the input,
or from exhaustion, that they are at end of input,
they will need some other way of determining this.
One way they may do this is with a
@code{MARPA_EVENT_SYMBOL_COMPLETED} event.
Typically, these applications will treat exhaustion on method
failure and exhaustion before the end of input
as parse errors.
They may wish to ignore exhaustion on method success
at the end of input.
@end itemize
@strong{Return value}:  On success, the number of events generated.
On hard failure, @minus{}2.
Hard failure with the code
@code{MARPA_ERR_PARSE_EXHAUSTED}
is fully recoverable.
@end deftypefn

@node Location accessors
@section Location accessors

@anchor{marpa_r_current_earleme}
@deftypefn {Accessor function} @
@code{Marpa_Earleme} marpa_r_current_earleme (Marpa_Recognizer @var{r})

Successful iff input has started.
If input has not started, returns soft failure.

@strong{Return value}:
On success, the current earleme, which is always non-negative.
On soft failure, @minus{}1.
Never returns a hard failure.
@end deftypefn

@anchor{marpa_r_earleme}
@deftypefn {Accessor function} @
Marpa_Earleme marpa_r_earleme ( @
    Marpa_Recognizer @var{r}, @
    Marpa_Earley_Set_ID @var{set_id})

On success, returns the earleme of the Earley set with ID @code{set_id}.
The ID of an Earley set ID is also called its ordinal.
In the default, token-stream model, Earley set ID and earleme
are always equal, but this is not the case in other input
models.

Hard fails if there is no Earley set whose ID is
@var{set_id}.
This hard failure is fully recoverable.
If @var{set_id} was negative,
the error code of the hard failure is
@code{MARPA_ERR_INVALID_LOCATION}.
If @var{set_id} is greater than the ordinal
of the latest Earley set,
the error code of the hard failure is
@code{MARPA_ERR_NO_EARLEY_SET_AT_LOCATION}.

At this writing, there is no method for
the inverse operation (conversion of an earleme to an Earley set
ID).
One consideration in writing
such a method is that not all earlemes correspond to Earley sets.
Applications that want to map earlemes
to Earley sets will have no trouble if they
are using the standard input model ---
the Earley set
ID is always exactly equal to the earleme in that model.
For other applications
that want an earleme-to-ID mapping,
the most general method is create an ID-to-earleme
array using the
@code{marpa_r_earleme()}
method
and invert it.

@strong{Return value}:
On success, the earleme corresponding to Earley
set @var{set_id},
which is always non-negative.
On hard failure, @minus{}2.
The hard failures with error codes
@code{MARPA_ERR_INVALID_LOCATION} and
@code{MARPA_ERR_NO_EARLEY_SET_AT_LOCATION}
are fully recoverable.

@end deftypefn

@anchor{marpa_r_earley_set_value}
@deftypefn {Accessor function} int marpa_r_earley_set_value (@
  Marpa_Recognizer @var{r}, @
  Marpa_Earley_Set_ID earley_set)

On success,
returns the ``integer value'' of @var{earley_set}.
For more about the integer value of an Earley set,
@pxref{marpa_r_earley_set_values,marpa_r_earley_set_values()}.

@strong{Return value}:
On success, returns the the integer value of @var{earley_set},
and sets the error code to @code{MARPA_ERR_NONE}.
On hard failure, returns @minus{}2,
and sets the error code to
the error code of the hard failure,
which will never be @code{MARPA_ERR_NONE}.
Note that @minus{}2 is a valid ``integer value'' for
an Earley set,
so that when @minus{}2 is returned,
the error code is the only way to distinguish
success from failure.
The error code can be determined using
@code{marpa_g_error()}.
@xref{marpa_g_error,marpa_g_error()}.

@end deftypefn

@anchor{marpa_r_earley_set_values}
@deftypefn {Mutator function} int marpa_r_earley_set_values (@
  Marpa_Recognizer @var{r}, @
  Marpa_Earley_Set_ID @var{earley_set}, @
  int* @var{p_value}, @
  void** @var{p_pvalue} @
  )

On success, does the following:
@itemize
@item If @var{p_value} is non-zero,
sets the location pointed to by
@var{p_value} to the integer value of the Earley set
with ID @var{earley_set}.
@item If @var{p_pvalue} is non-zero,
sets the location pointed to by
@var{p_pvalue} to the pointer value of the Earley set
with ID @var{earley_set}.
@end itemize

The ``value'' and ``pointer'' of an Earley set are
an arbitrary integer
and an arbitrary pointer.
Libmarpa never examines them
and the application is free to
use them for its own purposes.
In an application with a character-per-earleme input model, for example,
the integer value of the Earley set
can used to store the codepoint of the current character.
In a traditional token-per-earleme input model,
the integer and pointer values could be used to track the string value of the token --
the pointer could point to the start of the string,
and the integer could indicate its length.

The Earley set integer value defaults to @minus{}1,
and the pointer value defaults to @code{NULL}.
The Earley set value and pointer can be set using
the
@code{marpa_r_latest_earley_set_values_set()}
method.
@xref{marpa_r_latest_earley_set_values_set,marpa_r_latest_earley_set_values_set()}.

@strong{Return value}: On success, returns a non-negative integer.
On hard failure, returns @minus{}2.
@end deftypefn

@anchor{marpa_r_furthest_earleme}
@deftypefn {Accessor function} @code{unsigned int} marpa_r_furthest_earleme (Marpa_Recognizer @var{r})

@strong{Return value}: The furthest earleme.  Always succeeds.

@end deftypefn

@anchor{marpa_r_latest_earley_set}
@deftypefn {Accessor function} Marpa_Earley_Set_ID marpa_r_latest_earley_set (Marpa_Recognizer @var{r})

Returns the Earley set ID of the latest Earley set.
The ID of an Earley set ID is also called its ordinal.
Applications that want the
value of the latest earleme can convert
this value using
the
@code{marpa_r_earleme()}
method.
@xref{marpa_r_earleme,marpa_r_earleme()}.

@strong{Return value}: The ID of the latest Earley set.  Always succeeds.
@end deftypefn

@anchor{marpa_r_latest_earley_set_value_set}
@deftypefn {Mutator function} int marpa_r_latest_earley_set_value_set (@
  Marpa_Recognizer @var{r}, int @var{value})

Sets the ``integer value'' of the latest Earley set to @var{value}.
For more about the integer value of an Earley set,
@pxref{marpa_r_earley_set_values,marpa_r_earley_set_values()}.

@strong{Return value}:
On success, returns the newly set integer value of the latest earley set,
and sets the error code to @code{MARPA_ERR_NONE}.
On hard failure, returns @minus{}2,
and sets the error code to
the error code of the hard failure,
which will never be @code{MARPA_ERR_NONE}.
Note that @minus{}2 is a valid ``integer value'' for
an Earley set,
so that when @minus{}2 is returned,
the error code is the only way to distinguish
success from failure.
The error code can be determined using
@code{marpa_g_error()}.
@xref{marpa_g_error,marpa_g_error()}.

@end deftypefn

@anchor{marpa_r_latest_earley_set_values_set}
@deftypefn {Mutator function} int marpa_r_latest_earley_set_values_set (@
  Marpa_Recognizer @var{r}, @
  int value, @
  void* pvalue)

Sets the integer and pointer value of the latest Earley set.
For more about the ``integer value'' and ``pointer value''
of an Earley set,
@pxref{marpa_r_earley_set_values,marpa_r_earley_set_values()}.

@strong{Return value}: On success, returns a non-negative integer.
On hard failure, returns @minus{}2.
@end deftypefn

@node Other parse status methods
@section Other parse status methods

@anchor{marpa_r_earley_item_warning_threshold}
@deftypefn {Accessor function} @
int marpa_r_earley_item_warning_threshold (Marpa_Recognizer @var{r})

For details about the ``earley item warning threshold'',
@pxref{marpa_r_earley_item_warning_threshold_set,marpa_r_earley_item_warning_threshold_set()}.

@strong{Return value}:
The Earley item warning threshold.
Always succeeds.
@end deftypefn

@anchor{marpa_r_earley_item_warning_threshold_set}
@deftypefn {Mutator function} @
int marpa_r_earley_item_warning_threshold_set (Marpa_Recognizer @var{r}, @
    int @var{threshold})

On success, sets
the Earley item warning threshold.
The
@dfindex Earley item warning threshold
@dfn{Earley item warning threshold}
is a number that is compared with
the count of Earley items in each Earley set.
When it is matched or exceeded,
a @code{MARPA_EVENT_EARLEY_ITEM_THRESHOLD} event is created.
@xref{MARPA_EVENT_EARLEY_ITEM_THRESHOLD}.

If @var{threshold} is zero or less,
an unlimited number of Earley items
will be allowed without warning.
This will rarely be what the user wants.

By default, Libmarpa calculates a value based on the grammar.
The formula Libmarpa uses is the result of some experience,
and most applications will
be happy with it.

What should be done when the threshold is exceeded, depends on the application,
but exceeding the threshold means that it is very likely
that the time and space resources consumed by
the parse will prove excessive.
This is often a sign of a bug in the grammar.
Applications often will want to smoothly shut down
the parse,
in effect treating
the @code{MARPA_EVENT_EARLEY_ITEM_THRESHOLD} event
as equivalent to library-recoverable hard failure.

@strong{Return value}:
The value that the Earley item warning threshold has
after the method call is finished.
Always succeeds.
@end deftypefn

@anchor{marpa_r_is_exhausted}
@deftypefn {Accessor function} @
int marpa_r_is_exhausted (Marpa_Recognizer @var{r})
A parser is ``exhausted'' if it cannot accept any more input.
@xref{Exhaustion}.

@strong{Return value}:
1 if the parser is exhausted, 0 otherwise.
Always succeeds.
@end deftypefn

@anchor{marpa_r_terminals_expected}
@deftypefn {Accessor function} @
int marpa_r_terminals_expected ( @
    Marpa_Recognizer @var{r}, @
    Marpa_Symbol_ID* @var{buffer})
Returns a list of the ID's of the symbols
that are acceptable as tokens
at the current earleme.
@var{buffer} is expected to be large enough to hold
the result.
This is guaranteed to be the case if the buffer
is large enough to hold an array of
@code{Marpa_Symbol_ID}'s whose length
is greater than or equal to the number of symbols
in the grammar.

@strong{Return value}:  On success, the number of @code{Marpa_Symbol_ID}'s
in @var{buffer}, which is always non-negative.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_r_terminal_is_expected}
@deftypefn {Accessor function} @
int marpa_r_terminal_is_expected ( @
    Marpa_Recognizer @var{r}, @
    Marpa_Symbol_ID @var{symbol_id})

On success, does the folloing:
@itemize
@item If
@var{symbol_id} is not the ID of
a terminal symbol, returns 0.
@item If
@var{symbol_id} is the ID of
a terminal symbol, but that symbol is @strong{not}
expected at the current earleme, returns 0.
@item If
@var{symbol_id} is the ID of
a terminal symbol, but that symbol @strong{is}
expected at the current earleme, returns 1.
@end itemize
Hard fails if
the symbol with ID @var{symbol_id} does not
exist.

@strong{Return value}: On success, 0 or 1.
On hard failure, @minus{}2.

@end deftypefn

@node Progress reports
@chapter Progress reports

It is an important property of the Marpa algorithm that the
Earley sets are added one at a time,
so that
before we have started the construction of the Earley set at @code{n+1},
we know the full state of the parse at and before
location @code{n}.
Libmarpa's progress reports allow access to the Earley items
in an Earley set.

To start a progress report,
use the
@code{marpa_r_progress_report_start()}
command.
For each recognizer,
only one progress report can be in use at any one time.

To step through the Earley items,
use the
@code{marpa_r_progress_item()}
method.

@anchor{marpa_r_progress_report_reset}
@deftypefn {Mutator function} @
int marpa_r_progress_report_reset ( @
  Marpa_Recognizer @var{r})

On success, sets the current vertex of the report traverser
to the null vertex.
For more about the report traverser,
including details about the current and null vertices,
@pxref{marpa_r_progress_report_start,marpa_r_progress_report_start()}.

This method is not usually needed.
Its effect is to leave the traverser in the same state as it is
immediately after the
@code{marpa_r_progress_report_start()} method.
Loosely speaking, it allows the traversal to ``start over''.

Hard fails if the recognizer is not started,
or if no progress report traverser is active.

@strong{Return value}: On success, a non-negative value.
On failure, @minus{}2.
@end deftypefn

@anchor{marpa_r_progress_report_start}
@deftypefn {Mutator function} @
int marpa_r_progress_report_start ( @
  Marpa_Recognizer @var{r}, @
  Marpa_Earley_Set_ID @var{set_id})

Creates a progress report traverser
in recognizer @var{r}
for the Earley set with ID @var{set_id}.
A
@dfindex progress report traverser
@dfindex traverser, progress report
@dfn{progress report traverser}
is a non-empty directed cycle graph whose vertices consist
of the following:
@itemize
@item For every Earley item,
exactly one vertex that corresponds to
that Earley item.
This vertex is called the
@dfindex progress report item
@dfn{progress report item}
or, when the meaning is clear, the
@dfindex report item
@dfn{report item}.
In this method description,
we will say the the number of report items is @code{n},
and we will write @code{ritem[i]}
for the @code{i}'th report item.
@item A special vertex, called the
@dfindex null vertex
@dfindex vertex, null
@dfn{null vertex},
which does not correspond
to any Earley item.
In this method description, we will write @code{null} for
the null vertex.
@end itemize

There may be no Earley items in an Earley set,
and therefore a progress report traverser may contain no report items.
A progress report traverser with no report items is called a
``trivial traverser''.
A trivial traverser has exactly one edge: @code{(null, null)}.

The edges of a non-trivial traverser are
@itemize
@item @code{(null, ritem[0])},
@item @code{(ritem[n-1], null)}, and
@item for every @code{0 <= i < v-1}, @code{(ritem[i-1], ritem[i])}.
@end itemize
This implies that every vertex has exactly one direct successor.
The report items are a subgraph,
and this graph can be seen as inducing the sequence @code{ritem[0] ... ritem[n-1]}.

When a progress report traverser is active, one vertex is distinguished as the
@dfindex current vertex (of a progress report traverser)
@dfindex vertex, current (of a progress report traverser)
@dfn{current vertex},
which we will write as @code{current}.
We call the direct successor of the current vertex,
the
@dfindex next vertex (of a progress report traverser)
@dfindex vertex, next (of a progress report traverser)
@dfn{next vertex}.

On success, does the following:
@itemize
@item If a progress report traverser was active in this recognizer before this method call,
it is destroyed and its memory is freed..
@item Creates a new progress report traverser from the Earley items for the
Earley set with ID @var{set_id}.
@item Activates the newly created progress report traverser,
setting the current vertex to the null vertex.
Intuitively, in a non-trivial traverser,
this can be thought of as positioning the
traverser before the first report item.
@item Returns @code{n}, the number of report items.
    @code{n} may be zero.
@end itemize

Hard fails if no Earley set with ID
@var{set_id} exists.
The error code is @code{MARPA_ERR_INVALID_LOCATION} if @var{set_id}
is negative.
The error code is @code{MARPA_ERR_NO_EARLEY_SET_AT_LOCATION}
if @var{set_id} is greater than the ID of
the latest Earley set.

@strong{Return value}: On success, the number of report items,
which will always be non-negative.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_r_progress_report_finish}
@deftypefn {Mutator function} @
int marpa_r_progress_report_finish ( @
  Marpa_Recognizer @var{r} )

On success,
destroys the progress report traverser
for recognizer @var{r},
freeing its memory.
For details about the report traverser,
@pxref{marpa_r_progress_report_start,marpa_r_progress_report_start()}.

It is often not necessary to call this method.
@code{marpa_r_progress_report_start()} destroys
any previously existing progress report.
And,
when a recognizer is destroyed,
its progress report is destroyed as a side effect.

Hard fails if no progress report is active.

@strong{Return value}:
On success, a non-negative value.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_r_progress_item}
@deftypefn {Mutator function} @
Marpa_Rule_ID marpa_r_progress_item ( @
  Marpa_Recognizer @var{r}, @
  int* @var{position}, @
  Marpa_Earley_Set_ID* @var{origin} )
This method allows access to the data
for the next progress report item of a
progress report.
For details about progress reports,
@pxref{marpa_r_progress_report_start,marpa_r_progress_report_start()}.

In the event of success:
@itemize
@item Advances the current vertex to the next vertex.
More precisely, let @code{c_before} be the vertex
that is the current vertex immediately
before the call to this method.
The report item traverser has exactly one edge such that @code{c_before}
is its first element.
Let this edge be @code{(c_before,c_after)}.
This method sets the current vertex to @code{c_after}.
In this method description, we will write @code{current} as an alias for @code{c_after}.
@item @code{current} will be a report item vertex and therefore there will
be an Earley item corresponding to @code{current}.
@item Writes the ``cooked dot position'' of the Earley item corresponding to @code{current}
to the location pointed to by the @var{position} argument.
@item Writes the origin of the Earley item corresponding to @code{current}
to the location pointed to by the @var{origin} argument.
@item Returns the rule ID of the Earley item corresponding to @code{current}.
@end itemize

The ``cooked dot position'' is
@itemize
@item the standard 0-based start-relative
dot position, if the dotted rule is @strong{not} a completion; and
@item the end-relative dot position, where the last position is
@minus{}1, if the dotted rule @strong{is} a completion.
@end itemize
Use of the cooked dot position allows an application to quickly
determine if the dotted rule is a completion.
The cooked dot position is @minus{}1 iff the dotted rule is a completion.

In the event of soft failure:
@itemize
@item @code{current} is the null vertex.
@item Sets the error code to @code{MARPA_ERR_PROGRESS_REPORT_EXHAUSTED}.
@item Leaves unchanged the locations pointed to by
the @var{position} and @var{origin} arguments.
@item Returns @minus{}1.
@end itemize

In addition to watching for soft failure,
the application can use the item count returned by
@code{marpa_r_progress_report_start()}
to determine when the last
item has been seen.

@strong{Return value}: On success, the rule ID of
the progress report item, which is always non-negative.
On soft failure, @minus{}1.
If either the @var{position} or the @var{origin}
argument is @code{NULL},
or on other hard failure, @minus{}2.
@end deftypefn

@node Bocage methods
@chapter Bocage methods

@node Bocage overview
@section Overview

To create a bocage, use the
@code{marpa_b_new()}
method.

When a bocage is no longer in use, its memory can be freed
using the
@code{marpa_b_unref()}
method.

@node Bocage data structure
@section Bocage data structure

A bocage is a data structure containing the parses
found by processing the input according to the grammar.
It is related to a parse forest,
but is in a form that is more compact and easily traversable.
``Bocage'' is our term, and we discovered this structure
independently,
but our work was preceded by Elizabeth Scott.
And, unlike us,
Prof. Scott did the all-important
work of documenting it and providing the
appropriate mathematical apparatus.
@xref{Elizabeth Scott's SPPFs}.

The bocage contains the data for the parse trees whose root is
an instance of the start symbol that begins at Earley set 0
and ends at the
@dfindex End of parse Earley set
@dfindex Earley set, end of parse
@dfn{end of parse Earley set}.
Applications usually use the Earley set at the current earleme
as the
``end of parse Earley set'',
so that the bocage is for parses of the entire input.
But some applications may be interested in parsing prefixes of
the input, and these applications can choose other
end of parse Earley sets in their constructor.
@xref{marpa_b_new,marpa_b_new()}.

@node Bocage constructor
@section Creating a new bocage

@anchor{marpa_b_new}
@deftypefn {Constructor function} @
Marpa_Bocage marpa_b_new (Marpa_Recognizer @var{r}, @
    Marpa_Earley_Set_ID @var{earley_set_ID})

On success, the following is the case:
@itemize
@item If @code{earley_set_ID} is non-negative,
creates a new bocage object, whose ``end of parse Earley set''
is the Earley set with ID @code{earley_set_ID}.
@item If @code{earley_set_ID} is @minus{}1,
creates a new bocage object, whose ``end of parse Earley set''
is the Earley set at the current earleme.
@item The new bocage object has a reference count of 1.
@item The reference count of its parent recognizer object, @var{r},
is increased by 1.
@end itemize

If @var{earley_set_ID} is @minus{}1
and there is no Earley set at the current earleme;
or if @var{earley_set_ID} is non-negative
and there is no parse ending at Earley set @var{earley_set_ID},
@code{marpa_b_new()}
hard fails
with the error code @code{MARPA_ERR_NO_PARSE}.

@strong{Return value}: On success, the new bocage object.
On hard failure, @code{NULL}.
@end deftypefn

@node Bocage reference counting
@section  Reference counting
@anchor{marpa_b_ref}
@deftypefn {Mutator function} @
Marpa_Bocage marpa_b_ref (Marpa_Bocage @var{b})

On success, increases the reference count by 1.
This method is not needed by most applications.

@strong{Return value}:
On success, @var{b}.
On hard failure, @code{NULL}.
@end deftypefn

@anchor{marpa_b_unref}
@deftypefn {Destructor function} @
void marpa_b_unref (Marpa_Bocage @var{b})
Decreases the reference count by 1,
destroying @var{b} once the reference count reaches
zero.
When @var{b} is destroyed, the reference count
of its parent recognizer is decreased by 1.

@end deftypefn

@node Bocage accessor
@section  Accessors
@anchor{marpa_b_ambiguity_metric}
@deftypefn {Accessor function} @
int marpa_b_ambiguity_metric (Marpa_Bocage @var{b})
On success, returns an ambiguity metric.
If the parse is unambiguous,
the metric is 1.
If the parse is ambiguous, the metric
is 2 or greater, and is otherwise unspecified.
@xref{Better defined ambiguity metric}.

@strong{Return value}: On success, the ambiguity metric,
which is always non-negative.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_b_is_null}
@deftypefn {Accessor function} @
int marpa_b_is_null (Marpa_Bocage @var{b})

@strong{Return value}
On success, a non-negative integer:
1 or greater if the bocage @strong{is} for a null parse,
and 0 if the bocage is @strong{not} for a null parse.
On hard failure, @minus{}2.
@end deftypefn

@node Ordering methods
@chapter Ordering methods

@node Ordering overview
@section Overview

Before iterating through the parse trees in the bocage,
the parse trees must be ordered.
To create an ordering, use the
@code{marpa_o_new()}
method.

When an ordering is no longer in use, its memory can be freed
using the
@code{marpa_o_unref()}
method.

@node Freezing the ordering
@section Freezing the ordering

An ordering is
@dfindex frozen ordering
@dfindex ordering, frozen
@dfn{frozen}
under the following circumstances:
@itemize
@item The first
tree iterator is created
using the ordering.
@xref{marpa_t_new,marpa_t_new()}.
@item @code{marpa_o_ambiguity_metric()}
is successfully called.
@xref{marpa_o_ambiguity_metric,marpa_o_ambiguity_metric()}.
@item @code{marpa_o_rank()} is successfully called.
@xref{marpa_o_rank,marpa_o_rank()}.
@end itemize

A frozen ordering cannot be changed.
There is no way to ``unfreeze'' an ordering.

@node Ordering constructor
@section Creating an ordering

@anchor{marpa_o_new}
@deftypefn {Constructor function} @
Marpa_Order marpa_o_new ( Marpa_Bocage @var{b})

On success, does the following:
@itemize
@item Creates a new ordering object, with a reference count of 1.
@item Increases the reference count of its parent bocage object, @var{b}, by 1.
@end itemize

@strong{Return value}: On success, the new ordering object.
On hard failure, @code{NULL}.
@end deftypefn

@node Ordering reference counting
@section Reference counting

@anchor{marpa_o_ref}
@deftypefn {Mutator function} @
Marpa_Order marpa_o_ref ( Marpa_Order @var{o})

On success, increases the reference count by 1.
Not needed by most applications.

@strong{Return value}:
On success, @var{o}.
On hard failure, @code{NULL}.
@end deftypefn

@anchor{marpa_o_unref}
@deftypefn {Destructor function} @
void marpa_o_unref ( @
    Marpa_Order @var{o})

Decreases the reference count by 1,
destroying @var{o} once the reference count reaches
zero.

@end deftypefn

@node Order accessor
@section  Accessors
@anchor{marpa_o_ambiguity_metric}
@deftypefn {Accessor function} @
int marpa_o_ambiguity_metric (Marpa_Order @var{o})

On success, returns an ambiguity metric.
If the parse is unambiguous,
the metric is 1.
If the parse is ambiguous, the metric
is 2 or greater, and is otherwise unspecified.
@xref{Better defined ambiguity metric}.

If ``high rank only'' is in effect,
this ambiguity metric may differ from that returned by
@code{marpa_b_ambiguity_metric()}.
In particular, a ``high rank only'' ordering
may be unambiguous even if its base bocage is ambiguous.
But note also,
because multiple parses choices may have the same rank,
a ``high rank only'' ordering may be ambiguous.

If the ordering is not already frozen,
it will be frozen on return from
@code{marpa_o_ambiguity_metric()}.
For our purposes,
@code{marpa_o_ambiguity_metric()}
is considered an ``accessor'',
because it treats its ordering as if it was frozen
before the call to @code{marpa_o_ambiguity_metric()}.

@strong{Return value}:
On success, the ambiguity metric, which is non-negative.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_o_is_null}
@deftypefn {Accessor function} @
int marpa_o_is_null (Marpa_Order @var{o})
@strong{Return value}:
On success:
A number greater than or equal to 1 if the ordering is for a null parse;
otherwise, 0.
On hard failure, @minus{}2.
@end deftypefn

@node Non-default ordering
@section Non-default ordering

@anchor{marpa_o_high_rank_only}
@deftypefn {Accessor function} @
int marpa_o_high_rank_only ( Marpa_Order @var{o})

On success, returns,
the ``high rank only'' flag of ordering @var{o}.
@xref{marpa_o_high_rank_only_set,marpa_o_high_rank_only_set()}.

@strong{Return value}:
On success, the  value of the
``high rank only'' flag, which is a boolean.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_o_high_rank_only_set}
@deftypefn {Mutator function} @
int marpa_o_high_rank_only_set ( @
    Marpa_Order @var{o}, @
    int @var{flag})

Sets the ``high rank only'' flag of ordering @var{o}.
A @var{flag} of 1 indicates that, when ranking,
all choices should be discarded except those of the
highest rank.
A @var{flag} of 0 indicates that
no choices should be discarded on the
basis of their rank.

A value of 1 is the default.
The value of the ``high rank only'' flag has no effect
until ranking is turned on using the
@code{marpa_o_rank()}
method.

Hards fails if the ordering is frozen.

Return value:  On success, a boolean which is the value of the
``high rank only'' flag @strong{after}
the call.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_o_rank}
@deftypefn {Mutator function} @
int marpa_o_rank ( Marpa_Order @var{o} )

By default, the ordering of parse trees is arbitrary.
On success, the following happens:
@itemize
@item The ordering is ranked
according to the ranks of symbols and rules,
the ``null ranks high'' flags of the rules,
and the ``high rank only'' flag of the ordering.
@item
The ordering is @dfn{frozen}.
@xref{Freezing the ordering}.
@end itemize

@strong{Return value}:
On success, a non-negative value.
On hard failure, @minus{}2.
@end deftypefn

@node Tree methods
@chapter Tree methods

@node Tree overview
@section Overview

Once the bocage has an ordering, the parses trees can be iterated.
Marpa's
@dfindex parse tree iterator
@dfindex iterator, parse tree
@dfindex parse tree
@dfindex tree
@dfn{parse tree iterators}
iterate the parse trees contained
in a bocage object.
In Libmarpa,
``parse tree iterators'' are usually just called
@dfn{trees}.

To create a tree, use the
@code{marpa_t_new()}
method.
A newly created tree iterator is positioned before the first parse tree.

When a tree iterator is no longer in use, its memory can be freed
using the
@code{marpa_t_unref()}
method.

To position a newly created tree iterator at the first parse tree,
use the
@code{marpa_t_next()}
method.
Once the tree iterator is positioned at a parse tree,
the same
@code{marpa_t_next()}
method is used
to position it to the next parse tree.

@node Tree constructor
@section Creating a new tree iterator

@anchor{marpa_t_new}
@deftypefn {Constructor function} @
Marpa_Tree marpa_t_new (Marpa_Order @var{o})

On success, does the following:
@itemize
@item Creates a new tree iterator, with a reference count of 1.
@item Increases the reference count of its parent ordering object, @var{o}, by 1.
@item Positions the new tree iterator before the first parse tree.
@end itemize

@strong{Return value}:
On success, a newly created tree.
On hard failure, @code{NULL}.
@end deftypefn

@node Tree reference counting
@section Reference counting

@anchor{marpa_t_ref}
@deftypefn {Mutator function} @
Marpa_Tree marpa_t_ref (Marpa_Tree @var{t})
On success, increases the reference count by 1.
Not needed by most applications.

@strong{Return value}:
On success, @var{t}.
On hard failure, @code{NULL}.
@end deftypefn

@anchor{marpa_t_unref}
@deftypefn {Destructor function} @
void marpa_t_unref (Marpa_Tree @var{t})

Decreases the reference count by 1,
destroying @var{t} once the reference count reaches
zero.
@end deftypefn

@node Iterating through the trees
@section Iterating through the trees

@anchor{marpa_t_next}
@deftypefn {Mutator function} @
int marpa_t_next ( Marpa_Tree @var{t})

On success,
positions @var{t} at the next parse tree
in the iteration.

Tree iterators are initialized to the position
before the first parse tree,
so this method must be called before creating a valuator
from a tree.

If a tree iterator is positioned after the last parse,
the tree is said to be ``exhausted''.
A tree iterator for a bocage with no parse trees
is considered to be ``exhausted'' when initialized.

If the tree iterator is exhausted,
soft fails, and
sets the error code to @code{MARPA_ERR_TREE_EXHAUSTED}.
@xref{Orthogonal treatment of soft failures}.

It the tree iterator is paused,
hard fails, and
sets the error code to @code{MARPA_ERR_TREE_PAUSED}.
This hard failure is fully recoverable.
@xref{marpa_v_new,marpa_v_new()}.

@strong{Return value}: On success, a non-negative value.
On soft failure, @minus{}1.
On hard failure, @minus{}2.
The hard failure with error code @code{MARPA_ERR_TREE_PAUSED}
is fully recoverable.
@end deftypefn

@anchor{marpa_t_parse_count}
@deftypefn {Accessor function} @
int marpa_t_parse_count ( Marpa_Tree @var{t})

Returns the count of the number of parse trees
traversed so far.
The count includes the current iteration of the
tree.
A value of 0 indicates that the tree iterator
is at its initialized position,
before the first parse tree.

@strong{Return value}: The number of parses traversed so far.
Always succeeds.
@end deftypefn

@node Value methods
@chapter Value methods

@node Value overview
@section Overview

The archetypal application needs
a value object (or
@dfindex valuator
@dfn{valuator}) to produce
the value of the parse tree.
To create a valuator, use the
@code{marpa_v_new()}
method.

The application is required to maintain the stack,
and the application is also required to implement
most of the semantics, including the evaluation
of rules.
Libmarpa's valuator provides instructions to
the application on how to manipulate the stack.
To iterate through this series of instructions,
use the
@code{marpa_v_step()}
method.

When successful, @code{marpa_v_step()}
returns the type
of step.
Most step types have values associated with them.
@xref{Basic step accessors},
@pxref{How to use the valuator}, and
@pxref{Stepping through the valuator}.

When a valuator is no longer in use, its memory can be freed
using the
@code{marpa_v_unref()}
method.

@node How to use the valuator
@section How to use the valuator
Libmarpa's valuator provides the application with
``steps'', which are
instructions for stack manipulation.
Libmarpa itself does not maintain a stack.
This leaves the upper layer in total control of the
stack and the values that are placed on it.

As example may make this clearer.
Suppose the evaluation is at a place in the parse tree
where an addition is being performed.
Libmarpa does not know that the operation
is an addition.
It will tell the application that rule number @var{R}
is to be applied to the arguments at stack locations
@var{N} and @var{N}+1, and that the result is to placed in
stack location @var{N}.

In this system
the application keeps track of the semantics for all
rules, so it looks up rule @var{R} and determines that it
is an addition.
The application can do this by using @var{R} as an index
into an array of callbacks, or by any other method
it chooses.
Let's assume a callback implements the semantics
for rule @var{R}.
Libmarpa has told the application that two arguments
are available for this operation, and that they are
at locations @var{N} and @var{N}+1 in the stack.
They might be the numbers 42 and 711.
So the callback is called with its two arguments,
and produces a return value, let's say, 753.
Libmarpa has told the application that the result
belongs at location @var{N} in the stack,
so the application writes 753 to location @var{N}.

Since Libmarpa knows nothing about the semantics,
the operation for rule R could be string concatenation
instead of addition.
Or, if it is addition, it could allow for its arguments
to be floating point or complex numbers.
Since the application maintains the stack, it is up
to the application whether the stack contains integers,
strings, complex numbers, or polymorphic objects that are
capable of being any of these things and more.

@node Advantages of step-driven valuation
@section Advantages of step-driven valuation

Step-driven valuation
hides Libmarpa's grammar rewrites from the application,
and is quite efficient.
Libmarpa knows which rules are sequences.
Libmarpa optimizes stack manipulations based on this knowledge.
Long sequences
are very common in practical grammars.
For these,
the stack manipulations suggested by Libmarpa's
step-driven valuator
will be significantly faster than the
traditional stack evaluation algorithm.

Step-driven evaluation has another advantage.
To illustrate this,
consider what is a very common case:
The semantics are implemented in a higher-level language,
using callbacks.
If Libmarpa did not use step-driven valuation,
it would need to provide for this case.
But for generality,
Libmarpa would have to deal in C callbacks.
Therefore, a middle layer would have to create C language wrappers
for the callbacks in the higher level language.

The implementation that results is this:
The higher level language would need to wrap each callback in C.
When calling Libmarpa, it would pass the wrappered callback.
Libmarpa would then need to call the C language ``wrappered'' callback.
Next, the wrapper would call the higher-level language callback.
The return value,
which would be data native to the higher-level language,
would need to be passed to the C language wrapper,
which will need to make arrangements for it to be based
back to the higher-level language when appropriate.

A setup like this is not terribly efficient.
And exception handling across language boundaries would be
very tricky.

But neither of these is the worst problem.
The worst problem is that callbacks are hard to debug.
Wrappered callbacks are even worse.
Calls made across language boundaries
are harder yet to debug.
In the system described above,
by the time a return value is finally consumed,
a language boundary will have been crossed four times.
The ability to debug can make the difference between
code that works and code that does not work.

So, while step-driven valuation seems
a roundabout approach,
it is simpler and more direct than
the likely alternatives.
And there is something to be said for pushing
semantics up to the higher levels ---
they can be expected to know more about it.

These advantages of step-driven valuation
are strictly in
the context of a low-level interface.
We are under no illusion
that direct use of Libmarpa's valuator will be found
satisfactory by most Libmarpa users,
even those using the C language.
Libmarpa's valuator is intended
to be used via an upper layer,
one that @strong{does} know about semantics.

@node Maintaining the stack
@section Maintaining the stack

This section discusses in detail the requirements
for maintaining the stack.
In some cases,
such as implementation using a Perl array,
fulfilling these requirements is trivial.
Perl auto-extends its arrays,
and initializes the element values,
on every read or write.
For the C programmer,
things are not quite so easy.

In this section,
we will assume a C89 standard-conformant
C application.
This assumption is convenient on two grounds.
First, this will be the intended use
for many readers.
Second, standard-conformant C89 is
a ``worst case''.
Any issue faced by a programmer in another environment
is likely to also be one that must be solved
by the C programmer.

Libmarpa often
optimizes away unnecessary stack writes
to stack locations.
When it does so, it will not
necessarily optimize away all reads
to that stack location.
This means that a location's first access,
as suggested by the Libmarpa step instructions,
may be a read.
This possibility
requires a special awareness from the C
programmer.
@xref{Sizing the stack}.

@node Sizing the stack
@subsection Sizing the stack

In our discussion of the stack handler for the valuator,
we will treat the stack as a 0-based array.
If an implementation applies Libmarpa's step
instructions literally, using a physical stack,
it must make sure that all locations in the stack are initialized.
The range of locations that must be initialized is from
stack location 0 to the ``end of stack'' location.
The result of the parse tree is always stored in stack location 0,
so that a stack location 0 is always needed.
Therefore, the end of stack location is always a specified value, and greater than or equal to 0.
The end of stack location must also be greater than or equal to
@itemize
@item
@code{marpa_v_result(v)} for every @code{MARPA_STEP_TOKEN} step,
@item
@code{marpa_v_result(v)}
for every @code{MARPA_STEP_NULLING_SYMBOL} step, and
@item
@code{marpa_v_arg_n(v)}
for every @code{MARPA_STEP_RULE} step.
@end itemize

In practice, an application will often extend the stack
as it iterates through the steps,
initializing the new stack locations as they are created.

Note that our requirement is not merely that the stack locations
exist and be writable, but that they be initialized.
This is necessary for C89 conformance.
Because of write optimizations in our implementation,
the first access to any stack location
may be a read.
C89 allows trap values,
so that a read of an uninitialized location could result
in undefined behavior.
@xref{Trap representations}.

@node Valuator constructor
@section Creating a new valuator

@anchor{marpa_v_new}
@deftypefn {Constructor function} @
Marpa_Value marpa_v_new (  Marpa_Tree @var{t} )

On success, does the following:
@itemize
@item Creates a new valuator.  The parent object of the new valuator
will be the tree iterator @var{t}.
@item Sets the reference count of the new valuator to 1.
@item Sets new valuator to
@dfindex active (valuator)
@dfn{active}.
A valuator is always either active or inactive.
@item Increases the reference count of @var{t} by 1.
@item ``Pauses'' the parent tree iterator.
@end itemize

As long as a parent tree iterator is
@dfindex pause (a parent tree iterator)
@dfn{paused}
@code{marpa_t_next()}
will not succeed,
and therefore the parent tree iterator cannot move on
to a new parse tree.
Many valuators can share the same parent parse tree.
A tree iterator is ``unpaused'' when
all of the valuators of that tree iterator are destroyed.

@strong{Return value}:
On success, the newly created valuator.
On hard failure, @code{NULL}.
@end deftypefn

@node Valuator reference counting
@section Reference counting

@anchor{marpa_v_ref}
@deftypefn {Mutator function} @
Marpa_Value marpa_v_ref (Marpa_Value @var{v})
On success, increases the reference count by 1.
Not needed by most applications.

@strong{Return value}:
On success, @var{v}.
On hard failure, @code{NULL}.
@end deftypefn

@anchor{marpa_v_unref}
@deftypefn {Destructor function} @
void marpa_v_unref (Marpa_Value @var{v})

Decreases the reference count by 1,
destroying @var{v} once the reference count reaches
zero.
@end deftypefn

@node Stepping through the valuator
@section Stepping through the valuator

@anchor{marpa_v_step}
@deftypefn {Mutator function} @
Marpa_Step_Type marpa_v_step ( Marpa_Value @var{v})

Steps through the tree in depth-first, left-to-right order.
On success, does the following:
@itemize
@item Takes the valuator to the next
@dfindex step (of a valuator)
@dfindex valuator step
@dfn{step}
in its life cycle.
@item Sets and returns the
@dfindex valuator step type
@dfindex step type, valuator
@dfindex step type
@dfn{step type},
which is a non-negative integer.
The C type for a step type is @code{Marpa_Step_Type}.
@end itemize

The step type tells
the application how it expected to act on
the step.
@xref{Valuator step types}.
Steps are often referred to along with their step type so that,
for example, we say
``a @code{MARPA_STEP_RULE} step''
to refer to a step whose step type
is @code{MARPA_STEP_RULE}.

When the iteration through the steps is finished,
the step type is @code{MARPA_STEP_INACTIVE}.
At this point, we say that the valuator is
@dfindex inactive (valuator)
@dfn{inactive}.
Once a valuator becomes inactive, it stays inactive.

@strong{Return value}:  On success, a @code{Marpa_Step_Type},
which always be a non-negative integer.
On hard failure, @minus{}2.

@end deftypefn

@node Valuator step types
@section Valuator step types

@deftypevr {Accessor macro} Marpa_Step_Type MARPA_STEP_RULE
MARPA_STEP_RULE is the step type for for a rule node.
The application should perform its equivalent
of rule execution.
@itemize
@item The ``child values'' for this step
will be in the stack locations from
@code{marpa_v_arg_0(v)}
to
@code{marpa_v_arg_n(v)}.
@item
The rule for this step will be
@code{marpa_v_rule(v)}.
@item The result of this step should be written
to stack location
@code{marpa_v_result(v)}.
Typically, the result of this step is determined by
executing the semantics for its rule on
its child values.
@item The stack location of
@code{marpa_v_result(v)}
is guaranteed to
be equal to
@code{marpa_v_arg_0(v)}.
@end itemize

@end deftypevr

@deftypevr {Accessor macro} Marpa_Step_Type MARPA_STEP_TOKEN
MARPA_STEP_TOKEN is the step type for a token node.
The application's equivalent of the evaluation
of the semantics of a non-null token should be performed.
@itemize
@item The application's value for the token whose ID is
at stack location @code{marpa_v_token(v)}.
@item
Libmarpa will already have a``token value'' for the token
in this step,
as was set by the
@code{marpa_r_alternative()} method.
@xref{marpa_r_alternative,marpa_r_alternative()}.
Libmarpa's ``token value'' will be in
stack location @code{marpa_v_token_value(v)}.
@item
The result of the applications's evaluation of the semantics of this token
should be placed in stack location @code{marpa_v_result(v)}.
Often, an application will simply copy Libmarpa's ``token value''
to stack location @code{marpa_v_result(v)}.
@end itemize
@end deftypevr

@deftypevr {Accessor macro} Marpa_Step_Type MARPA_STEP_NULLING_SYMBOL
MARPA_STEP_RULE is the step type for for a nulled node.
The application's equivalent of the evaluation
of the semantics of a nulling token should be performed.
@itemize
@item
The ID of the nulling symbol is
at stack location @code{marpa_v_symbol(v)}.
@item
The application's value for this nulling symbol instance
should be placed in
stack location @code{marpa_v_result(v)}.
Often, an application will assign a fixed value to each
nullable symbol,
and will simply copy this fixed value to
stack location @code{marpa_v_result(v)}.
@end itemize
The use of the word ``nulling'' in
the step type name @code{MARPA_STEP_NULLING_SYMBOL}
is problematic.
While the node must be zero-length (nulled or nulling),
the node's symbol need not be nulling:
it may be nullable.
@xref{Nulling versus nulled}.
@end deftypevr

@deftypevr {Accessor macro} Marpa_Step_Type MARPA_STEP_INACTIVE
When this is the step type, the valuator has gone through all of its steps
and is now inactive.
The value of the parse tree will be in stack location 0.
Because of optimizations,
it is possible for valuator to immediately
became inactive --- @code{MARPA_STEP_INACTIVE} could
be both the first and last step.
Once a valuator becomes inactive, it stays inactive.

@end deftypevr

@deftypevr {Accessor macro} Marpa_Step_Type MARPA_STEP_INITIAL
The valuator is new and has
yet to go through any steps.
@end deftypevr

@deftypevr {Accessor macro} Marpa_Step_Type MARPA_STEP_INTERNAL1
@deftypevrx {Accessor macro} Marpa_Step_Type MARPA_STEP_INTERNAL2
@deftypevrx {Accessor macro} Marpa_Step_Type MARPA_STEP_TRACE
These step types are reserved for internal purposes.
@end deftypevr

@node Basic step accessors
@section Basic step accessors

This section describes the
accessors that are basic to stack manipulation.

@deftypefn {Accessor macro} int marpa_v_arg_0 (Marpa_Value @var{v})
@strong{Return value}:
For a @code{MARPA_STEP_RULE} step,
the stack location where the value of first child
can be found.
For other step types, an unspecified value.
Always succeeds.
@end deftypefn

@deftypefn {Accessor macro} int marpa_v_arg_n (Marpa_Value @var{v})
@strong{Return value}:
For a @code{MARPA_STEP_RULE} step,
the stack location where the value of the last child
can be found.
For other step types, an unspecified value.
Always succeeds.
@end deftypefn

@deftypefn {Accessor macro} int marpa_v_result (Marpa_Value @var{v})
@strong{Return value}:
For @code{MARPA_STEP_RULE},
@code{MARPA_STEP_TOKEN},
and @code{MARPA_STEP_NULLING_SYMBOL} steps,
the stack location where the result of the semantics
should be placed.
For other step types, an unspecified value.
Always succeeds.
@end deftypefn

@deftypefn {Accessor macro} Marpa_Rule_ID marpa_v_rule (Marpa_Value @var{v})
@strong{Return value}:
For the
@code{MARPA_STEP_RULE} step,
the ID of the rule.
For other step types, an unspecified value.
Always succeeds.
@end deftypefn

@deftypefn {Accessor macro} Marpa_Step_Type marpa_v_step_type (Marpa_Value @var{v})
This macro is usually not needed since its return value
is the same as the value that @code{marpa_v_step()} returns on success.

@strong{Return value}:
The current step type: @code{MARPA_STEP_TOKEN}, @code{MARPA_STEP_RULE}, etc.
Always succeeds.
@end deftypefn

@deftypefn {Accessor macro} Marpa_Symbol_ID marpa_v_symbol (Marpa_Value @var{v})
@strong{Return value}:
For the @code{MARPA_STEP_NULLING_SYMBOL} step,
the ID of the symbol.
The value returned is the same as that
returned by the
@code{marpa_v_token()}
macro.
For other step types, an unspecified value.
Always succeeds.
@end deftypefn

@deftypefn {Accessor macro} Marpa_Symbol_ID marpa_v_token (Marpa_Value @var{v})
@strong{Return value}:
For the @code{MARPA_STEP_TOKEN} step,
the ID of the token.
The value returned is the same as that
returned by the
@code{marpa_v_symbol()}
macro.
For other step types, an unspecified value.
Always succeeds.
@end deftypefn

@deftypefn {Accessor macro} int marpa_v_token_value (Marpa_Value @var{v})
@strong{Return value}:
For the @code{MARPA_STEP_TOKEN} step,
the ``token value'' that was assigned to the token by
the @code{marpa_r_alternative()} method.
@xref{marpa_r_alternative,marpa_r_alternative()}.
For other step types, an unspecified value.
Always succeeds.
@end deftypefn

@node Step location accessors
@section Step location accessors

This section describes step accessors that are not basic to stack manipulation.
They provide Earley set location information about the parse tree.

A step's location in terms of Earley sets is called its ES location.
Every ES location is the ID of an Earley set.
ES location is only relevant for steps that correspond to tree nodes.

Every tree node has both a start ES location
and an end ES location.
The start ES location is the first ES location of
that parse node.

The end ES location of a leaf is the ES location where
the next leaf symbol in the fringe of the current parse tree would start.
Typically, this is the location where a leaf node actually starts but,
toward the end of a parse, there may not be an actual next leaf node.

The start ES location of a MARPA_RULE_STEP is the start ES location
of its first child node in the current parse tree.
The end ES location of a MARPA_RULE_STEP is the end ES location
of its last child node in the current parse tree.

@deftypefn {Accessor macro} @
Marpa_Earley_Set_ID marpa_v_es_id (Marpa_Value v)

@strong{Return value}:
If the current step type is MARPA_STEP_RULE, MARPA_STEP_TOKEN, or MARPA_STEP_NULLING_SYMBOL,
the return value is the end ES location of the parse node.
If the current step type is anything else,
or if the valuator is inactive,
the return value is unspecified.
@end deftypefn

@deftypefn {Accessor macro} @
Marpa_Earley_Set_ID marpa_v_rule_start_es_id (Marpa_Value v)

@strong{Return value}:
If the current step type is MARPA_STEP_RULE, the start ES location of the rule node.
If the current step type is anything else,
or if the valuator is inactive,
the return value is unspecified.
@end deftypefn

@deftypefn {Accessor macro} @
Marpa_Earley_Set_ID marpa_v_token_start_es_id (Marpa_Value v)

@strong{Return value}:
If the current step type is MARPA_STEP_TOKEN or MARPA_STEP_NULLING_SYMBOL,
the start ES location of the leaf node.
If the current step type is anything else,
or if the valuator is inactive,
the return value is unspecified.
@end deftypefn

For every parse node of the current parse tree,
the Earley set length (ES length) of the node is the end ES location,
less the start ES location.
The ES length of a nulled node is always 0.

If v is a valuator whose current step type is MARPA_STEP_NULLING_SYMBOL, it is always the case that

@verbatim
         marpa_v_token_start_es_id(v) == marpa_v_es_id(v)
@end verbatim

If v is a valuator whose current step type is MARPA_STEP_RULE or MARPA_STEP_TOKEN,
it is always the case that

@verbatim
        marpa_v_token_start_es_id(v) <= marpa_v_es_id(v)
@end verbatim

For the following examples,
@itemize
@item let @verb{|Null|} be a nulling symbol,
@item let @verb{|Tok|} be a non-nullable symbol, and
@item let the notation @verb{|Sym@m-n|} indicate that the symbol
@verb{|Sym|} has ES start location @verb{|m|} and ES end location @verb{|n|}.
@end itemize

Ordered from left to right, a possible fringe is
@verbatim
        Null@0-0, Tok@0-1, Null@1-1, Tok@1-2, Null@2-2
@end verbatim
Another example is
@verbatim
        Null@0-0, Null@0-0, Tok@0-1, Null@1-1, Null@1-1, Tok@1-2,
        Null@2-2, Null@2-2
@end verbatim
In this second example note that when a nulled leaf immediately follows another
nulled leaf, both leaves has the same start ES location and the same end ES location.
This makes sense, because nulled symbol instances do not advance the current ES location,
but it also implies that the ES locations and LHS symbol
cannot be used to uniquely identify a parse node.

@node Events
@chapter Events

@node Events overview
@section Overview

This chapter discusses Libmarpa's events.
It contains descriptions of both grammar and recognizer methods.

A method is
@dfindex event-generating (method)
@dfn{event-generating}
iff it can add events to the event queue.
The event-generating methods are
@code{marpa_g_precompute()},
@code{marpa_r_earleme_complete()},
and
@code{marpa_r_start_input()}.
The event-generating methods always clear all previous events
so that, on return from an event-generating method,
the only events in the event queue will be
the events generated by that method.

A Libmarpa method or macro is
@dfindex event-safe (method)
@dfn{event-safe}
iff it does not change the events queue.
All Libmarpa accessors are event-safe.

Regardless of the event-safety of the methods calls
between event generation and event access,
it is good practice to access events
as soon as reasonable after the method that generated them.
Note that events are kept in the base grammar,
so that multiple recognizers using the same base grammar
overwrite each other's events.

To find out how many events are in the event queue,
use the
@code{marpa_g_event_count()}
method.

To access specific events,
use the
@code{marpa_g_event()}
and
@code{marpa_g_event_value()}
methods.

@node Basic event accessors
@section Basic event accessors

@anchor{marpa_g_event}
@deftypefn {Accessor function} @
Marpa_Event_Type marpa_g_event (Marpa_Grammar @var{g}, @
    Marpa_Event* @var{event}, int @var{ix})

On success,
@itemize
@item the type of the @var{ix}'th event is returned, and
@item the data for the @var{ix}'th event is placed
in the location pointed to by @var{event}.
@end itemize

Event indexes are in sequence.
Valid events will be in the range from 0 to @var{n},
where @var{n} is one less than the event count.
The event count
can be read using the
@code{marpa_g_event_count()}
method.

Hard fails if
there is no @var{ix}'th event,
or if @var{ix} is negative.
On failure,
the locations pointed to by @var{event}
are not changed.

@strong{Return value}:
On success, the type of event @var{ix},
which is always non-negative.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_g_event_count}
@deftypefn {Accessor function} @
int marpa_g_event_count ( Marpa_Grammar g )

@strong{Return value}:
On success, the number of events, which is always non-negative.
On hard failure, @minus{}2.
@end deftypefn

@deftypefn {Accessor macro} int marpa_g_event_value (Marpa_Event* @var{event})
Returns the ``value'' of the event.
The semantics of the value varies according to the type
of the event, and is described in the section on event
codes.
@xref{Event codes}.

@strong{Return value}: The ``value'' of the event.
Always succeeds.
@end deftypefn

@node Completion events
@section Completion events

Libmarpa can be set up to generate
a @code{MARPA_EVENT_SYMBOL_COMPLETED} event
whenever the symbol is completed.
A symbol is said to be @strong{completed}
when a non-nulling rule with
that symbol on its LHS is completed.

For a completion event to be generated,
the symbol must be
@dfindex mark (as a completion event symbol)
@dfn{marked},
and the event must be
@dfindex activate (a completion symbol event)
@dfn{activated}.

To mark a symbol as a completion event symbol
use the @code{marpa_g_symbol_is_completion_event_set()}
method.
The event will be activated by default.

To activate or deactivate a completion symbol event
use the @code{marpa_r_completion_symbol_activate()}
method.

@anchor{marpa_g_completion_symbol_activate}
@deftypefn {Mutator function} @
int marpa_g_completion_symbol_activate ( @
  Marpa_Grammar @var{g}, @
  Marpa_Symbol_ID @var{sym_id}, @
  int @var{reactivate} )

Allows the user to deactivate and reactivate symbol completion
events in the grammar.
On success, does the following:
@itemize
@item If @var{reactivate} is zero, deactivates the event in the grammar.
@item If @var{reactivate} is one, activates the event in the grammar.
@end itemize

The activation status of a completion event in the grammar becomes the initial
activation status of a completion event in all of its child recognizers.

This method is seldom needed.
When a symbol is marked as a completion event symbol in
the grammar,
it is activated by default.
@xref{marpa_g_symbol_is_completion_event_set, marpa_g_symbol_is_completion_event_set()}.
And a completion event can be deactivated
and reactivated in the recognizer
using the
@code{marpa_r_completion_symbol_activate} method.
@xref{marpa_r_completion_symbol_activate,marpa_r_completion_symbol_activate()}.

Hard fails
if the @var{sym_id} is not marked as a completion event symbol
in the grammar,
or if the grammar has not been precomputed.

@strong{Return value}:
On success, the value of @var{reactivate}, which is a boolean.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_r_completion_symbol_activate}
@deftypefn {Mutator function} @
int marpa_r_completion_symbol_activate ( @
  Marpa_Recognizer @var{r}, @
  Marpa_Symbol_ID @var{sym_id}, @
  int @var{reactivate} )

Allows the user to deactivate and reactivate symbol completion
events in the recognizer.
On success, does the following:
@itemize
@item If @var{reactivate} is zero, deactivates the event in the recognizer.
@item If @var{reactivate} is one, activates the event in the recognizer.
@end itemize

When a recognizer is created,
the activation status of its symbol completion event for @var{sym_id}
is initialized to the activation status of the symbol completion event
for @var{sym_id} in the base grammar.

Hard fails if
@var{sym_id} was not marked for completion events in the base grammar.

@strong{Return value}:
On success, the value of @var{reactivate}, which is a boolean.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_g_symbol_is_completion_event}
@deftypefn {Accessor function} @
int marpa_g_symbol_is_completion_event ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id})

On success, returns a boolean which is 1 iff @var{sym_id} is marked
as a completion event symbol in @var{g}.
For more about completion events,
@pxref{marpa_g_symbol_is_completion_event_set,marpa_g_symbol_is_completion_event_set()}.

On soft failure, @var{sym_id} is well-formed, but there is no
such symbol.

Hard fails if @var{g} is precomputed.

@strong{Return value}:
On success, a boolean .
On soft failure, @minus{}1.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_g_symbol_is_completion_event_set}
@deftypefn {Mutator function} @
int marpa_g_symbol_is_completion_event_set ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id}, @
 int @var{value})

Libmarpa can be set up to generate an
@code{MARPA_EVENT_SYMBOL_COMPLETED}
event whenever the symbol is completed.
A symbol is said to be @strong{completed}
when a non-nulling rule with
that symbol on its LHS is completed.

For completion events for @var{sym_id} to occur, @var{sym_id} must be marked
as a completion event symbol,
and the completion event for @var{sym_id} must be activated in the recognizer.
Event activation also occurs in the grammar,
and the recognizer event activation status for @var{sym_id}
is initialized
from
the grammar event activation status for @var{sym_id}.
@xref{marpa_g_completion_symbol_activate,marpa_g_completion_symbol_activate()}, and
@pxref{marpa_r_completion_symbol_activate,marpa_r_completion_symbol_activate()}.

On success, if @var{value} is 1,
@itemize
@item marks symbol @var{sym_id} as a completion event symbol,
@item activates the completion event for @var{sym_id} in @var{g}, and
@item returns 1.
@end itemize

On success, if @var{value} is 0,
@itemize
@item unmarks symbol @var{sym_id} as a completion event symbol,
@item deactivates the completion event for @var{sym_id} in @var{g}, and
@item returns 0.
@end itemize

Nulled rules and symbols will never cause completion events.
Nullable symbols
may be marked as completion event symbols,
but this will have an effect only when the symbol
is not nulled.
Nulling symbols
may be marked as completion event symbols,
but no completion events will ever be generated
for a nulling symbol.
Note that this implies that no completion event will
ever be generated at earleme 0,
the start of parsing.

If @var{sym_id} is well-formed, but there is no
such symbol, soft fails.

Hards fails if
the grammar is precomputed.

@strong{Return value}:
On success, @var{value}, which is a boolean.
On soft failure, @minus{}1.
On hard failure, @minus{}2.
@end deftypefn

@node Symbol nulled events
@section Symbol nulled events

Libmarpa can set up to generate
an @code{MARPA_EVENT_SYMBOL_NULLED}
event whenever the symbol is nulled.
A symbol is said to be @strong{nulled}
when a zero length instance of that symbol
is recognized.

For a nulled event to be generated,
the symbol must be
@dfindex mark (as a nulled event symbol)
@dfn{marked},
and the event must be
@dfindex activate (a nulled symbol event)
@dfn{activated}.

To mark a symbol as a nulled event symbol
use the @code{marpa_g_symbol_is_nulled_event_set()}
method.
The event will be activated by default.

To activate or deactivate a nulled symbol event
use the @code{marpa_r_nulled_symbol_activate()}
method.

@anchor{marpa_g_nulled_symbol_activate}
@deftypefn {Mutator function} @
int marpa_g_nulled_symbol_activate ( @
  Marpa_Grammar @var{g}, @
  Marpa_Symbol_ID @var{sym_id}, @
  int @var{reactivate} )

Allows the user to deactivate and reactivate symbol nulled
events in the grammar.
On success, does the following:
@itemize
@item If @var{reactivate} is zero, deactivates the event in the grammar.
@item If @var{reactivate} is one, activates the event in the grammar.
@end itemize

The activation status of a nulled event in the grammar becomes the initial
activation status of a nulled event in all of its child recognizers.

This method is seldom needed.
When a symbol is marked as a nulled event symbol in
the grammar,
it is activated by default.
@xref{marpa_g_symbol_is_nulled_event_set, marpa_g_symbol_is_nulled_event_set()}.
And a nulled event can be deactivated
and reactivated in the recognizer
using the
@code{marpa_r_nulled_symbol_activate} method.
@xref{marpa_r_nulled_symbol_activate,marpa_r_nulled_symbol_activate()}.

Hard fails
if the @var{sym_id} is not marked as a nulled event symbol
in the grammar,
or if the grammar has not been precomputed.

@strong{Return value}:
On success, the value of @var{reactivate}, which is a boolean.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_r_nulled_symbol_activate}
@deftypefn {Mutator function} @
int marpa_r_nulled_symbol_activate ( @
  Marpa_Recognizer @var{r}, @
  Marpa_Symbol_ID @var{sym_id}, @
  int @var{boolean} )

Allows the user to deactivate and reactivate symbol nulled
events in the recognizer.
On success, does the following:
@itemize
@item If @var{reactivate} is zero, deactivates the event in the recognizer.
@item If @var{reactivate} is one, activates the event in the recognizer.
@end itemize

When a recognizer is created,
the activation status of its symbol nulled event for @var{sym_id}
is initialized to the activation status of the symbol nulled event
for @var{sym_id} in the base grammar.

Hard fails if
@var{sym_id} was not marked for nulled events in the base grammar.

@strong{Return value}:
On success, the value of @var{reactivate}, which is a boolean.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_g_symbol_is_nulled_event}
@deftypefn {Accessor function} @
int marpa_g_symbol_is_nulled_event ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id})

On success, returns a boolean which is 1 iff @var{sym_id} is marked
as a nulled event symbol in @var{g}.
For more about nulled events,
@pxref{marpa_g_symbol_is_nulled_event_set,marpa_g_symbol_is_nulled_event_set()}.

On soft failure, @var{sym_id} is well-formed, but there is no
such symbol.

Hard fails if @var{g} is precomputed.

@strong{Return value}:
On success, a boolean .
On soft failure, @minus{}1.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_g_symbol_is_nulled_event_set}
@deftypefn {Mutator function} @
int marpa_g_symbol_is_nulled_event_set ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id}, @
 int @var{value})

Libmarpa can set up to generate
an @code{MARPA_EVENT_SYMBOL_NULLED}
event whenever the symbol is nulled.
A symbol is said to be @strong{nulled}
when a zero length instance of that symbol
is recognized.

For nulled events for @var{sym_id} to occur, @var{sym_id} must be marked
as a nulled event symbol,
and the nulled event for @var{sym_id} must be activated in the recognizer.
Event activation also occurs in the grammar,
and the recognizer event activation status for @var{sym_id}
is initialized
from
the grammar event activation status for @var{sym_id}.
@xref{marpa_g_nulled_symbol_activate,marpa_g_nulled_symbol_activate()}, and
@pxref{marpa_r_nulled_symbol_activate,marpa_r_nulled_symbol_activate()}.

On success, if @var{value} is 1,
@itemize
@item marks symbol @var{sym_id} as a nulled event symbol,
@item activates the nulled event for @var{sym_id} in @var{g}, and
@item returns 1.
@end itemize

On success, if @var{value} is 0,
@itemize
@item unmarks symbol @var{sym_id} as a nulled event symbol,
@item deactivates the nulled event for @var{sym_id} in @var{g}, and
@item returns 0.
@end itemize

A symbol instance can never generate both a nulled
and a prediction event at the same location.
Also, a symbol instance can never generate both a nulled
and a completion event at the same location.
(As a reminder, a symbol instance is a symbol
starting at a specific location in the input,
and with a specific length.)
This is because the symbol instance for a nulled
event must be zero length,
and the symbol instance for prediction and completion
events can never be zero length.

However, prediction and nulled events for the
same symbol can trigger at the same location.
This is because
the same location can be the location of a nulled instance
of a symbol,
and the start of an non-nulled instance of the same symbol.

Also, completion and nulled events for the
same symbol can trigger at the same location.
This is because
the same location can be the location of a nulled instance
of a symbol,
and the end of one or more non-nulled instances of the same symbol.

The
@code{marpa_g_symbol_is_nulled_event_set()}
method will
mark a symbol as a nulled event symbol,
even if the symbol is non-nullable.
This is convenient, for example,
for automatically generated grammars.
Applications that wish to treat
it as a failure if there is an
attempt to
mark a non-nullable symbol
as a nulled event symbol,
can check for this case using
the
@code{marpa_g_symbol_is_nullable()}
method.

If @var{sym_id} is well-formed, but there is no
such symbol, soft fails.

Hards fails if
the grammar is precomputed.

@strong{Return value}:
On success, @var{value}, which is a boolean.
On soft failure, @minus{}1.
On hard failure, @minus{}2.
@end deftypefn

@node Prediction events
@section Prediction events

Libmarpa can be set up
to generate a
@code{MARPA_EVENT_SYMBOL_PREDICTED}
event when a non-nulled symbol is predicted.
A non-nulled symbol is said to be @strong{predicted}
when a instance of it
is acceptable at the current
earleme according to the grammar.
Nulled symbols do not generate predictions.

For a prediction event to be generated,
the symbol must be
@dfindex mark (as a prediction event symbol)
@dfn{marked},
and the event must be
@dfindex activate (a prediction symbol event)
@dfn{activated}.

To mark a symbol as a prediction event symbol
use the @code{marpa_g_symbol_is_prediction_event_set()}
method.
The event will be activated by default.

To activate or deactivate a prediction symbol event
use the @code{marpa_r_prediction_symbol_activate()}
method.

@anchor{marpa_g_prediction_symbol_activate}
@deftypefn {Mutator function} @
int marpa_g_prediction_symbol_activate ( @
  Marpa_Grammar @var{g}, @
  Marpa_Symbol_ID @var{sym_id}, @
  int @var{reactivate} )

Allows the user to deactivate and reactivate symbol prediction
events in the grammar.
On success, does the following:
@itemize
@item If @var{reactivate} is zero, deactivates the event in the grammar.
@item If @var{reactivate} is one, activates the event in the grammar.
@end itemize

The activation status of a prediction event in the grammar becomes the initial
activation status of a prediction event in all of its child recognizers.

This method is seldom needed.
When a symbol is marked as a prediction event symbol in
the grammar,
it is activated by default.
@xref{marpa_g_symbol_is_prediction_event_set, marpa_g_symbol_is_prediction_event_set()}.
And a prediction event can be deactivated
and reactivated in the recognizer
using the
@code{marpa_r_prediction_symbol_activate} method.
@xref{marpa_r_prediction_symbol_activate,marpa_r_prediction_symbol_activate()}.

Hard fails
if the @var{sym_id} is not marked as a prediction event symbol
in the grammar,
or if the grammar has not been precomputed.

@strong{Return value}:
On success, the value of @var{reactivate}, which is a boolean.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_r_prediction_symbol_activate}
@deftypefn {Mutator function} @
int marpa_r_prediction_symbol_activate ( @
  Marpa_Recognizer @var{r}, @
  Marpa_Symbol_ID @var{sym_id}, @
  int @var{boolean} )

Allows the user to deactivate and reactivate symbol prediction
events in the recognizer.
On success, does the following:
@itemize
@item If @var{reactivate} is zero, deactivates the event in the recognizer.
@item If @var{reactivate} is one, activates the event in the recognizer.
@end itemize

When a recognizer is created,
the activation status of its symbol prediction event for @var{sym_id}
is initialized to the activation status of the symbol prediction event
for @var{sym_id} in the base grammar.

Hard fails if
@var{sym_id} was not marked for prediction events in the base grammar.

@strong{Return value}:
On success, the value of @var{reactivate}, which is a boolean.
On hard failure, @minus{}2.
@end deftypefn

@anchor{marpa_g_symbol_is_prediction_event}
@deftypefn {Accessor function} @
int marpa_g_symbol_is_prediction_event ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id})

On success, returns a boolean which is 1 iff @var{sym_id} is marked
as a prediction event symbol in @var{g}.
For more about prediction events,
@pxref{marpa_g_symbol_is_prediction_event_set,marpa_g_symbol_is_prediction_event_set()}.

On soft failure, @var{sym_id} is well-formed, but there is no
such symbol.

Hard fails if @var{g} is precomputed.

@strong{Return value}:
On success, a boolean .
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@anchor{marpa_g_symbol_is_prediction_event_set}
@deftypefn {Mutator function} @
int marpa_g_symbol_is_prediction_event_set ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id}, @
 int @var{value})

Libmarpa can be set up
to generate a
@code{MARPA_EVENT_SYMBOL_PREDICTED}
event when a non-nulled symbol is predicted.
A non-nulled symbol is said to be @strong{predicted}
when a instance of it
is acceptable at the current
earleme according to the grammar.
Nulled symbols do not generate predictions.

For prediction events for @var{sym_id} to occur, @var{sym_id} must be marked
as a prediction event symbol,
and the prediction event for @var{sym_id} must be activated in the recognizer.
Event activation also occurs in the grammar,
and the recognizer event activation status for @var{sym_id}
is initialized
from
the grammar event activation status for @var{sym_id}.
@xref{marpa_g_prediction_symbol_activate,marpa_g_prediction_symbol_activate()}, and
@pxref{marpa_r_prediction_symbol_activate,marpa_r_prediction_symbol_activate()}.

On success, if @var{value} is 1,
@itemize
@item marks symbol @var{sym_id} as a prediction event symbol,
@item activates the prediction event for @var{sym_id} in @var{g}, and
@item returns 1.
@end itemize

On success, if @var{value} is 0,
@itemize
@item unmarks symbol @var{sym_id} as a prediction event symbol,
@item deactivates the prediction event for @var{sym_id} in @var{g}, and
@item returns 0.
@end itemize

If @var{sym_id} is well-formed, but there is no
such symbol, soft fails.

Hards fails if
the grammar is precomputed.

@strong{Return value}:
On success, @var{value}, which is a boolean.
On soft failure, @minus{}1.
On hard failure, @minus{}2.
@end deftypefn

@node Symbol expected events
@section Symbol expected events

@anchor{marpa_r_expected_symbol_event_set}
@deftypefn {Mutator function} @
int marpa_r_expected_symbol_event_set ( @
  Marpa_Recognizer @var{r}, @
  Marpa_Symbol_ID @var{symbol_id}, @
  int @var{value})

Libmarpa can be set up
to generate an
@dfindex expected symbol event
@dfindex event, expected symbol
@dfn{expected symbol event}
(@code{MARPA_EVENT_SYMBOL_EXPECTED})
when the symbol with ID @var{symbol_id}
is acceptable as a terminal at the current earleme.
Note that the symbol expected event is only generated if
the symbol with ID @var{symbol_id} is acceptable as terminal.
If the symbol with ID @var{symbol_id} is expected
at the current earleme
as a non-terminal,
but is not acceptable as a terminal,
an expected symbol event will not be triggered
at the current earleme.

On success, if @var{value} is 1,
@itemize
@item
activates the symbol expected event for
the symbol with ID @var{symbol_id} in recognizer @var{r}; and
@item returns 1.
@end itemize

On success, if @var{value} is 0,
@itemize
@item
deactivates the symbol expected event for
the symbol with ID @var{symbol_id} in recognizer @var{r}; and
@item returns 0.
@end itemize

Hard fails if @var{value} is not a boolean.
Hard fails if @var{value} is 1,
and @var{symbol_id} is the ID of a nulling symbol,
an inaccessible symbol,
or an unproductive symbol.
Hard fails if @var{symbol_id} is not the ID of a valid symbol.

@strong{Return value}:
On success, @var{value}, which will be a boolean.
On hard failure,
@minus{}2.
@end deftypefn

@node Event codes
@section Event codes

@deftypevr {Accessor macro} int MARPA_EVENT_NONE
Applications should never see this event.
Event value: Unspecified.
Suggested message: "No event".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_EVENT_COUNTED_NULLABLE
A nullable symbol is either the separator
for, or the right hand side of, a sequence.
Event value: The ID of the symbol.
Suggested message: "This symbol is a counted nullable".
@end deftypevr

@anchor{MARPA_EVENT_EARLEY_ITEM_THRESHOLD}
@deftypevr {Accessor macro} int MARPA_EVENT_EARLEY_ITEM_THRESHOLD
This event
indicates that an application-settable threshold
on the number of Earley items has been reached or exceeded.
@xref{marpa_r_earley_item_warning_threshold_set,
marpa_r_earley_item_warning_threshold_set()}.

Event value: The current Earley item count.
Suggested message: "Too many Earley items".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_EVENT_EXHAUSTED
The parse is exhausted.
Event value: Unspecified.
Suggested message: "Recognizer is exhausted".
@end deftypevr

@anchor{MARPA_EVENT_LOOP_RULES}
@deftypevr {Accessor macro} int MARPA_EVENT_LOOP_RULES
One or more rules are loop rules --- rules
that are part of a cycle.
Parsing with a grammar than contains a loop rule
is deprecated.
@xref{Cycles}.
Event value: The count of loop rules.
Suggested message: "Grammar contains a infinite loop".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_EVENT_NULLING_TERMINAL
This event occurs only if LHS terminals feature is in use.
The LHS terminals feature is deprecated.
@xref{LHS terminals}.
Event value: The ID of the symbol.
Suggested message: "This symbol is a nulling terminal".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_EVENT_SYMBOL_COMPLETED
The recognizer can be set to generate an event
a symbol is completed
using its
@code{marpa_g_symbol_is_completion_event_set()}
method.
(A symbol is ``completed'' if and only if any rule with that symbol
as its LHS is completed.)
This event code indicates that one of those events
occurred.
Event value: The ID of the completed symbol.
Suggested message: "Completed symbol".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_EVENT_SYMBOL_EXPECTED
The recognizer can be set to generate an event when a
symbol is expected as a terminal,
using its
@code{marpa_r_expected_symbol_event_set()}
method.
Note that this event only triggers if the symbol is
expected as a terminal.
Predicted symbols that are not expected as terminals
do not trigger this event.
This event code indicates that one of those events
occurred.
Event value: The ID of the expected symbol.
Suggested message: "Expecting symbol".
@end deftypevr


@deftypevr {Accessor macro} int MARPA_EVENT_SYMBOL_NULLED
The recognizer can be set to generate an event when a
symbol is nulled -- that is, recognized as a
zero-length symbol.
To set an nulled symbol event,
use the recognizer's
@code{marpa_r_nulled_symbol_event_set()}
method.
This event code indicates that a nulled symbol event
occurred.
Event value: The ID of the nulled symbol.
Suggested message: "Symbol was nulled".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_EVENT_SYMBOL_PREDICTED
The recognizer can be set to generate an event when a
symbol is predicted.
To set an predicted symbol event,
use the recognizer's
@code{marpa_g_symbol_is_prediction_event_set()}
method.
Unlike the
@code{MARPA_EVENT_SYMBOL_EXPECTED} event,
the @code{MARPA_EVENT_SYMBOL_PREDICTED} event
triggers for predictions of both
non-terminals and terminals.
This event code indicates that a predicted symbol event
occurred.
Event value: The ID of the predicted symbol.
Suggested message: "Symbol was predicted".
@end deftypevr

@node Error methods macros and codes
@chapter Error methods, macros and codes

@node Error methods
@section Error methods

@anchor{marpa_g_error}
@deftypefn {Accessor function} @
Marpa_Error_Code marpa_g_error ( @
    Marpa_Grammar @var{g}, @
    const char** @var{p_error_string})

Allows the application to read the error code.
@var{p_error_string} is reserved for use by
the internals.
Applications should set it to @code{NULL}.

@strong{Return value}: The current error code.
Always succeeds.
@end deftypefn

@anchor{marpa_g_error_clear}
@deftypefn {Mutator function} @
Marpa_Error_Code marpa_g_error_clear ( @
    Marpa_Grammar @var{g} )

Sets the error code
to @code{MARPA_ERR_NONE}.
Not often used,
but now and then it can be useful
to force the error code to a known state.

@strong{Return value}: @code{MARPA_ERR_NONE}.
Always succeeds.
@end deftypefn

@node Error Macros
@section Error Macros

@deftypevr {Accessor macro} int MARPA_ERRCODE_COUNT
The number of error codes.
All error codes, whether internal or external,
will be integers, non-negative but
strictly less than @code{MARPA_ERRCODE_COUNT}.
@end deftypevr

@node External error codes
@section External error codes

This section lists the external error codes.
These are the only error codes that users
of the Libmarpa external interface should ever see.
Internal error codes are in their own section
(@ref{Internal error codes}).

@deftypevr {Accessor macro} int MARPA_ERR_NONE
No error condition.
The error code is initialized to this value.
Methods that do not result in failure
sometimes reset the error code to @code{MARPA_ERR_NONE}.
Numeric value: 0.
Suggested message: "No error".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_BAD_SEPARATOR
A separator was specified for a sequence rule,
but its ID was not that
of a valid symbol.
Numeric value: 6.
Suggested message: "Separator has invalid symbol ID".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_BEFORE_FIRST_TREE
A tree iterator is positioned before the first tree,
and the tree iterator was specified in a context where
the tree iterator must be positioned at or after
the first tree.
A newly created tree is positioned before the first
tree.
To position a newly created tree iterator to the first tree
use the
@code{marpa_t_next()}
method.
Numeric value: 91.
Suggested message: "Tree iterator is before first tree".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_COUNTED_NULLABLE
A ``counted'' symbol was found
that is also a nullable symbol.
A ``counted'' symbol is one that appears on the RHS
of a sequence rule.
If a symbol is nullable,
counting its occurrences becomes difficult.
Questions of definition and
problems of implementation arise.
At a minimum, a sequence with counted nullables
would be wildly
ambigious.

Sequence rules are simply an optimized shorthand
for rules that can also be written in ordinary BNF.
If the equivalent of a sequence of nullables is
really what your application needs,
nothing in Libmarpa prevents you from specifying
that sequence
with ordinary BNF rules.

Numeric value: 8.
Suggested message: "Nullable symbol on RHS of a sequence rule".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_DUPLICATE_RULE
This error indicates an attempt to add a BNF rule that
is a duplicate of a BNF rule already in the grammar.
Two BNF rules are considered duplicates if

@itemize @bullet
@item
Both rules have the same left hand symbol, and
@item
Both rules have the same right hand symbols in the same order.
@end itemize

Duplication of sequence rules,
and duplication between BNF rules and sequence rules,
is dealt with by requiring that the LHS of a sequence rule
not be the LHS of any other rule.

Numeric value: 11.
Suggested message: "Duplicate rule".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_DUPLICATE_TOKEN
This error indicates an attempt to add a duplicate token.
A token is a duplicate if one already read at the same
earleme has the same symbol ID and the same length.
Numeric value: 12.
Suggested message: "Duplicate token".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_YIM_COUNT
This error code indicates that
an implementation-defined limit on the
number of Earley items per Earley set
was exceedeed.
This limit is different from
the Earley item warning threshold,
an optional limit on the number
of Earley items in an Earley set,
which can be set by the application.

The implementation defined-limit is very large,
at least 500,000,000 earlemes.
An application is unlikely ever to see this
error.
Libmarpa's use of memory
would almost certainly exceed the implementation's
limits before it occurred.
Numeric value: 13.
Suggested message: "Maximum number of Earley items exceeded".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_EVENT_IX_NEGATIVE
A negative event index was specified.
That is not allowed.
Numeric value: 15.
Suggested message: "Negative event index".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_EVENT_IX_OOB
An non-negative event index was specified,
but there is no event at that index.
Since the events are in sequence, this means it
was too large.
Numeric value: 16.
Suggested message: "No event at that index".
@end deftypevr

@anchor{MARPA_ERR_GRAMMAR_HAS_CYCLE}
@deftypevr {Accessor macro} int MARPA_ERR_GRAMMAR_HAS_CYCLE
The grammar has a cycle.
Parsing using a grammar that contains a cycle is deprecated.
@xref{Cycles}.
Numeric value: 17.
Suggested message: "Grammar has cycle".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_HEADERS_DO_NOT_MATCH
This is an internal error, and indicates that
Libmarpa was wrongly built.
Libmarpa was compiled with headers that do not
match the rest of the code.
The solution is to find a correctly built
Libmarpa.
Numeric value: 98.
Suggested message: "Internal error: Libmarpa was built incorrectly"
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_I_AM_NOT_OK
The Libmarpa base grammar is in a ``not ok''
state.
Currently, the only way this can happen
is if Libmarpa memory is being overwritten.
Numeric value: 29.
Suggested message: "Marpa is in a not OK state".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_INACCESSIBLE_TOKEN
This error code indicates that
the token symbol is an inaccessible symbol --- one that
cannot be reached from the start symbol.

Since the inaccessibility of a symbol is a property of the grammar,
this error code typically indicates an application error.
Nevertheless, a retry at this location, using another token ID,
may succeed.
At this writing,
the author knows of no uses of this technique.

Numeric value: 18.
Suggested message: "Token symbol is inaccessible".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_INVALID_BOOLEAN
A function was called that takes a boolean argument,
but the value of that argument was not either 0 or 1.
Numeric value: 22.
Suggested message: "Argument is not boolean".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_INVALID_LOCATION
The location (Earley set ID) is not valid.
It may be invalid for one of two reasons:
@itemize
@item It is negative,
and it is being used as the argument to a method
for which that negative value does not have a special meaning.
@item It is after the latest Earley set.
@end itemize

For users of input models other than the standard one,
the term ``location'', as used in association
with this error code,
means Earley set ID or Earley set ordinal.
In the standard input model, this will always
be identical with Libmarpa's other idea of
location, the earleme.

Numeric value: 25.
Suggested message: "Location is not valid".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_INVALID_START_SYMBOL
A start symbol was specified,
but its symbol ID is not that of a valid symbol.
Numeric value: 27.
Suggested message: "Specified start symbol is not valid".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_INVALID_ASSERTION_ID
A method was called with an invalid assertion ID.
This is a assertion ID that not only does
not exist, but cannot exist.
Currently that means its value is less than zero.
Numeric value: 96.
Suggested message: "Assertion ID is malformed".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_INVALID_RULE_ID
A method was called with an invalid rule ID.
This is a rule ID that not only does
not exist, but cannot exist.
Currently that means its value is less than zero.
Numeric value: 26.
Suggested message: "Rule ID is malformed".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_INVALID_SYMBOL_ID
A method was called with an invalid symbol ID.
This is a symbol ID that not only does
not exist, but cannot exist.
Currently that means its value is less than zero.
Numeric value: 28.
Suggested message: "Symbol ID is malformed".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_MAJOR_VERSION_MISMATCH
There was a mismatch in the major version number
between the requested version
of libmarpa, and the actual one.
Numeric value: 30.
Suggested message: "Libmarpa major version number is a mismatch".

@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_MICRO_VERSION_MISMATCH
There was a mismatch in the micro version number
between the requested version
of libmarpa, and the actual one.
Numeric value: 31.
Suggested message: "Libmarpa micro version number is a mismatch".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_MINOR_VERSION_MISMATCH
There was a mismatch in the minor version number
between the requested version
of libmarpa, and the actual one.
Numeric value: 32.
Suggested message: "Libmarpa minor version number is a mismatch".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_NO_EARLEY_SET_AT_LOCATION
A non-negative Earley set ID (also called an Earley set ordinal)
was specified,
but there is no corresponding Earley set.
Since the Earley set ordinals are in sequence,
this means that the specified ID is greater
than that of the latest Earley set.
Numeric value: 39.
Suggested message: "Earley set ID is after latest Earley set".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_NOT_PRECOMPUTED
The grammar is not precomputed,
and attempt was made to do something with it
that is not allowed for unprecomputed
grammars.
For example, a recognizer cannot be
created from a grammar until it is precomputed.
Numeric value: 34.
Suggested message: "This grammar is not precomputed".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_NO_PARSE
The application attempted to create a bocage
from a recognizer with no parse tree.
Applications will often want to treat this as
a soft error.
Numeric value: 41.
Suggested message: "No parse".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_NO_RULES
A grammar that has no rules is being used
in a way that is not allowed.
Usually the problem is that the user is
trying to precompute the grammar.
Numeric value: 42.
Suggested message: "This grammar does not have any rules".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_NO_START_SYMBOL
The grammar has no start symbol,
and an attempt was made to perform an
operation that requires one.
Usually the problem is that the user is
trying to precompute the grammar.
Numeric value: 43.
Suggested message: "This grammar has no start symbol".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_NO_SUCH_ASSERTION_ID
A method was called with an assertion ID that is well-formed,
but the assertion does not exist.
Numeric value: 97.
Suggested message: "No assertion with this ID exists".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_NO_SUCH_RULE_ID
A method was called with a rule ID that is well-formed,
but the rule does not exist.
Numeric value: 89.
Suggested message: "No rule with this ID exists".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_NO_SUCH_SYMBOL_ID
A method was called with a symbol ID that is well-formed,
but the symbol does not exist.
Numeric value: 90.
Suggested message: "No symbol with this ID exists".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_NO_TOKEN_EXPECTED_HERE
This error code indicates that
no tokens at all were expected at this earleme
location.
This can only happen in alternative input models.

Typically, this indicates an application programming
error.
Retrying input at this location will always fail.
But if the application is able to leave this
earleme empty, a retry at a later location,
using this or another token,
may succeed.
At this writing,
the author knows of no uses of this technique.

Numeric value: 44.
Suggested message: "No token is expected at this earleme location".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_NOT_A_SEQUENCE
This error occurs in situations where a rule
is required to be a sequence,
and indicates that the rule of interest is,
in fact,
not a sequence.

Numeric value: 99.
Suggested message: "Rule is not a sequence".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_NULLING_TERMINAL
This error occurs only if LHS terminals feature is in use.
The LHS terminals feature is deprecated.
@xref{LHS terminals}.
Numeric value: 49.
Suggested message: "A symbol is both terminal and nulling".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_ORDER_FROZEN
The Marpa order object has been frozen.
If a Marpa order object is frozen, it cannot be
changed.

Multiple tree iterators can share a Marpa order object,
but that order object is frozen after the first tree
iterator is created from it.
Applications can order an bocage in many ways,
but they must do so by creating multiple order objects.

Numeric value: 50.
Suggested message: "The ordering is frozen".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_PARSE_EXHAUSTED
The parse is exhausted.
Numeric value: 53.
Suggested message: "The parse is exhausted".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_PARSE_TOO_LONG
The parse is too long.
The limit on the length of a parse is implementation
dependent, but it is very large,
at least 500,000,000 earlemes.

This error code is unlikely in the standard input model.
Almost certainly memory would be exceeded
before it could occur.
If an application sees this error,
it almost certainly using one of the non-standard
input models.

Most often this message will occur because
of a request to add a single extremely long token,
perhaps as a result of an application error.
But it is also possible this error condition will
occur after the input of a large number
of long tokens.

Numeric value: 54.
Suggested message: "This input would make the parse too long".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_POINTER_ARG_NULL
In a method that takes pointers as arguments,
one of the pointer arguments is @code{NULL},
in a case where that is not allowed.
One such method is@
@code{marpa_r_progress_item()}.
Numeric value: 56.
Suggested message: "An argument is null when it should not be".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_PRECOMPUTED
An attempt was made to use a precomputed grammar
in a way that is not allowed.
Often this is an attempt to change the grammar.
Nearly every change to a grammar after
precomputation invalidates the precomputation,
and is therefore not allowed.
Numeric value: 57.
Suggested message: "This grammar is precomputed".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_PROGRESS_REPORT_NOT_STARTED
No recognizer progress report is currently active,
and an action has been attempted that
requires the progress report to be active.
One such action would be a
@code{marpa_r_progress_item()}
call.
Numeric value: 59.
Suggested message: "No progress report has been started".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_PROGRESS_REPORT_EXHAUSTED
The progress report is ``exhausted'' --- all its
items have been iterated through.
Numeric value: 58.
Suggested message: "The progress report is exhausted".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_RANK_TOO_LOW
A symbol or rule rank was specified that
was less than an implementation-defined minimum.
Implementations will always allow at least those
ranks in the range between
@minus{}134,217,727 and 134,217,727.
Numeric value: 85.
Suggested message: "Rule or symbol rank too low".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_RANK_TOO_HIGH
A symbol or rule rank was specified that
was greater than an implementation-defined maximum.
Implementations will always allow at least those
ranks in the range between
@minus{}134,217,727 and 134,217,727.
Numeric value: 86.
Suggested message: "Rule or symbol rank too high".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_RECCE_IS_INCONSISTENT
The recognizer is ``inconsistent'',
usually because the user has rejected one or
more rules or terminals,
and has not yet called
the
@code{marpa_r_consistent()}
method.
Numeric value: 95.
Suggested message: "The recognizer is inconsistent.
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_RECCE_NOT_ACCEPTING_INPUT
The recognizer is not accepting input,
and the application has attempted something that
is inconsistent with that fact.
Numeric value: 60.
Suggested message: "The recognizer is not accepting input".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_RECCE_NOT_STARTED
The recognizer has not been started.
and the application has attempted something that
is inconsistent with that fact.
Numeric value: 61.
Suggested message: "The recognizer has not been started".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_RECCE_STARTED
The recognizer has been started.
and the application has attempted something that
is inconsistent with that fact.
Numeric value: 62.
Suggested message: "The recognizer has been started".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_RHS_IX_NEGATIVE
The index of a RHS symbol was specified,
and it was negative.
That is not allowed.
Numeric value: 63.
Suggested message: "RHS index cannot be negative".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_RHS_IX_OOB
A non-negative index of RHS symbol was specified,
but there is no symbol at that index.
Since the indexes are in sequence, this means the
index was greater than or equal to the rule length.
Numeric value: 64.
Suggested message: "RHS index must be less than rule length".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_RHS_TOO_LONG
An attempt was made to add a rule with too many
right hand side symbols.
The limit on the RHS symbol count is implementation
dependent, but it is very large,
at least 500,000,000 symbols.
This is
far beyond what is required in any current practical grammar.
An application with rules of this length is almost
certain to run into memory and other limits.
Numeric value: 65.
Suggested message: "The RHS is too long".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_SEQUENCE_LHS_NOT_UNIQUE
The LHS of a
sequence rule cannot be the LHS of any other rule,
whether a sequence rule or a BNF rule.
An attempt was made to violate this restriction.
Numeric value: 66.
Suggested message: "LHS of sequence rule would not be unique".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_START_NOT_LHS
The start symbol is not on the LHS on
any rule.
That means it could never match any possible input,
not even the null string.
Presumably, an error in writing the grammar.
Numeric value: 73.
Suggested message: "Start symbol not on LHS of any rule".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_SYMBOL_IS_NOT_COMPLETION_EVENT
An attempt was made to use a symbol in
a way that requires it to be
set up for completion events,
but the symbol was not set
set up for completion events.
The archetypal case is an attempt to activate completion
events for the symbol in the recognizer.
The archetypal case is an attempt to activate a completion
event in the recognizer for
a symbol that is not set up as a completion event.
Numeric value: 92.
Suggested message: "Symbol is not set up for completion events".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_SYMBOL_IS_NOT_NULLED_EVENT
An attempt was made to use a symbol in
a way that requires it to be
set up for nulled events,
but the symbol was not set
set up for nulled events.
The archetypal case is an attempt to activate a nulled
events in the recognizer for
a symbol that is not set up as a nulled event.
Numeric value: 93.
Suggested message: "Symbol is not set up for nulled events".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_SYMBOL_IS_NOT_PREDICTION_EVENT
An attempt was made to use a symbol in
a way that requires it to be
set up for predictino events,
but the symbol was not set
set up for predictino events.
The archetypal case is an attempt to activate a prediction
event in the recognizer for
a symbol that is not set up as a prediction event.
Numeric value: 94.
Suggested message: "Symbol is not set up for prediction events".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_SYMBOL_VALUED_CONFLICT
Unvalued symbols are a deprecated Marpa feature,
which may be avoided with
the
@code{marpa_g_force_valued()}
method.
An unvalued symbol may take on any value,
and therefore a symbol that is unvalued at some points
cannot safely to be used to contain a value at
others.
This error indicates that such an unsafe use is
being attempted.
Numeric value: 74.
Suggested message: "Symbol is treated both as valued and unvalued".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_TERMINAL_IS_LOCKED
An attempt was made to change the terminal status
of a symbol to a different value
after it was locked.
Numeric value: 75.
Suggested message: "The terminal status of the symbol is locked".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_TOKEN_IS_NOT_TERMINAL
A token was specified whose symbol ID is not
a terminal.
Numeric value: 76.
Suggested message: "Token symbol must be a terminal".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_TOKEN_LENGTH_LE_ZERO
A token length was specified that is less than
or equal to zero.
Zero-length tokens are not allowed in Libmarpa.
Numeric value: 77.
Suggested message: "Token length must greater than zero".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_TOKEN_TOO_LONG
The token length is too long.
The limit on the length of a token
is implementation dependent, but it
is at least 500,000,000 earlemes.
An application using a token that long
is almost certain to run into some other
limit.
Numeric value: 78.
Suggested message: "Token is too long".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_TREE_EXHAUSTED
A Libmarpa parse tree iterator
is ``exhausted'', that is,
it has no more parse trees.
Numeric value: 79.
Suggested message: "Tree iterator is exhausted".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_TREE_PAUSED
A Libmarpa tree is ``paused''
and an operation was attempted that
is inconsistent with that fact.
Typically, this operation will be
a call of the
@code{marpa_t_next()}
method.
Numeric value: 80.
Suggested message: "Tree iterator is paused".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_UNEXPECTED_TOKEN_ID
An attempt was made to read a token
where a token with that symbol ID is not
expected.
This message can also occur when an
attempt is made to read a token
at a location where no token is expected.
Numeric value: 81.
Suggested message: "Unexpected token".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_UNPRODUCTIVE_START
The start symbol is unproductive.
That means it could never match any possible input,
not even the null string.
Presumably, an error in writing the grammar.
Numeric value: 82.
Suggested message: "Unproductive start symbol".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_VALUATOR_INACTIVE
The valuator is inactive in a context where that
should not be the case.
Numeric value: 83.
Suggested message: "Valuator inactive".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_VALUED_IS_LOCKED
Unvalued symbols are a deprecated Marpa feature,
which may be avoided with
the
@code{marpa_g_force_valued()}
method.
This error code
indicates that the valued status of a symbol is locked,
and an attempt was made
to change it to a status different from the
current one.
Numeric value: 84.
Suggested message: "The valued status of the symbol is locked".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_SYMBOL_IS_NULLING
An attempt was made to do something with a nulling
symbol that is not allowed.
For example,
the ID of a nulling symbol cannot be an argument
to
@code{marpa_r_expected_symbol_event_set()}
---
because it is not possible to create an ``expected symbol'' event
for a nulling symbol.
Numeric value: 87.
Suggested message: "Symbol is nulling".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_SYMBOL_IS_UNUSED
An attempt was made to do something with an unused symbol that is not allowed.
An ``unused'' symbol is a inaccessible or unproductive symbol.
For example,
the ID of a unused symbol cannot be an argument
to
@code{marpa_r_expected_symbol_event_set()}
---
because it is not possible to create an ``expected symbol'' event
for an unused symbol.
Numeric value: 88.
Suggested message: "Symbol is not used".
@end deftypevr

@node Internal error codes
@section Internal error codes

An internal error code may be one of two things:
First,
it can be an error code that
arises from an internal Libmarpa programming issue
(in other words, something happening in the code
that was not supposed to be able to happen.)
Second, it can be an error code that only occurs
when a method from Libmarpa's internal interface
is used.
Both kinds of internal error message share one common
trait --- users of the Libmarpa's external interface
should never see them.

Internal error messages
require someone with knowledge of the Libmarpa internals
to follow up on them.
They usually do not have descriptions or suggested messages.

@deftypevr {Accessor macro} int MARPA_ERR_AHFA_IX_NEGATIVE
Numeric value: 1.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_AHFA_IX_OOB
Numeric value: 2.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_ANDID_NEGATIVE
Numeric value: 3.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_ANDID_NOT_IN_OR
Numeric value: 4.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_ANDIX_NEGATIVE
Numeric value: 5.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_BOCAGE_ITERATION_EXHAUSTED
Numeric value: 7.
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_DEVELOPMENT
``Development'' errors were used heavily during
Libmarpa's development,
when it was not yet clear how precisely
to classify every error condition.
Unless they are using a developer's version,
users of the external interface
should never
see development errors.

Development errors have an error string
associated with them.
The error string is a
short 7-bit ASCII error string
that describes the error.
Numeric value: 9.
Suggested message: "Development error, see string".
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_DUPLICATE_AND_NODE
Numeric value: 10.
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_YIM_ID_INVALID
Numeric value: 14.
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_INTERNAL
A ``catchall'' internal error.
Numeric value: 19.
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_INVALID_AHFA_ID
The AHFA ID was invalid.  There are no AHFAs
any more, so this message should not occur.
Numeric value: 20.
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_INVALID_AIMID
The AHM ID was invalid.  The term ``AIMID''
is a legacy of earlier implementations and must
be kept for backward compatibility.
Numeric value: 21.

@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_INVALID_IRLID
Numeric value: 23.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_INVALID_NSYID
Numeric value: 24.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_NOOKID_NEGATIVE
Numeric value: 33.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_NOT_TRACING_COMPLETION_LINKS
Numeric value: 35.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_NOT_TRACING_LEO_LINKS
Numeric value: 36.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_NOT_TRACING_TOKEN_LINKS
Numeric value: 37.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_NO_AND_NODES
Numeric value: 38.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_NO_OR_NODES
Numeric value: 40.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_NO_TRACE_YS
Numeric value: 46.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_NO_TRACE_PIM
Numeric value: 47.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_NO_TRACE_YIM
Numeric value: 45.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_NO_TRACE_SRCL
Numeric value: 48.
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_ORID_NEGATIVE
Numeric value: 51.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_OR_ALREADY_ORDERED
Numeric value: 52.
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_PIM_IS_NOT_LIM
Numeric value: 55.
@end deftypevr

@deftypevr {Accessor macro} int MARPA_ERR_SOURCE_TYPE_IS_NONE
Numeric value: 70.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_SOURCE_TYPE_IS_TOKEN
Numeric value: 71.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_SOURCE_TYPE_IS_COMPLETION
Numeric value: 68.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_SOURCE_TYPE_IS_LEO
Numeric value: 69.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_SOURCE_TYPE_IS_AMBIGUOUS
Numeric value: 67.
@end deftypevr
@deftypevr {Accessor macro} int MARPA_ERR_SOURCE_TYPE_IS_UNKNOWN
Numeric value: 72.
@end deftypevr

@node Technical notes
@chapter Technical notes

This section contains technical notes that are
not necessary for the main presentation,
but which may be helpful or interesting.

@node Elizabeth Scott's SPPFs
@section Elizabeth Scott's SPPFs

One of our most important data structures is what we call a ``bocage''.
Prof. Scott's work preceded ours,
and her SPPF structure is our bocage in all essential respects,
so much so that her excellent writeup serves perfectly
as documentation for the bocage:
Scott, Elizabeth. ``SPPF-style parsing from Earley recognisers.'' Electronic Notes in Theoretical Computer Science 203.2 (2008): 53-67,
@url{https://dinhe.net/~aredridel/.notmine/PDFs/Parsing/SCOTT%2C%20Elizabeth%20-%20SPPF-Style%20Parsing%20From%20Earley%20Recognizers.pdf}.

@node Data types used by Libmarpa
@section Data types used by Libmarpa

Libmarpa does not use any floating point data or strings.
All data are either integers or pointers.

@node Why so many time objects
@section Why so many time objects?

Marpa is an aggressively multi-pass algorithm.
Marpa achieves its efficiency,
not in spite of making multiple
passes over the data, but because of it.
Marpa regularly substitutes
two fast O(@var{n}) passes for a single
O(@var{n} log @var{n}) pass.
Marpa's proliferation of time objects is in
keeping with its multi-pass approach.

Bocage objects come at no cost,
even for unambiguous parses,
because the same pass that creates the bocage
also deals with other issues that are of major
significance for unambiguous parses.
It is the post-processing of the bocage pass
that enables Marpa to do both left-
and right-recursion in linear time.

Of the various objects, the best
case for elimination is of the
ordering object.
In many cases, the ordering is trivial.
Either the parse is unambiguous, or the
application does not care about the order in
which parse trees are returned.
But while it would be easy to add an option
to bypass creation of an ordering object,
there is little to be gained from it.
When the ordering is trivial,
its overhead is very small ---
essentially a handful of subroutine calls.
Many orderings accomplish nothing,
but these cost next to nothing.

Tree objects come at minimal cost to unambiguous grammars,
because the same pass that allows iteration through multiple
parse trees does the tree traversal.
This eliminates much of the work that otherwise would
need to be done in
the valuation time object.
In the current implementation, the valuation time object
needs only to step through a sequence already determined
by the tree iterator.

@node Design of numbered objects
@section Numbered objects

As the name suggests,
the choice was made to implement
numbered objects as integers,
and not as
pointers.
In standard-conformant C,
integers can be safely checked for validity,
while pointers cannot.

There are efficiency tradeoffs between pointers and
integers but they are complicated,
and they go both ways.
Pointers can be faster, but integers can be used
as indexes into more than one data structure.
Which is actually faster depends on the design.
Integers allow for a more flexible design,
so that once the choice is settled on,
careful programming can make them a win,
possibly a very big one.

The approach taken in Libmarpa was to settle,
from the outset,
on integers as the implementation for numbered
objects,
and to optimize on that basis.
The author concedes that it is
possible that
others redoing Libmarpa from scratch
might find that pointers are faster.
But the author is confident
that they will also discover,
on modern architectures,
that the lack of safe validity checking
is far too high a price to pay
for the difference in speed.

@node Trap representations
@section Trap representations

In order to be C89 conformant, an application
must initialize all locations that might be read.
This is because C89 allows
@dfindex trap representations
@dfn{trap representations}.

A trap representation is a byte pattern in memory
that is not a valid value of some object type.
When read, the trap representation causes undefined behavior
according to the C89 standard,
making the application that allowed the read non-conformant
to the C89 standard.
Trap representations are carefully defined and discussed in the C99 standard.

In real life, trap representations can occur when floating point values are
used: Some byte patterns that can occur in memory are not valid floating point
values, and can cause undefined behavior when read.

Pointers raise the same issue although,
since it can be safely read as an integer,
some insist that an invalid pointer is not,
strictly speaking, a trap representation.
But there is no portable c89-conformant way of
testing the integer form of a pointer for validity,
so that the only way to guarantee C89 conformance
is to initialize the pointer, either to a valid pointer,
or to a known and therefore testable value, such as @code{NULL}.

All this implies that, in order to claim c89-conformance,
an application must initialize all locations that might be read
to non-trap values.
For a stack implementation, this means that, as a practical matter,
all locations on the stack must be initialized.

@node Out-of-memory handling
@section Out-of-memory handling

Modern operating systems
usually have an out-of-memory (OOM) killer as a component.
When an OOM is in use,
if an application or library is unable to allocate memory,
it usually will not be given an opportunity to handle this error.
See ``When malloc() Never Returns NULL --- Reliability as an Illusion'',
@url{https://arxiv.org/pdf/2208.08484.pdf}.

@node Advanced input models
@chapter Advanced input models

In an earlier chapter, we introduced Libmarpa's concept of input,
and described its basic input models.
@xref{Input}.
In this chapter we describe Libmarpa's advanced models of input.
These advanced input models have attracted considerable interest.
However, they have seen little actual use so far,
and for that reason we delayed their consideration until now.

A Libmarpa input model is
@dfindex advanced input model
@dfindex input model, advanced
@dfn{advanced}
if it allows tokens of length other than 1.
The advanced input models are also called
@dfindex variable-length token input model
@dfindex input model, variable-length token
@dfn{variable-length token models}
because they allow the token
length to vary from the ``normal'' length of 1.

@node The dense variable-length token model
@section The dense variable-length token model

In the
@dfindex dense variable-length input model
@dfindex variable-length input model, dense
@dfindex input model, dense variable-length
@dfn{dense variable-length model of input},
one or more successful
calls of
@code{marpa_r_alternative()}
must be immediately previous
to every call to
@code{marpa_r_earleme_complete()}.
Note that,
for a variable-length input model to be ``dense''
according to this definition,
at least one successful call
of @code{marpa_r_alternative()}
must be immediately previous to each call to
@code{marpa_r_earleme_complete()}.
Recall that, in this document, we say that a @code{marpa_r_alternative()} call is
``immediately previous'' to a
@code{marpa_r_earleme_complete()} call
iff
that @code{marpa_r_earleme_complete()} call is
the first
@code{marpa_r_earleme_complete()} call after
the @code{marpa_r_alternative()} call.

In the dense model of input,
after a successful call of
@code{marpa_r_alternative()},
the earleme variables are as follows:
@itemize
@item
The furthest earleme will be
@code{max(@var{old_f}, @var{old_c}+@var{length})},
    @itemize
    @item where @var{old_f} is the furthest earleme
        before the call to @code{marpa_r_alternative()},
    @item @var{old_c} is the value of the current earleme
        before the call to @code{marpa_r_alternative()}, and
    @item @var{length} is the length of the token read.
    @end itemize
@item
@code{marpa_r_alternative()} never changes the
latest or current earleme.
@end itemize

In the dense variable-length model of input,
the effect of the
@code{marpa_r_earleme_complete()}
mutator on the earleme variables
is the same as for the
basic models of input.
@xref{The standard model of input}.

In the dense model of input,
the latest earleme is always the same as
the current earleme.
In fact,
the latest earleme and the current earleme
are always the same,
except in the fully general model of input.

@node The fully general input model
@section The fully general input model

In the
@dfindex sparse variable-length input model
@dfindex variable-length input model, sparse
@dfindex input model, sparse variable-length
@dfn{sparse variable-length model of input},
zero or more successful
calls of
@code{marpa_r_alternative()}
must be immediately previous
to every call to
@code{marpa_r_earleme_complete()}.
The sparse model is the dense variable-length model,
with its only restriction lifted ---
the sparse variable-length input model
allows calls to
@code{marpa_r_earleme_complete()}
that are not immediately preceded by calls to
@code{marpa_r_alternative()}.

Since it is unrestricted, the sparse input model
is Libmarpa's fully general input model.
Because of this,
it may be useful for us
to state the effect of mutators
on the earleme variables in detail,
even at the expense of some repetition.

In the sparse input model,
@dfindex empty earleme
@dfindex earleme, empty
@dfn{empty earlemes}
are now possible.
An empty earleme is an earleme
with no tokens and no Earley set.
An empty earleme occurs iff
@code{marpa_r_earleme_complete()}
is called when there is no immediately previous
call to
@code{marpa_r_alternative()}.
The sparse model takes its name
from the fact that there may be earlemes with no
Earley set.
In the sparse model, Earley sets are ``sparsely''
distributed among the earlemes.

In the dense model of input,
the effect on the earleme variables of
a successful call of the
@code{marpa_r_alternative()} mutator
is the same as for the sparse model of input:
@itemize
@item
The furthest earleme will be
@code{max(@var{old_f}, @var{old_c}+@var{length})},
    @itemize
    @item where @var{old_f} is the furthest earleme
        before the call to @code{marpa_r_alternative()},
    @item @var{old_c} is the value of the current earleme
        before the call to @code{marpa_r_alternative()}, and
    @item @var{length} is the length of the token read.
    @end itemize
@item
@code{marpa_r_alternative()} never changes the
latest or current earleme.
@end itemize

In the sparse model,
when the earleme is not empty,
the effect of
a call to
@code{marpa_r_earleme_complete()}
on the earleme variables is the same as
in the dense and the basic models of input.
Specifically, the following will be true:
@itemize
@item The current earleme will be advanced to @code{@var{old_c}+1},
where @var{old_c} is the current earleme before the call.
@item The latest earleme will be @code{@var{old_c}+1}, and therefore
will be equal to the current earleme.
@item The value of the furthest earleme is never changed by
a call to
@code{marpa_r_earleme_complete()}.
@end itemize

Recall that, in the dense and basic input models,
as a matter of definition,
there are no empty earlemes.
For the sparse input model,
in the case of an empty earleme,
the effect of the
@code{marpa_r_earleme_complete()}
mutator on the earleme variables
is the following:
@itemize
@item The current earleme will be advanced to @code{@var{old_c}+1},
where @var{old_c} is the current earleme before the call.
@item The latest earleme will remain at @var{old_l},
where the latest earleme before the call is @var{old_l}.
This implies that the latest earleme will be less than
the current earleme.
@item
The furthest earleme is never changed by a call
to
@code{marpa_r_earleme_complete()}.
@end itemize

After a call to @code{marpa_r_earleme_complete()}
for an empty earleme,
the lastest and current earlemes will have different values.
In a parse that never calls @code{marpa_r_earleme_complete()}
for an empty earleme,
the lastest and current earlemes will always be the same.

@node Support
@chapter Support

The ``updates''
(@url{https://github.com/jeffreykegler/libmarpa/blob/updated/UPDATES.md}).
document contains instructions for reporting
bugs, getting answers to questions, and other support.

@node Futures
@chapter Futures

This chapter is not about the current interface.
Instead, it discusses
changes or additions that might be made
to this document or
to the external interface in the future.

@node Nulling versus nulled
@section Nulling versus nulled

Currently we call a zero-length instance (aka tree node)
either a nulling instance or a nulled instance.
The use of ``nulling'' is for historic reasons and
arguably is confusing.
The symbol of a nulling instance is not necessarily
a nulling symbol --- it might be a nullable symbol.
Usage of the term ``nulled'' is less confusing.
At this time, we continue to allow zero-length instances
to be called nulling instances because that terminology
is embedded in a lot of code and documents.

@node Document pre-conditions more formally
@section Document pre-conditions more formally

A more formal approach to documenting preconditions of
the methods is possible,
and may be helpful enough to repay any cost in
verbosity or complexity.
Dave Abrahams recommended I look at
@url{https://www.boost.org/sgi/stl/}
for one approach.

@node Simpler events interface
@section Simpler events interface

Some of the events interfaces are unnecessarily
complex.
Activation in the grammar is unnecessary,
as is the ability to ``unmark'' an event
for a symbol
before precomputation.
@xref{Completion events},
@pxref{Symbol nulled events}, and
@pxref{Prediction events}.

@node Better defined ambiguity metric
@section Better defined ambiguity metric

With experience, we are now in a position to define an
ambiguity metric that can be cheaply calculated,
and that might be of real use.
Preliminary notes are in the CWeb code.

@node Report item traverser should be a time object
@section Report item traverser should be a time object

Right now, a report item traverser is a kind of ``subobject''
of a recognizer.
It should be made into a full-fledged time object.
This will allow multiple report item traversers to be in
use at once,
allowing more aggressive use of this facility.

@node Orthogonal treatment of soft failures
@section Orthogonal treatment of soft failures

The treatment of soft failure evolved along with this interface,
leaving traces of that evolution in the interface.
For example, soft failures should not set the error code,
but soft failure in
@code{marpa_r_progress_item()}
sets the error code to @code{MARPA_ERR_PROGRESS_REPORT_EXHAUSTED}.
@xref{marpa_r_progress_item,marpa_r_progress_item()}.
Similar, soft failure
@code{marpa_t_next()}
sets the error code to @code{MARPA_ERR_TREE_EXHAUSTED}.
These non-orthogonalities should be fixed someday.

@node Orthogonal treatment of exhaustion
@section Orthogonal treatment of exhaustion

The treatment of parse exhaustion is very awkward.
@code{marpa_r_start_input()} returns success on exhaustion,
while
@code{marpa_r_earleme_complete()} either returns success or
a hard failure, depending on circumstances.
@xref{marpa_r_earleme_complete,marpa_r_earleme_complete()}, and
@ref{marpa_r_start_input,marpa_r_start_input()}.

Ideally the treatment should be simpler, more intuitive
and more orthogonal.
Better, perhaps, would be to always treat parse exhaustion
as a soft failure.

@node Furthest earleme values
@section Furthest earleme values

@code{marpa_r_furthest_earleme} returns
@code{unsigned int}, which is non-orthogonal with
@code{marpa_r_current_earleme}.
This leaves no room for an failure return value,
which we deal with by not checking for failures.
The only important potential failure is calling
@code{marpa_r_furthest_earleme} when the furthest
earleme is an indeterminate value.
We eliminate this potential cause of failure by
regarding furthest earleme as having
been initialized when the recognizer was created,
which is another non-orthogonality with
@code{marpa_r_current_earleme}.

All this might be fine, if something were gained, but in fact in the furthest
earleme, unless there is a problem, always becomes the current earleme,
and no use cases for extremely long variable-length tokens are envisioned,
so that the two should never be far apart.
Additionally, the additional values for the furthest earleme only come into
play if the parse is to large for the computer memories as of this writing.
Summarizing, @code{marpa_r_furthest_earleme},
should return an @code{int},
like @code{marpa_r_current_earleme},
and the non-orthogonalities should be eliminated.

@node Additional recoverable failures in marpa_r_alternative()
@section Additional recoverable failures in marpa_r_alternative()

Among the hard failures that
marpa_r_alternative() returns
are the error codes
@code{MARPA_ERR_DUPLICATE_TOKEN},
@code{MARPA_ERR_NO_TOKEN_EXPECTED_HERE}
and @code{MARPA_ERR_INACCESSIBLE_TOKEN}.
These are currently irrecoverable.
They may in fact be fully recoverable,
but are not documented as such because this has not been
tested.

At this writing,
we know of no applications that
attempt to recover from these errors.
It is possible that
these error codes may also be useable for the
techniques similar to the Ruby Slippers,
as of this writing, we know of no proposals
to use them in this way.

@node Untested methods
@section Untested methods

The methods of this section are not in the external interface,
because they have not been adequately tested.
Their fate is uncertain.
Users should regard these methods
as unsupported.

@node Zero-width assertion methods
@subsection Zero-width assertion methods

@anchor{marpa_g_zwa_new}
@deftypefun Marpa_Assertion_ID marpa_g_zwa_new ( @
    Marpa_Grammar @var{g}, @
    int @var{default_value})
@end deftypefun

@anchor{marpa_g_zwa_place}
@deftypefun int marpa_g_zwa_place ( @
    Marpa_Grammar @var{g}, @
    Marpa_Assertion_ID @var{zwaid}, @
    Marpa_Rule_ID @var{xrl_id}, @
    int @var{rhs_ix})
@end deftypefun

@anchor{marpa_r_zwa_default}
@deftypefun int marpa_r_zwa_default ( @
    Marpa_Recognizer @var{r}, @
    Marpa_Assertion_ID @var{zwaid})

On success, returns previous default value of the assertion.
@end deftypefun

@anchor{marpa_r_zwa_default_set}
@deftypefun int marpa_r_zwa_default_set ( @
    Marpa_Recognizer @var{r}, @
    Marpa_Assertion_ID @var{zwaid}, @
    int @var{default_value})

Changes default value to @var{default_value}.
On success, returns previous default value of the assertion.
@end deftypefun

@anchor{marpa_g_highest_zwa_id}
@deftypefun Marpa_Assertion_ID marpa_g_highest_zwa_id ( @
    Marpa_Grammar @var{g} )
@end deftypefun

@node Methods for revising parses
@subsection Methods for revising parses

Marpa allows an application to ``change its mind'' about a parse,
rejecting rules previously recognized or predicted,
and terminals previously scanned.
The methods in this section provide that capability.

@anchor{marpa_r_clean}
@deftypefun Marpa_Earleme marpa_r_clean ( @
    Marpa_Recognizer @var{r})

@end deftypefun

@node Deprecated techniques and methods
@chapter Deprecated techniques and methods

@node LHS terminals
@section LHS terminals

@node Overview of LHS terminals
@subsection Overview of LHS terminals

The user creates LHS terminals with the
@code{marpa_g_symbol_is_terminal_set()}
method.
@xref{marpa_g_symbol_is_terminal_set, marpa_g_symbol_is_terminal_set()}.
If the @code{marpa_g_symbol_is_terminal_set()}
method is never called for a grammar,
then LHS terminals are not
@dfindex LHS terminals in use
@dfindex in use (LHS terminals)
@dfn{in use}
for any time object with that grammar as its
base grammar.

@node Motivation of LHS terminals
@subsection Motivation of LHS terminals

Recall that a terminal symbol is a symbol that
may appear in the input.
Traditionally,
all LHS symbols, as well as
the start symbol, must be non-terminals.
By default, this is Marpa's behavior.

In a departure from tradition,
Marpa had a feature that allowed the user to eliminate the distinction
between terminals and non-terminals.
This feature is now deprecated.

When LHS terminals are in use,
a terminal
can appear on the LHS of one or more rules,
and can be be the start symbol.
Note however,
that terminals can never be zero length.

The basis of the LHS terminals feature
was that,
while sharp division between terminals
and non-terminals was
a useful simplification for proving theorems,
it was not essential in practice.
In the UNIX ``toolkit'' tradition,
the practice has been to include even awkward,
dangerous tools with no known use, in the toolkit.
The philosophy was that empowering the user who
discovers new techniques is more important
than playing nanny to the toolkit's users.

LHS symbols
could be used to bypass,
or ``short circuit'', the rules on whose LHS they occur.
Short circuiting rules, it was thought,
might prove helpful in debugging, or have other applications.

But, a decade after the release of Libmarpa,
no uses for LHS symbols have
emerged.
And they do introduce many new corner cases
into the code and complicate the API documentation.

@node LHS terminal methods
@subsection LHS terminal methods

The
@dfindex terminal status (of a symbol)
@dfn{terminal status}
of a symbol
is a boolean, which is true iff the symbol
is a terminal.
The terminal status of a symbol is
@dfindex locked terminal status
@dfn{locked}
iff the terminal status of that symbol cannot be changed.

@anchor{marpa_g_symbol_is_terminal_set}
@deftypefn {Mutator function} @
int marpa_g_symbol_is_terminal_set ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{sym_id}, @
 int @var{value})

On success, does the following:
@itemize
@item Sets the terminal status of the symbol
in grammar @var{g}
with symbol ID @var{sym_id}
to @var{value}.
To be used as an input symbol
in the
@code{marpa_r_alternative()}
method,
a symbol must be a terminal.
@item Locks
the terminal status of symbol @var{sym_id}.
@item Returns @var{value}.
@end itemize

Hard fails with error code @code{MARPA_ERR_TERMINAL_IS_LOCKED}
if the symbol with @var{sym_id}
is locked,
and the terminal status
of the symbol with @var{sym_id}
is not equal to @var{value}.
Also hard fails if
@var{value} is not a boolean or if @var{g} is precomputed.

@strong{Return value}:
On success, @var{value}, which will be 1 or 0.
On soft failure, @minus{}1.
On hard failure, @minus{}2.

@end deftypefn

@node Precomputation and LHS terminals
@subsection Precomputation and LHS terminals

On success,
@code{marpa_g_precompute()} will sets
and locks the terminal status of every symbol.
More precisely,
let the symbol be @var{x},
let the terminal status of @var{x} when
@code{marpa_g_precompute()} was called
be @var{v_before},
and let the terminal status of @var{x} when
@code{marpa_g_precompute()} returns success
be @var{v_after}.
The effect of the successful call of
@code{marpa_g_precompute()} will be as follows:
@itemize
@item If terminal status of @var{x}
is locked when
@code{marpa_g_precompute()} was called,
then @code{@var{v_after} = @var{v_before}}.
@item If terminal status of @var{x}
is not locked, and @var{x} appears on
the LHS of some rule
then @var{v_after} is false.
@item If terminal status of @var{x}
is not locked, and @var{x} does not appear on
the LHS of any rule
then @var{v_after} is true.
@end itemize
The terminal status of all symbols is locked
after a successful call to
@code{marpa_g_precompute()}.
@xref{marpa_g_precompute, marpa_g_precompute()}.

@node Nulling terminals
@subsection Nulling terminals

When LHS terminals are not in use, nulling terminals
cannot occur,
and applications need not take them in account.
This is because, in order to be nullable,
a symbol must appear on the LHS of a nullable rule.
Without LHS terminals, therefore, no terminals can
ever be either nullable or nulling.

Things become more complicated if LHS terminals are allowed.
In that case nulling terminals can be created,
and Libmarpa must take measures to prevent a recognizer from being
created for a grammar with nulling terminals.
Libmarpa will not allow a recognizer to be created from a grammar
with nulling terminals because they are a logical contradiction.
A terminal is (by definition) a symbol which can appear in the input,
and a nulling symbol, by definition, cannot appear in the input.

Libmarpa's @code{marpa_g_precompute} method
fails with the error code @code{MARPA_ERR_NULLING_TERMINAL}
if it detects nulling terminals during precomputation.
The error code @code{MARPA_ERR_NULLING_TERMINAL}
is library-recoverable.
@xref{marpa_g_precompute, marpa_g_precompute()}.

Libmarpa's @code{marpa_g_precompute} method
also triggers
one @code{MARPA_EVENT_NULLING_TERMINAL} event
for every nulling terminal in the grammar.
This implies that
one or more @code{MARPA_EVENT_NULLING_TERMINAL} events
occur iff
@code{marpa_g_precompute} fails
with error code @code{MARPA_ERR_NULLING_TERMINAL}.

@node Valued and unvalued symbols
@section Valued and unvalued symbols

@node What unvalued symbols were
@subsection What unvalued symbols were

Libmarpa symbols can have values,
which is the traditional way of doing semantics.
Libmarpa also allows symbols to be unvalued.
An
@dfindex unvalued symbol
@dfindex symbol, unvalued
@dfn{unvalued}
symbol is one whose value
is unpredictable from instance to instance.
If a symbol is unvalued, we sometimes say that it
has ``whatever'' semantics.

Situations where the semantics can tolerate unvalued symbols
are surprisingly frequent.
For example, the top-level of many languages is a series
of major units, all of whose semantics are typically accomplished
via side effects.
The compiler is typically indifferent to the actual value produced
by these major units, and tracking them is a waste of time.
Similarly, the value of the separators in a list is typically
ignored.

Rules are unvalued if and only if their LHS symbols
are unvalued.
When rules and symbols are unvalued,
Libmarpa optimizes their evaluation.

It is in principle unsafe to check the value
of a symbol if it can be unvalued.
For this reason,
once a symbol has been treated as valued,
Libmarpa marks it as valued.
Similarly,
once a symbol has been treated as unvalued,
Libmarpa marks it as unvalued.
Once marked, a symbol's valued status is
@dfindex locked value status (of a symbol)
@dfindex value status, locked (of a symbol)
@dfn{locked}
and cannot be changed later.

The valued status of terminals is marked the first
time they are read.

Unvalued symbols may be used in combination with
another deprecated feature, LHS terminals.
@xref{LHS terminals}.
The valued status of LHS symbols must be explicitly
marked by the application when initializing the
valuator --- this is Libmarpa's equivalent of
registering a callback.

The valued status of a LHS terminal
will be locked in the recognizer
if it is used as a terminal,
and the symbol's use as a rule LHS
in the valuator must be
consistent with the recognizer's valued marking.
LHS terminals are disabled by default.

Marpa reports an error when a symbol's use
conflicts with its locked valued status.
Doing so usually saves the Libmarpa user
some tricky debugging further down the road.

@node Grammar methods dealing with unvalued symbols
@subsection Grammar methods dealing with unvalued symbols

@anchor{marpa_g_symbol_is_valued_set}
@deftypefun int marpa_g_symbol_is_valued_set ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{symbol_id}, @
    int value)
@anchor{marpa_g_symbol_is_valued}
@deftypefunx int marpa_g_symbol_is_valued ( @
    Marpa_Grammar @var{g}, @
    Marpa_Symbol_ID @var{symbol_id})

These methods, respectively, set
and query the ``valued status'' of a symbol.
Once set to a value with the
@code{marpa_g_symbol_is_valued_set()}
method,
the valued status of a symbol is ``locked'' at that value.
It cannot thereafter be changed.
Subsequent calls to
@code{marpa_g_symbol_is_valued_set()}
for the same @var{sym_id} will fail,
leaving @var{sym_id}'s valued status unchanged,
unless @var{value} is the same as the locked-in value.

Return value: On success, 1 if the symbol @var{symbol_id}
is valued after the call, 0 if not.
If the valued status is locked and @var{value}
is different from the current status, @minus{}2.
If @var{value} is not 0 or 1;
or on other failure, @minus{}2.

@end deftypefun

@node Registering semantics in the valuator
@subsection Registering semantics in the valuator

By default, Libmarpa's valuator objects
assume that
non-terminal symbols have
no semantics.
The archetypal application will need to register
symbols that contain semantics.
The primary method for doing this is
@code{marpa_v_symbol_is_valued()}.
Applications will typically register semantics by rule,
and these applications will find
the
@code{marpa_v_rule_is_valued()}
method more convenient.

@anchor{marpa_v_symbol_is_valued_set}
@deftypefun int marpa_v_symbol_is_valued_set ( @
    Marpa_Value @var{v}, @
    Marpa_Symbol_ID @var{sym_id}, @
    int @var{status} )
@anchor{marpa_v_symbol_is_valued}
@deftypefunx int marpa_v_symbol_is_valued ( @
    Marpa_Value @var{v}, @
    Marpa_Symbol_ID @var{sym_id} )

These methods, respectively,
set and query
the valued status of symbol @var{sym_id}.
@code{marpa_v_symbol_is_valued_set()}
will set
the valued status to
the value of
its @var{status} argument.
A valued status of 1 indicates that the symbol is valued.
A valued status of 0 indicates that the symbol is unvalued.
If the valued status is locked,
an attempt to change to a status different from the
current one will fail
(error code @code{MARPA_ERR_VALUED_IS_LOCKED}).

Return value:  On success, the valued status @strong{after}
the call.
If @var{value} is not either 0 or 1,
or on other failure, @minus{}2.
@end deftypefun

@anchor{marpa_v_rule_is_valued_set}
@deftypefun int marpa_v_rule_is_valued_set ( @
    Marpa_Value @var{v}, @
    Marpa_Rule_ID @var{rule_id}, @
    int @var{status} )
@anchor{marpa_v_rule_is_valued}
@deftypefunx int marpa_v_rule_is_valued ( @
    Marpa_Value @var{v}, @
    Marpa_Rule_ID @var{rule_id} )

These methods, respectively,
set and query
the valued status
for the LHS symbol of rule @var{rule_id}.
@code{marpa_v_rule_is_valued_set()}
sets
the valued status to the value
of its @var{status} argument.

A valued status of 1 indicates that the symbol is valued.
A valued status of 0 indicates that the symbol is unvalued.
If the valued status is locked,
an attempt to change to a status different from the
current one will fail
(error code @code{MARPA_ERR_VALUED_IS_LOCKED}).

Rules have no valued status of their own.
The valued status of a rule
is always that of its LHS symbol.
These methods are conveniences --- they
save the application the trouble of looking
up the rule's LHS.

Return value:  On success, the valued status of the
rule @var{rule_id}'s LHS symbol @strong{after}
the call.
If @var{value} is not either 0 or 1,
or on other failure, @minus{}2.
@end deftypefun

@anchor{marpa_v_valued_force}
@deftypefun int marpa_v_valued_force ( @
    Marpa_Value @var{v})

This methods locks the valued status of all symbols
to 1, indicated that the symbol is valued.
If this is not possible, for example because one of
the grammar's symbols already is locked at a valued
status of 0,
failure is returned.

Return value: On success, a non-negative number.
On failure, returns @minus{}2,
and sets the error code to an appropriate
value, which will never be
@code{MARPA_ERR_NONE}.

@end deftypefun

@node Cycles
@section Cycles

A cycle is a case in a grammar where a string
non-trvially derives itself.
Marpa will parse grammars with cycles,
but this is deprecated.
Applications should treat cycles
as mistakes on the part of the writer of the grammar,
and not attempt to parse with grammars that contain cycles.

If Marpa is used to parse an input that causes a cycle,
it will limit the cycle to a single loop,
so that only a finite number of parse trees is returned.
Again, parsing with cycles is deprecated.

For more on cycles, see
@itemize
@item @ref{marpa_g_has_cycle,marpa_g_has_cycle()};
@item @ref{marpa_g_rule_is_loop, marpa_g_rule_is_loop()};
@item the discussion on the
@code{MARPA_ERR_GRAMMAR_HAS_CYCLE}
and @code{MARPA_EVENT_LOOP_RULES} events
in @ref{marpa_g_precompute, marpa_g_precompute()};
@item @ref{MARPA_EVENT_LOOP_RULES}; and
@item @ref{MARPA_ERR_GRAMMAR_HAS_CYCLE}.
@end itemize

@node History of the Marpa algorithm
@chapter History of the Marpa algorithm

This chapter is a quick summary of the most important
events in Marpa's development.
My ``timeline'' of the major events in parsing theory
has a much broader scope,
and also includes more detail
about Marpa's development.
@xref{Timeline}.

@itemize
@item @strong{1970}:
Jay Earley invents the algorithm that now bears his
name
@xref{Bibliography-Earley-1970}.

@item @strong{1991}:
Joop Leo describes a way to modify Earley's algorithm so that it
runs in O(n) time for all LR-regular
grammars.
@xref{Bibliography-Leo-1991}.
LR-regular is a vast class of grammars, including all the
LR(k) grammars, all grammars parseable with recursive descent,
and regular expressions.
LR-regular can safely be thought of as including all grammars
in practical use today, and then some.

@item @strong{2002}:
Aycock and Horspool describe a way to do LR(0)
precomputation
@xref{Bibliography-Aycock-and-Horspool-2002}.
for Earley's algorithm.
Their method makes Earley's faster in most
practical situations, but not all.
In particular, right-recursion remains quadratic in
the Aycock and Horspool algorithm.
Worst case is no better than Earley's.
Leo is unaware of Aycock and Horspool's work
and Aycock and Horspool seem unaware of Leo.

@item @strong{2010}:
Marpa combines the Leo and Aycock-Horspool
algorithms
in the process making significant
changes to both of them.
@xref{Bibliography-Kegler-2022}.
The result preserves the
best features of both.
Marpa also tackles the many remaining
implementation issues.

@end itemize

@node Annotated bibliography
@chapter Annotated bibliography

@node Aho and Ullman 1972
@section Aho and Ullman 1972
@anchor{Bibliography-Aho-and-Ullman-1972}

@emph{The Theory of Parsing, Translation and Compiling, Volume I: Parsing}
by Alfred Aho and Jeffrey Ullman
(Prentice-Hall: Englewood Cliffs, New Jersey, 1972).
I think this was the
standard source for Earley's algorithm for decades.
It certainly was @strong{my} standard source.
The account of Earley's algorithm is on pages 320-330.

@node Aycock and Horspool 2002
@section Aycock and Horspool 2002
@anchor{Bibliography-Aycock-and-Horspool-2002}

Marpa is based on ideas from
John Aycock and R.
Nigel Horspool's ``Practical Earley Parsing'', @emph{The Computer Journal},
Vol. 45, No. 6, 2002, pp. 620-630.
The idea of doing LR(0)
precomputation for
Earley's general parsing algorithm
(@pxref{Bibliography-Earley-1970}),
and Marpa's approach to handling nullable symbols and rules,
both came from this article.

The Aycock and Horspool paper
summarizes Earley's very nicely and is
available on the web: @url{http://www.cs.uvic.ca/~nigelh/Publications/PracticalEarleyParsing.pdf}.
Unlike Earley's 1970 paper
(@pxref{Bibliography-Earley-1970}),
Aycock and Horspool 2002 is @strong{not} easy reading.
I have been following
this particular topic on and off for years
and nonetheless found this paper very heavy going.

@node Dominus 2005
@section Dominus 2005
@anchor{Bibliography-Dominus-2005}

Although my approach to parsing is not influenced
by Mark Jason Dominus's @emph{Higher Order Perl},
Mark's treatment of parsing is an excellent introduction to parsing,
especially in a Perl context.
His focus on just about every other technique @strong{except}
general BNF parsing is pretty much standard, and
will help a beginner understand how unconventional
Marpa's approach is.

Both Mark's Perl and his English are examples of good writing,
and the book is dense with insights.
Mark's discussion on memoization in Chapter 3 is the
best I've seen.
I wish I'd bought his book earlier in my coding.

Mark's book is available on-line.
You can download chapter-by-chapter or the whole thing at once,
and you can take your pick of his original sources or PDF,
at @url{http://hop.perl.plover.com/book/}.
A PDF of the parsing chapter is at @url{http://hop.perl.plover.com/book/pdf/08Parsing.pdf}.

@node Earley 1970
@section Earley 1970
@anchor{Bibliography-Earley-1970}

Of
Jay Earley's papers on his general parsing algorithm,
the most readily available
is ``An efficient context-free parsing algorithm'',
@emph{Communications of the Association for Computing Machinery},
13:2:94-102, 1970.

Ordinarily, I'd not bother pointing out 35-year old nits
in a brilliant and historically important article.
But more than a few people treat this article as not just the first word in Earley
parsing, but the last as well.
Many implementations of Earley's algorithm come, directly and
unaltered, from his paper.
These implementers and their users need to be aware of two issues.

First, the recognition engine itself, as described, has a serious bug.
There's an easy fix, but one that greatly slows down an algorithm
whose main problem, in its original form, was speed.
This issue is well laid out by
Aycock and Horspool
in their article.
@xref{Bibliography-Aycock-and-Horspool-2002}.

Second,
according to Tomita there is a mistake in the parse
tree representation.
See page 153 of @ref{Bibliography-Grune-and-Jacobs-1990},
page 210 of @ref{Bibliography-Grune-and-Jacobs-2008},
and the bibliography entry for Earley 1970 in @ref{Bibliography-Grune-and-Jacobs-2008}.
In the printed edition of the 2008 bibliography, the entry is on page 578,
and on the web
(@url{ftp://ftp.cs.vu.nl/pub/dick/PTAPG_2nd_Edition/CompleteList.pdf}),
it's on pp. 583-584.
My methods for producing parse results
from Earley sets do not come from Earley 1970,
so I am taking Tomita's word on this one.

@node Grune and Jacobs 1990
@section Grune and Jacobs 1990
@anchor{Bibliography-Grune-and-Jacobs-1990}

@emph{Parsing Techniques: A Practical Guide},
by Dick Grune and
Ceriel Jacobs,
(Ellis Horwood Limited: Chichester, West Sussex, England,
1990).
This book is available on the Web: @url{http://dickgrune.com/Books/PTAPG_1st_Edition/}

@node Grune and Jacobs 2008
@section Grune and Jacobs 2008
@anchor{Bibliography-Grune-and-Jacobs-2008}

@emph{Parsing Techniques: A Practical Guide},
by Dick Grune and
Ceriel Jacobs,
2nd Edition.
(Springer: New York NY, 2008).
This is the most authoritative and comprehensive introduction
to parsing I know of.
In theory it requires no mathematics, only a programming background,
but even so it is moderately difficult reading.

This is @ref{Bibliography-Grune-and-Jacobs-1990},
updated.
The bibliography for this book is available in enlarged form
on the web: @url{ftp://ftp.cs.vu.nl/pub/dick/PTAPG_2nd_Edition/CompleteList.pdf}.

@node Kegler 2022
@section Kegler 2022
@anchor{Bibliography-Kegler-2022}

My writeup of the theory behind Marpa,
with proofs of correctness and of my complexity claims,
was first made public in 2013.
It was updated in 2022,
and can be found on @code{arxiv.org} (@url{https://arxiv.org/abs/1910.08129}).

@node Timeline
@section Timeline
@anchor{Bibliography-Timeline}

Far more popular than my Marpa theory paper is my
@emph{Parsing: a timeline}.
This is a detailed history of parsing theory,
and is available online:
@url{https://jeffreykegler.github.io/personal/timeline_v3}.

@node Leo 1991
@section Leo 1991
@anchor{Bibliography-Leo-1991}

Marpa's handling of right-recursion uses the ideas in
Joop M.I.M. Leo's
``A General Context-Free Parsing Algorithm Running in Linear
Time on Every LR(k) Grammar Without Using Lookahead'',
@emph{Theoretical Computer Science},
Vol. 82, No. 1, 1991, pp 165-176.
This is a difficult paper.
It is available online at
@url{http://www.sciencedirect.com/science/article/pii/030439759190180A},
click the PDF icon at the top left.

@anchor{Bibliography-Wikipedia}
@node Wikipedia
@section Wikipedia

Wikipedia's article on Backus-Naur form is
@url{http://en.wikipedia.org/wiki/Backus-Naur_form}.
It's a great place to start if you don't know the
basics of grammars and parsing.
As Wikipedia points out,
BNF might better be called Panini-Backus Form.
The grammarian Panini
gave a precise description of Sanskrit
more than 23 centuries earlier in India
using a similar notation.

@node Acknowledgements
@chapter Acknowledgements

@quotation
Beggar that I am, I am even poor in thanks; but I thank you;
and sure, dear friends, my thanks are too dear a halfpenny.
@author Hamlet, Act 2, scene 2
@end quotation

This section is to thank those who have assisted us,
not just with Libmarpa,
but with the Marpa project as a whole.
Many people have helped us in many ways,
and it is risky
to single out one of them.
But
Ron Savage was a very aggressive early adopter of Marpa,
went on to maintain a Marpa web site and FAQ,
and provided generous financial support.

Two other very early supporters were
Peter Stuifzand and Ruslan Zakirov.
Peter Stuifzand invented the ``Stuifzand interface'',
the prototype on which Marpa's SLIF interface is based.
Ruslan Zakirov started, and agreed to moderate,
the ``Marpa parser'' mailing list.
A list of the other contributions to Marpa that Ron, Peter, and Ruslan Z. made
over the years would be very long.

Larry Wall provided wise and experienced advice which saved us much trouble.
Larry's openness to new ideas has been
a major encouragement,
and his insight into the relationship between
``natural language'' and computer language
has been a major influence.
Randal Schwartz, Allison Randal and Patrick Michaud were also generous with their
very valuable time.

At perlmonks.org,
answers from
chromatic, Corion, dragonchild,
jdporter, samtregar and Juerd were helpful.
In writing an early, ``pure Perl'' version of Marpa, I benefited from studying
the work of Francois Desarmenien (@code{Parse::Yapp}),
Damian Conway (@code{Parse::RecDescent}) and
Graham Barr (@code{Scalar::Util}).
Adam Kennedy patiently instructed me
in module writing,
both on the finer points and
on issues about which I really should have known better.

Jean-Damien Durand's assistance included several ambitious
Marpa applications,
as well as the Windows port of Marpa.
Deyan Ginev provided advice on LaTeX and
on deeper matters which proved essential.
Lenz Moritz quietly and effectively maintained our IRC channel.
Andrew Rodland stood in for Jeffrey Kegler as the face of Marpa
when it was needed,
and his TAP parser, which used one Marpa grammar that fed
another, was a major inspiration for the SLIF.
Ruslan Shvedov provided many hours of assistance,
including contributing linguistic insights into details of code testing,
creating a test suite for Libmarpa,
making major contributions to the Perl test suite,
helping with my implementation of ASF's,
and assisting me in writing documentation.
Luc St-Louis moderated the Marpa IRC channel,
saving Jeffrey time,
and the channel's other users from having to put up with Jeffrey who,
as a moderator,
could be too heavy-handed.
An anonymous member of the Hoon community was generous
financially.

Additional help came from
Dave Abrahams,
Mohammad S Anwar,
Lukas Atkinson,
Peter Blackson,
Domingo Alvarez Duarte,
Anton Dyudin,
B. Fraser,
Zaki Mughal,
Omar Roth,
Arsen Shnurkov,
Aria Stewart,
Flaviu Tomas,
and David Whitten.

Finally, my thanks to all those who participated
in the discussions on perlmonk.org,
on the ``Marpa parser'' mailing list,
and on the #marpa IRC channel.
It is hard to describe how important
informed and constructive feedback
is to a lone laborer on
a complex and large project like Marpa,
and I greatly appreciate all
those who participated.

@node An apology
@section An apology

We feared that these acknowledgements would
become an exhibition of our negligence and ingratitude,
and at least to some degree this has turned out to be the case.
There were plans for things to be better.
We took care to thank those who helped us
in Marpa's IRC channel,
thinking that we could use the channel's backlog
as a source for these notices.

The European Union (EU) had other ideas.
In 2018, the EU passed the
General Data Protection Regulation (GDPR),
which suddenly brought our plans to nought.
Under the GDPR,
logs like that for Marpa's IRC channel could not possibly be made
conformant in a way that kept their administrators safe from
legal action.
In theory this applied to similar, highly-profitable databases maintained
by large corporations,
as much as it did to the volunteers
generously maintaining the backlog for our IRC channel.
In practice large corporations have been able to largely neutralize the GDPR,
deftly parrying most enforcement,
with their worst possible outcome being a cost-of-doing-business fine.
For the typical volunteer, however, even winning a legal action is ruinous,
given the costs.

Whether or not some were aware of
GDPR's highly discriminatory effects
when it was being drafted,
the realization of the GDPR's practical implications
for volunteer-driven open source effort
came to our community very abruptly,
and after it was already in effect.
Our backlogging was done in EU jurisdiction,
and no measure to save our IRC backlogs
could be taken
without exposing innocent and generous volunteers
to almost certainly disastrous legal action.
My notes for these acknkowledgements
needed to be cobbled together from other sources.

@node Index of terms
@unnumbered Index of terms

This index is of terms that are used in a special sense in
this document.
Not every use of these terms is indexed ---
only those uses that are in some way defining.

@printindex df

@bye
@c vim: expandtab shiftwidth=4:
